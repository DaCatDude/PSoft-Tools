// Generated from Java8.g4 by ANTLR 4.13.2
// jshint ignore: start
import antlr4 from 'antlr4';
import Java8Listener from './Java8Listener.js';
const serializedATN = [4,1,107,2858,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,
7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,
2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,
7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,
34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,
2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,
49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,
63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,
78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,85,
7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,91,2,92,7,
92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,7,98,2,99,7,99,
2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,7,104,2,105,7,105,
2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,7,110,2,111,7,111,
2,112,7,112,2,113,7,113,2,114,7,114,2,115,7,115,2,116,7,116,2,117,7,117,
2,118,7,118,2,119,7,119,2,120,7,120,2,121,7,121,2,122,7,122,2,123,7,123,
2,124,7,124,2,125,7,125,2,126,7,126,2,127,7,127,2,128,7,128,2,129,7,129,
2,130,7,130,2,131,7,131,2,132,7,132,2,133,7,133,2,134,7,134,2,135,7,135,
2,136,7,136,2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,2,141,7,141,
2,142,7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,2,147,7,147,
2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,2,153,7,153,
2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,7,158,2,159,7,159,
2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,7,164,2,165,7,165,
2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,2,170,7,170,2,171,7,171,
2,172,7,172,2,173,7,173,2,174,7,174,2,175,7,175,2,176,7,176,2,177,7,177,
2,178,7,178,2,179,7,179,2,180,7,180,2,181,7,181,2,182,7,182,2,183,7,183,
2,184,7,184,2,185,7,185,2,186,7,186,2,187,7,187,2,188,7,188,2,189,7,189,
2,190,7,190,2,191,7,191,2,192,7,192,2,193,7,193,2,194,7,194,2,195,7,195,
2,196,7,196,2,197,7,197,2,198,7,198,2,199,7,199,2,200,7,200,2,201,7,201,
2,202,7,202,2,203,7,203,2,204,7,204,2,205,7,205,2,206,7,206,2,207,7,207,
2,208,7,208,2,209,7,209,2,210,7,210,2,211,7,211,2,212,7,212,2,213,7,213,
2,214,7,214,2,215,7,215,2,216,7,216,2,217,7,217,2,218,7,218,2,219,7,219,
2,220,7,220,2,221,7,221,2,222,7,222,2,223,7,223,2,224,7,224,2,225,7,225,
2,226,7,226,2,227,7,227,2,228,7,228,2,229,7,229,2,230,7,230,2,231,7,231,
2,232,7,232,2,233,7,233,2,234,7,234,2,235,7,235,2,236,7,236,1,0,1,0,1,1,
1,1,3,1,479,8,1,1,2,5,2,482,8,2,10,2,12,2,485,9,2,1,2,1,2,5,2,489,8,2,10,
2,12,2,492,9,2,1,2,3,2,495,8,2,1,3,1,3,3,3,499,8,3,1,4,1,4,1,5,1,5,1,6,1,
6,1,6,3,6,508,8,6,1,7,1,7,3,7,512,8,7,1,7,1,7,5,7,516,8,7,10,7,12,7,519,
9,7,1,8,5,8,522,8,8,10,8,12,8,525,9,8,1,8,1,8,3,8,529,8,8,1,8,1,8,1,8,5,
8,534,8,8,10,8,12,8,537,9,8,1,8,1,8,3,8,541,8,8,3,8,543,8,8,1,9,1,9,5,9,
547,8,9,10,9,12,9,550,9,9,1,9,1,9,3,9,554,8,9,1,10,5,10,557,8,10,10,10,12,
10,560,9,10,1,10,1,10,3,10,564,8,10,1,11,1,11,1,12,1,12,1,13,1,13,1,14,5,
14,573,8,14,10,14,12,14,576,9,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,
1,15,1,15,1,15,3,15,589,8,15,1,16,5,16,592,8,16,10,16,12,16,595,9,16,1,16,
1,16,1,16,5,16,600,8,16,10,16,12,16,603,9,16,1,16,1,16,5,16,607,8,16,10,
16,12,16,610,9,16,1,17,5,17,613,8,17,10,17,12,17,616,9,17,1,17,1,17,3,17,
620,8,17,1,18,1,18,1,19,1,19,1,19,1,19,1,19,5,19,629,8,19,10,19,12,19,632,
9,19,3,19,634,8,19,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,22,1,22,1,22,5,22,
646,8,22,10,22,12,22,649,9,22,1,23,1,23,3,23,653,8,23,1,24,5,24,656,8,24,
10,24,12,24,659,9,24,1,24,1,24,3,24,663,8,24,1,25,1,25,1,25,1,25,3,25,669,
8,25,1,26,1,26,1,26,1,26,1,26,1,26,5,26,677,8,26,10,26,12,26,680,9,26,1,
27,1,27,1,27,1,27,1,27,3,27,687,8,27,1,28,1,28,1,28,1,28,1,28,1,28,5,28,
695,8,28,10,28,12,28,698,9,28,1,29,1,29,1,29,1,29,1,29,3,29,705,8,29,1,30,
1,30,1,31,1,31,1,31,1,31,1,31,1,31,5,31,715,8,31,10,31,12,31,718,9,31,1,
32,3,32,721,8,32,1,32,5,32,724,8,32,10,32,12,32,727,9,32,1,32,5,32,730,8,
32,10,32,12,32,733,9,32,1,32,1,32,1,33,5,33,738,8,33,10,33,12,33,741,9,33,
1,33,1,33,1,33,1,33,5,33,747,8,33,10,33,12,33,750,9,33,1,33,1,33,1,34,1,
34,1,35,1,35,1,35,1,35,3,35,760,8,35,1,36,1,36,1,36,1,36,1,37,1,37,1,37,
1,37,1,37,1,37,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,39,1,39,1,39,1,39,1,
39,1,39,1,39,1,40,1,40,1,40,3,40,789,8,40,1,41,1,41,3,41,793,8,41,1,42,5,
42,796,8,42,10,42,12,42,799,9,42,1,42,1,42,1,42,3,42,804,8,42,1,42,3,42,
807,8,42,1,42,3,42,810,8,42,1,42,1,42,1,43,1,43,1,43,1,43,1,43,1,43,1,43,
1,43,3,43,822,8,43,1,44,1,44,1,44,1,44,1,45,1,45,1,45,5,45,831,8,45,10,45,
12,45,834,9,45,1,46,1,46,1,46,1,47,1,47,1,47,1,48,1,48,1,48,5,48,845,8,48,
10,48,12,48,848,9,48,1,49,1,49,5,49,852,8,49,10,49,12,49,855,9,49,1,49,1,
49,1,50,1,50,1,50,1,50,3,50,863,8,50,1,51,1,51,1,51,1,51,1,51,3,51,870,8,
51,1,52,5,52,873,8,52,10,52,12,52,876,9,52,1,52,1,52,1,52,1,52,1,53,1,53,
1,53,1,53,1,53,1,53,1,53,1,53,3,53,890,8,53,1,54,1,54,1,54,5,54,895,8,54,
10,54,12,54,898,9,54,1,55,1,55,1,55,3,55,903,8,55,1,56,1,56,3,56,907,8,56,
1,57,1,57,3,57,911,8,57,1,58,1,58,3,58,915,8,58,1,59,1,59,3,59,919,8,59,
1,60,1,60,1,60,3,60,924,8,60,1,61,1,61,3,61,928,8,61,1,61,1,61,5,61,932,
8,61,10,61,12,61,935,9,61,1,62,1,62,3,62,939,8,62,1,62,1,62,1,62,5,62,944,
8,62,10,62,12,62,947,9,62,1,62,1,62,3,62,951,8,62,3,62,953,8,62,1,63,1,63,
5,63,957,8,63,10,63,12,63,960,9,63,1,63,1,63,3,63,964,8,63,1,64,1,64,3,64,
968,8,64,1,65,1,65,1,66,1,66,1,67,1,67,1,68,1,68,1,69,1,69,1,69,1,69,1,69,
1,69,1,69,1,69,1,69,3,69,987,8,69,1,70,5,70,990,8,70,10,70,12,70,993,9,70,
1,70,1,70,1,70,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,3,71,1008,
8,71,1,72,1,72,1,72,3,72,1013,8,72,1,72,1,72,5,72,1017,8,72,10,72,12,72,
1020,9,72,1,72,1,72,1,72,3,72,1025,8,72,3,72,1027,8,72,1,73,1,73,3,73,1031,
8,73,1,74,1,74,1,74,3,74,1036,8,74,1,74,1,74,3,74,1040,8,74,1,75,1,75,1,
75,1,75,1,75,3,75,1047,8,75,1,76,1,76,1,76,5,76,1052,8,76,10,76,12,76,1055,
9,76,1,76,1,76,1,76,5,76,1060,8,76,10,76,12,76,1063,9,76,3,76,1065,8,76,
1,77,5,77,1068,8,77,10,77,12,77,1071,9,77,1,77,1,77,1,77,1,78,1,78,3,78,
1078,8,78,1,79,5,79,1081,8,79,10,79,12,79,1084,9,79,1,79,1,79,5,79,1088,
8,79,10,79,12,79,1091,9,79,1,79,1,79,1,79,1,79,3,79,1097,8,79,1,80,5,80,
1100,8,80,10,80,12,80,1103,9,80,1,80,1,80,1,80,3,80,1108,8,80,1,80,1,80,
1,81,1,81,1,81,1,82,1,82,1,82,5,82,1118,8,82,10,82,12,82,1121,9,82,1,83,
1,83,3,83,1125,8,83,1,84,1,84,3,84,1129,8,84,1,85,1,85,1,86,1,86,1,86,1,
87,5,87,1137,8,87,10,87,12,87,1140,9,87,1,87,1,87,3,87,1144,8,87,1,87,1,
87,1,88,1,88,1,88,1,88,3,88,1152,8,88,1,89,3,89,1155,8,89,1,89,1,89,1,89,
3,89,1160,8,89,1,89,1,89,1,90,1,90,1,91,1,91,3,91,1168,8,91,1,91,3,91,1171,
8,91,1,91,1,91,1,92,3,92,1176,8,92,1,92,1,92,1,92,3,92,1181,8,92,1,92,1,
92,1,92,3,92,1186,8,92,1,92,1,92,1,92,3,92,1191,8,92,1,92,1,92,1,92,1,92,
1,92,3,92,1198,8,92,1,92,1,92,1,92,3,92,1203,8,92,1,92,1,92,1,92,1,92,1,
92,1,92,3,92,1211,8,92,1,92,1,92,1,92,3,92,1216,8,92,1,92,1,92,1,92,3,92,
1221,8,92,1,93,5,93,1224,8,93,10,93,12,93,1227,9,93,1,93,1,93,1,93,3,93,
1232,8,93,1,93,1,93,1,94,1,94,3,94,1238,8,94,1,94,3,94,1241,8,94,1,94,3,
94,1244,8,94,1,94,1,94,1,95,1,95,1,95,5,95,1251,8,95,10,95,12,95,1254,9,
95,1,96,5,96,1257,8,96,10,96,12,96,1260,9,96,1,96,1,96,1,96,3,96,1265,8,
96,1,96,3,96,1268,8,96,1,96,3,96,1271,8,96,1,97,1,97,1,98,1,98,5,98,1277,
8,98,10,98,12,98,1280,9,98,1,99,1,99,3,99,1284,8,99,1,100,5,100,1287,8,100,
10,100,12,100,1290,9,100,1,100,1,100,1,100,3,100,1295,8,100,1,100,3,100,
1298,8,100,1,100,1,100,1,101,1,101,1,101,1,101,1,101,1,101,1,101,3,101,1309,
8,101,1,102,1,102,1,102,1,103,1,103,5,103,1316,8,103,10,103,12,103,1319,
9,103,1,103,1,103,1,104,1,104,1,104,1,104,1,104,3,104,1328,8,104,1,105,5,
105,1331,8,105,10,105,12,105,1334,9,105,1,105,1,105,1,105,1,105,1,106,1,
106,1,106,1,106,3,106,1344,8,106,1,107,5,107,1347,8,107,10,107,12,107,1350,
9,107,1,107,1,107,1,107,1,108,1,108,1,108,1,108,1,108,1,108,3,108,1361,8,
108,1,109,5,109,1364,8,109,10,109,12,109,1367,9,109,1,109,1,109,1,109,1,
109,1,109,1,110,1,110,5,110,1376,8,110,10,110,12,110,1379,9,110,1,110,1,
110,1,111,1,111,1,111,1,111,1,111,3,111,1388,8,111,1,112,5,112,1391,8,112,
10,112,12,112,1394,9,112,1,112,1,112,1,112,1,112,1,112,3,112,1401,8,112,
1,112,3,112,1404,8,112,1,112,1,112,1,113,1,113,1,113,3,113,1411,8,113,1,
114,1,114,1,114,1,115,1,115,1,115,3,115,1419,8,115,1,116,1,116,1,116,1,116,
3,116,1425,8,116,1,116,1,116,1,117,1,117,1,117,5,117,1432,8,117,10,117,12,
117,1435,9,117,1,118,1,118,1,118,1,118,1,119,1,119,1,119,3,119,1444,8,119,
1,120,1,120,3,120,1448,8,120,1,120,3,120,1451,8,120,1,120,1,120,1,121,1,
121,1,121,5,121,1458,8,121,10,121,12,121,1461,9,121,1,122,1,122,1,122,1,
123,1,123,1,123,1,123,1,123,1,123,1,124,1,124,3,124,1474,8,124,1,124,3,124,
1477,8,124,1,124,1,124,1,125,1,125,1,125,5,125,1484,8,125,10,125,12,125,
1487,9,125,1,126,1,126,3,126,1491,8,126,1,126,1,126,1,127,1,127,5,127,1497,
8,127,10,127,12,127,1500,9,127,1,128,1,128,1,128,3,128,1505,8,128,1,129,
1,129,1,129,1,130,5,130,1511,8,130,10,130,12,130,1514,9,130,1,130,1,130,
1,130,1,131,1,131,1,131,1,131,1,131,1,131,3,131,1525,8,131,1,132,1,132,1,
132,1,132,1,132,3,132,1532,8,132,1,133,1,133,1,133,1,133,1,133,1,133,1,133,
1,133,1,133,1,133,1,133,1,133,3,133,1546,8,133,1,134,1,134,1,135,1,135,1,
135,1,135,1,136,1,136,1,136,1,136,1,137,1,137,1,137,1,138,1,138,1,138,1,
138,1,138,1,138,1,138,3,138,1568,8,138,1,139,1,139,1,139,1,139,1,139,1,139,
1,140,1,140,1,140,1,140,1,140,1,140,1,140,1,140,1,141,1,141,1,141,1,141,
1,141,1,141,1,141,1,141,1,142,1,142,1,142,1,142,1,142,1,142,1,142,1,142,
1,142,1,142,3,142,1602,8,142,1,143,1,143,1,143,1,143,1,143,1,143,1,144,1,
144,5,144,1612,8,144,10,144,12,144,1615,9,144,1,144,5,144,1618,8,144,10,
144,12,144,1621,9,144,1,144,1,144,1,145,1,145,1,145,1,146,1,146,5,146,1630,
8,146,10,146,12,146,1633,9,146,1,147,1,147,1,147,1,147,1,147,1,147,1,147,
1,147,1,147,1,147,3,147,1645,8,147,1,148,1,148,1,149,1,149,1,149,1,149,1,
149,1,149,1,150,1,150,1,150,1,150,1,150,1,150,1,151,1,151,1,151,1,151,1,
151,1,151,1,151,1,151,1,152,1,152,3,152,1671,8,152,1,153,1,153,3,153,1675,
8,153,1,154,1,154,1,154,3,154,1680,8,154,1,154,1,154,3,154,1684,8,154,1,
154,1,154,3,154,1688,8,154,1,154,1,154,1,154,1,155,1,155,1,155,3,155,1696,
8,155,1,155,1,155,3,155,1700,8,155,1,155,1,155,3,155,1704,8,155,1,155,1,
155,1,155,1,156,1,156,3,156,1711,8,156,1,157,1,157,1,158,1,158,1,158,5,158,
1718,8,158,10,158,12,158,1721,9,158,1,159,1,159,1,159,5,159,1726,8,159,10,
159,12,159,1729,9,159,1,159,1,159,1,159,1,159,1,159,1,159,1,159,1,160,1,
160,1,160,5,160,1741,8,160,10,160,12,160,1744,9,160,1,160,1,160,1,160,1,
160,1,160,1,160,1,160,1,161,1,161,3,161,1755,8,161,1,161,1,161,1,162,1,162,
3,162,1761,8,162,1,162,1,162,1,163,1,163,3,163,1767,8,163,1,163,1,163,1,
164,1,164,1,164,1,164,1,165,1,165,1,165,1,165,1,165,1,165,1,166,1,166,1,
166,1,166,1,166,1,166,1,166,3,166,1788,8,166,1,166,1,166,1,166,3,166,1793,
8,166,1,167,1,167,5,167,1797,8,167,10,167,12,167,1800,9,167,1,168,1,168,
1,168,1,168,1,168,1,168,1,169,5,169,1809,8,169,10,169,12,169,1812,9,169,
1,169,1,169,1,169,1,170,1,170,1,170,5,170,1820,8,170,10,170,12,170,1823,
9,170,1,171,1,171,1,171,1,172,1,172,1,172,1,172,3,172,1832,8,172,1,172,3,
172,1835,8,172,1,173,1,173,1,173,3,173,1840,8,173,1,173,1,173,1,174,1,174,
1,174,5,174,1847,8,174,10,174,12,174,1850,9,174,1,175,5,175,1853,8,175,10,
175,12,175,1856,9,175,1,175,1,175,1,175,1,175,1,175,1,176,1,176,3,176,1865,
8,176,1,176,5,176,1868,8,176,10,176,12,176,1871,9,176,1,177,1,177,1,177,
1,177,5,177,1877,8,177,10,177,12,177,1880,9,177,1,177,1,177,1,177,1,177,
1,177,1,177,1,177,1,177,1,177,1,177,1,177,1,177,1,177,1,177,1,177,1,177,
1,177,1,177,1,177,1,177,3,177,1902,8,177,1,178,1,178,1,179,1,179,1,179,1,
179,5,179,1910,8,179,10,179,12,179,1913,9,179,1,179,1,179,1,179,1,179,1,
179,1,179,1,179,1,179,1,179,1,179,1,179,1,179,1,179,1,179,1,179,1,179,1,
179,1,179,1,179,3,179,1934,8,179,1,180,1,180,1,180,1,180,1,180,3,180,1941,
8,180,1,181,1,181,1,182,1,182,1,182,1,182,3,182,1949,8,182,1,183,1,183,1,
183,1,183,5,183,1955,8,183,10,183,12,183,1958,9,183,1,183,1,183,1,183,1,
183,1,183,1,183,5,183,1966,8,183,10,183,12,183,1969,9,183,1,183,1,183,1,
183,1,183,1,183,1,183,1,183,1,183,1,183,1,183,1,183,1,183,1,183,1,183,1,
183,1,183,1,183,1,183,1,183,1,183,3,183,1991,8,183,1,184,1,184,1,185,1,185,
1,185,1,185,5,185,1999,8,185,10,185,12,185,2002,9,185,1,185,1,185,1,185,
1,185,1,185,1,185,5,185,2010,8,185,10,185,12,185,2013,9,185,1,185,1,185,
1,185,1,185,1,185,1,185,1,185,1,185,1,185,1,185,1,185,1,185,1,185,1,185,
1,185,1,185,1,185,1,185,1,185,3,185,2034,8,185,1,186,1,186,3,186,2038,8,
186,1,186,5,186,2041,8,186,10,186,12,186,2044,9,186,1,186,1,186,1,186,5,
186,2049,8,186,10,186,12,186,2052,9,186,1,186,5,186,2055,8,186,10,186,12,
186,2058,9,186,1,186,3,186,2061,8,186,1,186,1,186,3,186,2065,8,186,1,186,
1,186,3,186,2069,8,186,1,186,1,186,1,186,1,186,3,186,2075,8,186,1,186,5,
186,2078,8,186,10,186,12,186,2081,9,186,1,186,1,186,3,186,2085,8,186,1,186,
1,186,3,186,2089,8,186,1,186,1,186,3,186,2093,8,186,1,186,1,186,1,186,1,
186,3,186,2099,8,186,1,186,5,186,2102,8,186,10,186,12,186,2105,9,186,1,186,
1,186,3,186,2109,8,186,1,186,1,186,3,186,2113,8,186,1,186,1,186,3,186,2117,
8,186,3,186,2119,8,186,1,187,1,187,1,187,3,187,2124,8,187,1,187,5,187,2127,
8,187,10,187,12,187,2130,9,187,1,187,1,187,3,187,2134,8,187,1,187,1,187,
3,187,2138,8,187,1,187,1,187,3,187,2142,8,187,1,188,1,188,3,188,2146,8,188,
1,188,5,188,2149,8,188,10,188,12,188,2152,9,188,1,188,1,188,1,188,5,188,
2157,8,188,10,188,12,188,2160,9,188,1,188,5,188,2163,8,188,10,188,12,188,
2166,9,188,1,188,3,188,2169,8,188,1,188,1,188,3,188,2173,8,188,1,188,1,188,
3,188,2177,8,188,1,188,1,188,1,188,1,188,3,188,2183,8,188,1,188,5,188,2186,
8,188,10,188,12,188,2189,9,188,1,188,1,188,3,188,2193,8,188,1,188,1,188,
3,188,2197,8,188,1,188,1,188,3,188,2201,8,188,3,188,2203,8,188,1,189,1,189,
1,189,3,189,2208,8,189,1,190,1,190,1,190,1,190,1,190,1,190,1,190,1,190,1,
190,1,190,1,190,1,190,1,190,3,190,2223,8,190,1,191,1,191,1,191,1,192,1,192,
1,192,1,192,1,192,1,192,1,192,1,192,1,192,3,192,2237,8,192,1,193,1,193,1,
193,1,193,1,193,1,193,1,193,1,193,1,193,1,193,3,193,2249,8,193,1,193,1,193,
1,193,1,193,1,193,5,193,2256,8,193,10,193,12,193,2259,9,193,1,194,1,194,
1,194,1,194,1,194,1,194,1,194,1,194,1,194,1,194,5,194,2271,8,194,10,194,
12,194,2274,9,194,1,195,1,195,1,195,1,195,1,195,1,195,1,195,1,195,1,195,
1,195,3,195,2286,8,195,1,195,1,195,1,195,1,195,1,195,5,195,2293,8,195,10,
195,12,195,2296,9,195,1,196,1,196,1,196,3,196,2301,8,196,1,196,1,196,1,196,
1,196,1,196,3,196,2308,8,196,1,196,1,196,1,196,3,196,2313,8,196,1,196,1,
196,1,196,1,196,1,196,3,196,2320,8,196,1,196,1,196,1,196,3,196,2325,8,196,
1,196,1,196,1,196,1,196,1,196,3,196,2332,8,196,1,196,1,196,1,196,3,196,2337,
8,196,1,196,1,196,1,196,1,196,1,196,3,196,2344,8,196,1,196,1,196,1,196,3,
196,2349,8,196,1,196,1,196,1,196,1,196,1,196,1,196,3,196,2357,8,196,1,196,
1,196,1,196,3,196,2362,8,196,1,196,1,196,3,196,2366,8,196,1,197,1,197,3,
197,2370,8,197,1,197,1,197,1,197,3,197,2375,8,197,1,197,1,197,1,198,1,198,
1,198,3,198,2382,8,198,1,198,1,198,1,198,1,198,1,198,3,198,2389,8,198,1,
198,1,198,1,198,3,198,2394,8,198,1,198,1,198,1,198,1,198,1,198,3,198,2401,
8,198,1,198,1,198,1,198,3,198,2406,8,198,1,198,1,198,1,198,1,198,1,198,3,
198,2413,8,198,1,198,1,198,1,198,3,198,2418,8,198,1,198,1,198,1,198,1,198,
1,198,1,198,3,198,2426,8,198,1,198,1,198,1,198,3,198,2431,8,198,1,198,1,
198,3,198,2435,8,198,1,199,1,199,1,199,5,199,2440,8,199,10,199,12,199,2443,
9,199,1,200,1,200,1,200,3,200,2448,8,200,1,200,1,200,1,200,1,200,1,200,3,
200,2455,8,200,1,200,1,200,1,200,1,200,1,200,3,200,2462,8,200,1,200,1,200,
1,200,1,200,1,200,3,200,2469,8,200,1,200,1,200,1,200,1,200,1,200,1,200,3,
200,2477,8,200,1,200,1,200,1,200,1,200,1,200,3,200,2484,8,200,1,200,1,200,
1,200,1,200,1,200,1,200,3,200,2492,8,200,1,201,1,201,3,201,2496,8,201,1,
201,1,201,1,202,1,202,1,202,3,202,2503,8,202,1,202,1,202,1,202,1,202,1,202,
3,202,2510,8,202,1,202,1,202,1,202,1,202,1,202,3,202,2517,8,202,1,202,1,
202,1,202,1,202,1,202,1,202,3,202,2525,8,202,1,202,1,202,1,202,1,202,1,202,
3,202,2532,8,202,1,202,1,202,1,202,1,202,1,202,1,202,3,202,2540,8,202,1,
203,1,203,1,203,1,203,3,203,2546,8,203,1,203,1,203,1,203,1,203,3,203,2552,
8,203,1,203,1,203,1,203,1,203,1,203,1,203,1,203,1,203,1,203,1,203,3,203,
2564,8,203,1,204,1,204,5,204,2568,8,204,10,204,12,204,2571,9,204,1,205,5,
205,2574,8,205,10,205,12,205,2577,9,205,1,205,1,205,1,205,1,205,1,206,1,
206,1,207,1,207,3,207,2587,8,207,1,208,1,208,1,208,1,208,1,209,1,209,1,209,
3,209,2596,8,209,1,209,1,209,1,209,1,209,1,209,3,209,2603,8,209,1,210,1,
210,1,210,5,210,2608,8,210,10,210,12,210,2611,9,210,1,211,1,211,3,211,2615,
8,211,1,212,1,212,3,212,2619,8,212,1,213,1,213,1,213,1,213,1,214,1,214,1,
214,3,214,2628,8,214,1,215,1,215,1,216,1,216,1,216,1,216,1,216,1,216,1,216,
3,216,2639,8,216,1,217,1,217,1,217,1,217,1,217,1,217,5,217,2647,8,217,10,
217,12,217,2650,9,217,1,218,1,218,1,218,1,218,1,218,1,218,5,218,2658,8,218,
10,218,12,218,2661,9,218,1,219,1,219,1,219,1,219,1,219,1,219,5,219,2669,
8,219,10,219,12,219,2672,9,219,1,220,1,220,1,220,1,220,1,220,1,220,5,220,
2680,8,220,10,220,12,220,2683,9,220,1,221,1,221,1,221,1,221,1,221,1,221,
5,221,2691,8,221,10,221,12,221,2694,9,221,1,222,1,222,1,222,1,222,1,222,
1,222,1,222,1,222,1,222,5,222,2705,8,222,10,222,12,222,2708,9,222,1,223,
1,223,1,223,1,223,1,223,1,223,1,223,1,223,1,223,1,223,1,223,1,223,1,223,
1,223,1,223,1,223,1,223,1,223,5,223,2728,8,223,10,223,12,223,2731,9,223,
1,224,1,224,1,224,1,224,1,224,1,224,1,224,1,224,1,224,1,224,1,224,1,224,
1,224,1,224,1,224,1,224,5,224,2749,8,224,10,224,12,224,2752,9,224,1,225,
1,225,1,225,1,225,1,225,1,225,1,225,1,225,1,225,5,225,2763,8,225,10,225,
12,225,2766,9,225,1,226,1,226,1,226,1,226,1,226,1,226,1,226,1,226,1,226,
1,226,1,226,1,226,5,226,2780,8,226,10,226,12,226,2783,9,226,1,227,1,227,
1,227,1,227,1,227,1,227,1,227,3,227,2792,8,227,1,228,1,228,1,228,1,229,1,
229,1,229,1,230,1,230,1,230,1,230,1,230,1,230,3,230,2806,8,230,1,231,1,231,
3,231,2810,8,231,1,231,1,231,5,231,2814,8,231,10,231,12,231,2817,9,231,1,
232,1,232,1,232,1,233,1,233,1,234,1,234,1,234,1,235,1,235,1,236,1,236,1,
236,1,236,1,236,1,236,1,236,1,236,5,236,2837,8,236,10,236,12,236,2840,9,
236,1,236,1,236,1,236,1,236,1,236,1,236,5,236,2848,8,236,10,236,12,236,2851,
9,236,1,236,1,236,1,236,3,236,2856,8,236,1,236,0,13,52,56,62,434,436,438,
440,442,444,446,448,450,452,237,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,
30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,
78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,
120,122,124,126,128,130,132,134,136,138,140,142,144,146,148,150,152,154,
156,158,160,162,164,166,168,170,172,174,176,178,180,182,184,186,188,190,
192,194,196,198,200,202,204,206,208,210,212,214,216,218,220,222,224,226,
228,230,232,234,236,238,240,242,244,246,248,250,252,254,256,258,260,262,
264,266,268,270,272,274,276,278,280,282,284,286,288,290,292,294,296,298,
300,302,304,306,308,310,312,314,316,318,320,322,324,326,328,330,332,334,
336,338,340,342,344,346,348,350,352,354,356,358,360,362,364,366,368,370,
372,374,376,378,380,382,384,386,388,390,392,394,396,398,400,402,404,406,
408,410,412,414,416,418,420,422,424,426,428,430,432,434,436,438,440,442,
444,446,448,450,452,454,456,458,460,462,464,466,468,470,472,0,4,1,0,51,56,
5,0,5,5,8,8,27,27,29,29,37,37,2,0,14,14,20,20,2,0,66,66,91,101,3099,0,474,
1,0,0,0,2,478,1,0,0,0,4,494,1,0,0,0,6,498,1,0,0,0,8,500,1,0,0,0,10,502,1,
0,0,0,12,507,1,0,0,0,14,511,1,0,0,0,16,542,1,0,0,0,18,544,1,0,0,0,20,558,
1,0,0,0,22,565,1,0,0,0,24,567,1,0,0,0,26,569,1,0,0,0,28,574,1,0,0,0,30,588,
1,0,0,0,32,593,1,0,0,0,34,614,1,0,0,0,36,621,1,0,0,0,38,633,1,0,0,0,40,635,
1,0,0,0,42,638,1,0,0,0,44,642,1,0,0,0,46,652,1,0,0,0,48,657,1,0,0,0,50,668,
1,0,0,0,52,670,1,0,0,0,54,686,1,0,0,0,56,688,1,0,0,0,58,704,1,0,0,0,60,706,
1,0,0,0,62,708,1,0,0,0,64,720,1,0,0,0,66,739,1,0,0,0,68,753,1,0,0,0,70,759,
1,0,0,0,72,761,1,0,0,0,74,765,1,0,0,0,76,771,1,0,0,0,78,778,1,0,0,0,80,788,
1,0,0,0,82,792,1,0,0,0,84,797,1,0,0,0,86,821,1,0,0,0,88,823,1,0,0,0,90,827,
1,0,0,0,92,835,1,0,0,0,94,838,1,0,0,0,96,841,1,0,0,0,98,849,1,0,0,0,100,
862,1,0,0,0,102,869,1,0,0,0,104,874,1,0,0,0,106,889,1,0,0,0,108,891,1,0,
0,0,110,899,1,0,0,0,112,904,1,0,0,0,114,910,1,0,0,0,116,914,1,0,0,0,118,
918,1,0,0,0,120,923,1,0,0,0,122,927,1,0,0,0,124,952,1,0,0,0,126,954,1,0,
0,0,128,965,1,0,0,0,130,969,1,0,0,0,132,971,1,0,0,0,134,973,1,0,0,0,136,
975,1,0,0,0,138,986,1,0,0,0,140,991,1,0,0,0,142,1007,1,0,0,0,144,1026,1,
0,0,0,146,1030,1,0,0,0,148,1032,1,0,0,0,150,1046,1,0,0,0,152,1064,1,0,0,
0,154,1069,1,0,0,0,156,1077,1,0,0,0,158,1096,1,0,0,0,160,1101,1,0,0,0,162,
1111,1,0,0,0,164,1114,1,0,0,0,166,1124,1,0,0,0,168,1128,1,0,0,0,170,1130,
1,0,0,0,172,1132,1,0,0,0,174,1138,1,0,0,0,176,1151,1,0,0,0,178,1154,1,0,
0,0,180,1163,1,0,0,0,182,1165,1,0,0,0,184,1220,1,0,0,0,186,1225,1,0,0,0,
188,1235,1,0,0,0,190,1247,1,0,0,0,192,1258,1,0,0,0,194,1272,1,0,0,0,196,
1274,1,0,0,0,198,1283,1,0,0,0,200,1288,1,0,0,0,202,1308,1,0,0,0,204,1310,
1,0,0,0,206,1313,1,0,0,0,208,1327,1,0,0,0,210,1332,1,0,0,0,212,1343,1,0,
0,0,214,1348,1,0,0,0,216,1360,1,0,0,0,218,1365,1,0,0,0,220,1373,1,0,0,0,
222,1387,1,0,0,0,224,1392,1,0,0,0,226,1410,1,0,0,0,228,1412,1,0,0,0,230,
1418,1,0,0,0,232,1420,1,0,0,0,234,1428,1,0,0,0,236,1436,1,0,0,0,238,1443,
1,0,0,0,240,1445,1,0,0,0,242,1454,1,0,0,0,244,1462,1,0,0,0,246,1465,1,0,
0,0,248,1471,1,0,0,0,250,1480,1,0,0,0,252,1488,1,0,0,0,254,1494,1,0,0,0,
256,1504,1,0,0,0,258,1506,1,0,0,0,260,1512,1,0,0,0,262,1524,1,0,0,0,264,
1531,1,0,0,0,266,1545,1,0,0,0,268,1547,1,0,0,0,270,1549,1,0,0,0,272,1553,
1,0,0,0,274,1557,1,0,0,0,276,1567,1,0,0,0,278,1569,1,0,0,0,280,1575,1,0,
0,0,282,1583,1,0,0,0,284,1601,1,0,0,0,286,1603,1,0,0,0,288,1609,1,0,0,0,
290,1624,1,0,0,0,292,1627,1,0,0,0,294,1644,1,0,0,0,296,1646,1,0,0,0,298,
1648,1,0,0,0,300,1654,1,0,0,0,302,1660,1,0,0,0,304,1670,1,0,0,0,306,1674,
1,0,0,0,308,1676,1,0,0,0,310,1692,1,0,0,0,312,1710,1,0,0,0,314,1712,1,0,
0,0,316,1714,1,0,0,0,318,1722,1,0,0,0,320,1737,1,0,0,0,322,1752,1,0,0,0,
324,1758,1,0,0,0,326,1764,1,0,0,0,328,1770,1,0,0,0,330,1774,1,0,0,0,332,
1792,1,0,0,0,334,1794,1,0,0,0,336,1801,1,0,0,0,338,1810,1,0,0,0,340,1816,
1,0,0,0,342,1824,1,0,0,0,344,1827,1,0,0,0,346,1836,1,0,0,0,348,1843,1,0,
0,0,350,1854,1,0,0,0,352,1864,1,0,0,0,354,1901,1,0,0,0,356,1903,1,0,0,0,
358,1933,1,0,0,0,360,1940,1,0,0,0,362,1942,1,0,0,0,364,1948,1,0,0,0,366,
1990,1,0,0,0,368,1992,1,0,0,0,370,2033,1,0,0,0,372,2118,1,0,0,0,374,2120,
1,0,0,0,376,2202,1,0,0,0,378,2207,1,0,0,0,380,2222,1,0,0,0,382,2224,1,0,
0,0,384,2236,1,0,0,0,386,2248,1,0,0,0,388,2260,1,0,0,0,390,2285,1,0,0,0,
392,2365,1,0,0,0,394,2367,1,0,0,0,396,2434,1,0,0,0,398,2436,1,0,0,0,400,
2491,1,0,0,0,402,2493,1,0,0,0,404,2539,1,0,0,0,406,2563,1,0,0,0,408,2565,
1,0,0,0,410,2575,1,0,0,0,412,2582,1,0,0,0,414,2586,1,0,0,0,416,2588,1,0,
0,0,418,2602,1,0,0,0,420,2604,1,0,0,0,422,2614,1,0,0,0,424,2618,1,0,0,0,
426,2620,1,0,0,0,428,2627,1,0,0,0,430,2629,1,0,0,0,432,2638,1,0,0,0,434,
2640,1,0,0,0,436,2651,1,0,0,0,438,2662,1,0,0,0,440,2673,1,0,0,0,442,2684,
1,0,0,0,444,2695,1,0,0,0,446,2709,1,0,0,0,448,2732,1,0,0,0,450,2753,1,0,
0,0,452,2767,1,0,0,0,454,2791,1,0,0,0,456,2793,1,0,0,0,458,2796,1,0,0,0,
460,2805,1,0,0,0,462,2809,1,0,0,0,464,2818,1,0,0,0,466,2821,1,0,0,0,468,
2823,1,0,0,0,470,2826,1,0,0,0,472,2855,1,0,0,0,474,475,7,0,0,0,475,1,1,0,
0,0,476,479,3,4,2,0,477,479,3,12,6,0,478,476,1,0,0,0,478,477,1,0,0,0,479,
3,1,0,0,0,480,482,3,230,115,0,481,480,1,0,0,0,482,485,1,0,0,0,483,481,1,
0,0,0,483,484,1,0,0,0,484,486,1,0,0,0,485,483,1,0,0,0,486,495,3,6,3,0,487,
489,3,230,115,0,488,487,1,0,0,0,489,492,1,0,0,0,490,488,1,0,0,0,490,491,
1,0,0,0,491,493,1,0,0,0,492,490,1,0,0,0,493,495,5,3,0,0,494,483,1,0,0,0,
494,490,1,0,0,0,495,5,1,0,0,0,496,499,3,8,4,0,497,499,3,10,5,0,498,496,1,
0,0,0,498,497,1,0,0,0,499,7,1,0,0,0,500,501,7,1,0,0,501,9,1,0,0,0,502,503,
7,2,0,0,503,11,1,0,0,0,504,508,3,14,7,0,505,508,3,28,14,0,506,508,3,30,15,
0,507,504,1,0,0,0,507,505,1,0,0,0,507,506,1,0,0,0,508,13,1,0,0,0,509,512,
3,20,10,0,510,512,3,26,13,0,511,509,1,0,0,0,511,510,1,0,0,0,512,517,1,0,
0,0,513,516,3,18,9,0,514,516,3,24,12,0,515,513,1,0,0,0,515,514,1,0,0,0,516,
519,1,0,0,0,517,515,1,0,0,0,517,518,1,0,0,0,518,15,1,0,0,0,519,517,1,0,0,
0,520,522,3,230,115,0,521,520,1,0,0,0,522,525,1,0,0,0,523,521,1,0,0,0,523,
524,1,0,0,0,524,526,1,0,0,0,525,523,1,0,0,0,526,528,5,102,0,0,527,529,3,
42,21,0,528,527,1,0,0,0,528,529,1,0,0,0,529,543,1,0,0,0,530,531,3,14,7,0,
531,535,5,65,0,0,532,534,3,230,115,0,533,532,1,0,0,0,534,537,1,0,0,0,535,
533,1,0,0,0,535,536,1,0,0,0,536,538,1,0,0,0,537,535,1,0,0,0,538,540,5,102,
0,0,539,541,3,42,21,0,540,539,1,0,0,0,540,541,1,0,0,0,541,543,1,0,0,0,542,
523,1,0,0,0,542,530,1,0,0,0,543,17,1,0,0,0,544,548,5,65,0,0,545,547,3,230,
115,0,546,545,1,0,0,0,547,550,1,0,0,0,548,546,1,0,0,0,548,549,1,0,0,0,549,
551,1,0,0,0,550,548,1,0,0,0,551,553,5,102,0,0,552,554,3,42,21,0,553,552,
1,0,0,0,553,554,1,0,0,0,554,19,1,0,0,0,555,557,3,230,115,0,556,555,1,0,0,
0,557,560,1,0,0,0,558,556,1,0,0,0,558,559,1,0,0,0,559,561,1,0,0,0,560,558,
1,0,0,0,561,563,5,102,0,0,562,564,3,42,21,0,563,562,1,0,0,0,563,564,1,0,
0,0,564,21,1,0,0,0,565,566,3,16,8,0,566,23,1,0,0,0,567,568,3,18,9,0,568,
25,1,0,0,0,569,570,3,20,10,0,570,27,1,0,0,0,571,573,3,230,115,0,572,571,
1,0,0,0,573,576,1,0,0,0,574,572,1,0,0,0,574,575,1,0,0,0,575,577,1,0,0,0,
576,574,1,0,0,0,577,578,5,102,0,0,578,29,1,0,0,0,579,580,3,4,2,0,580,581,
3,32,16,0,581,589,1,0,0,0,582,583,3,14,7,0,583,584,3,32,16,0,584,589,1,0,
0,0,585,586,3,28,14,0,586,587,3,32,16,0,587,589,1,0,0,0,588,579,1,0,0,0,
588,582,1,0,0,0,588,585,1,0,0,0,589,31,1,0,0,0,590,592,3,230,115,0,591,590,
1,0,0,0,592,595,1,0,0,0,593,591,1,0,0,0,593,594,1,0,0,0,594,596,1,0,0,0,
595,593,1,0,0,0,596,597,5,61,0,0,597,608,5,62,0,0,598,600,3,230,115,0,599,
598,1,0,0,0,600,603,1,0,0,0,601,599,1,0,0,0,601,602,1,0,0,0,602,604,1,0,
0,0,603,601,1,0,0,0,604,605,5,61,0,0,605,607,5,62,0,0,606,601,1,0,0,0,607,
610,1,0,0,0,608,606,1,0,0,0,608,609,1,0,0,0,609,33,1,0,0,0,610,608,1,0,0,
0,611,613,3,36,18,0,612,611,1,0,0,0,613,616,1,0,0,0,614,612,1,0,0,0,614,
615,1,0,0,0,615,617,1,0,0,0,616,614,1,0,0,0,617,619,5,102,0,0,618,620,3,
38,19,0,619,618,1,0,0,0,619,620,1,0,0,0,620,35,1,0,0,0,621,622,3,230,115,
0,622,37,1,0,0,0,623,624,5,17,0,0,624,634,3,28,14,0,625,626,5,17,0,0,626,
630,3,14,7,0,627,629,3,40,20,0,628,627,1,0,0,0,629,632,1,0,0,0,630,628,1,
0,0,0,630,631,1,0,0,0,631,634,1,0,0,0,632,630,1,0,0,0,633,623,1,0,0,0,633,
625,1,0,0,0,634,39,1,0,0,0,635,636,5,85,0,0,636,637,3,22,11,0,637,41,1,0,
0,0,638,639,5,68,0,0,639,640,3,44,22,0,640,641,5,67,0,0,641,43,1,0,0,0,642,
647,3,46,23,0,643,644,5,64,0,0,644,646,3,46,23,0,645,643,1,0,0,0,646,649,
1,0,0,0,647,645,1,0,0,0,647,648,1,0,0,0,648,45,1,0,0,0,649,647,1,0,0,0,650,
653,3,12,6,0,651,653,3,48,24,0,652,650,1,0,0,0,652,651,1,0,0,0,653,47,1,
0,0,0,654,656,3,230,115,0,655,654,1,0,0,0,656,659,1,0,0,0,657,655,1,0,0,
0,657,658,1,0,0,0,658,660,1,0,0,0,659,657,1,0,0,0,660,662,5,71,0,0,661,663,
3,50,25,0,662,661,1,0,0,0,662,663,1,0,0,0,663,49,1,0,0,0,664,665,5,17,0,
0,665,669,3,12,6,0,666,667,5,40,0,0,667,669,3,12,6,0,668,664,1,0,0,0,668,
666,1,0,0,0,669,51,1,0,0,0,670,671,6,26,-1,0,671,672,5,102,0,0,672,678,1,
0,0,0,673,674,10,1,0,0,674,675,5,65,0,0,675,677,5,102,0,0,676,673,1,0,0,
0,677,680,1,0,0,0,678,676,1,0,0,0,678,679,1,0,0,0,679,53,1,0,0,0,680,678,
1,0,0,0,681,687,5,102,0,0,682,683,3,56,28,0,683,684,5,65,0,0,684,685,5,102,
0,0,685,687,1,0,0,0,686,681,1,0,0,0,686,682,1,0,0,0,687,55,1,0,0,0,688,689,
6,28,-1,0,689,690,5,102,0,0,690,696,1,0,0,0,691,692,10,1,0,0,692,693,5,65,
0,0,693,695,5,102,0,0,694,691,1,0,0,0,695,698,1,0,0,0,696,694,1,0,0,0,696,
697,1,0,0,0,697,57,1,0,0,0,698,696,1,0,0,0,699,705,5,102,0,0,700,701,3,62,
31,0,701,702,5,65,0,0,702,703,5,102,0,0,703,705,1,0,0,0,704,699,1,0,0,0,
704,700,1,0,0,0,705,59,1,0,0,0,706,707,5,102,0,0,707,61,1,0,0,0,708,709,
6,31,-1,0,709,710,5,102,0,0,710,716,1,0,0,0,711,712,10,1,0,0,712,713,5,65,
0,0,713,715,5,102,0,0,714,711,1,0,0,0,715,718,1,0,0,0,716,714,1,0,0,0,716,
717,1,0,0,0,717,63,1,0,0,0,718,716,1,0,0,0,719,721,3,66,33,0,720,719,1,0,
0,0,720,721,1,0,0,0,721,725,1,0,0,0,722,724,3,70,35,0,723,722,1,0,0,0,724,
727,1,0,0,0,725,723,1,0,0,0,725,726,1,0,0,0,726,731,1,0,0,0,727,725,1,0,
0,0,728,730,3,80,40,0,729,728,1,0,0,0,730,733,1,0,0,0,731,729,1,0,0,0,731,
732,1,0,0,0,732,734,1,0,0,0,733,731,1,0,0,0,734,735,5,0,0,1,735,65,1,0,0,
0,736,738,3,68,34,0,737,736,1,0,0,0,738,741,1,0,0,0,739,737,1,0,0,0,739,
740,1,0,0,0,740,742,1,0,0,0,741,739,1,0,0,0,742,743,5,32,0,0,743,748,5,102,
0,0,744,745,5,65,0,0,745,747,5,102,0,0,746,744,1,0,0,0,747,750,1,0,0,0,748,
746,1,0,0,0,748,749,1,0,0,0,749,751,1,0,0,0,750,748,1,0,0,0,751,752,5,63,
0,0,752,67,1,0,0,0,753,754,3,230,115,0,754,69,1,0,0,0,755,760,3,72,36,0,
756,760,3,74,37,0,757,760,3,76,38,0,758,760,3,78,39,0,759,755,1,0,0,0,759,
756,1,0,0,0,759,757,1,0,0,0,759,758,1,0,0,0,760,71,1,0,0,0,761,762,5,25,
0,0,762,763,3,54,27,0,763,764,5,63,0,0,764,73,1,0,0,0,765,766,5,25,0,0,766,
767,3,56,28,0,767,768,5,65,0,0,768,769,5,83,0,0,769,770,5,63,0,0,770,75,
1,0,0,0,771,772,5,25,0,0,772,773,5,38,0,0,773,774,3,54,27,0,774,775,5,65,
0,0,775,776,5,102,0,0,776,777,5,63,0,0,777,77,1,0,0,0,778,779,5,25,0,0,779,
780,5,38,0,0,780,781,3,54,27,0,781,782,5,65,0,0,782,783,5,83,0,0,783,784,
5,63,0,0,784,79,1,0,0,0,785,789,3,82,41,0,786,789,3,198,99,0,787,789,5,63,
0,0,788,785,1,0,0,0,788,786,1,0,0,0,788,787,1,0,0,0,789,81,1,0,0,0,790,793,
3,84,42,0,791,793,3,186,93,0,792,790,1,0,0,0,792,791,1,0,0,0,793,83,1,0,
0,0,794,796,3,86,43,0,795,794,1,0,0,0,796,799,1,0,0,0,797,795,1,0,0,0,797,
798,1,0,0,0,798,800,1,0,0,0,799,797,1,0,0,0,800,801,5,9,0,0,801,803,5,102,
0,0,802,804,3,88,44,0,803,802,1,0,0,0,803,804,1,0,0,0,804,806,1,0,0,0,805,
807,3,92,46,0,806,805,1,0,0,0,806,807,1,0,0,0,807,809,1,0,0,0,808,810,3,
94,47,0,809,808,1,0,0,0,809,810,1,0,0,0,810,811,1,0,0,0,811,812,3,98,49,
0,812,85,1,0,0,0,813,822,3,230,115,0,814,822,5,35,0,0,815,822,5,34,0,0,816,
822,5,33,0,0,817,822,5,1,0,0,818,822,5,38,0,0,819,822,5,18,0,0,820,822,5,
39,0,0,821,813,1,0,0,0,821,814,1,0,0,0,821,815,1,0,0,0,821,816,1,0,0,0,821,
817,1,0,0,0,821,818,1,0,0,0,821,819,1,0,0,0,821,820,1,0,0,0,822,87,1,0,0,
0,823,824,5,68,0,0,824,825,3,90,45,0,825,826,5,67,0,0,826,89,1,0,0,0,827,
832,3,34,17,0,828,829,5,64,0,0,829,831,3,34,17,0,830,828,1,0,0,0,831,834,
1,0,0,0,832,830,1,0,0,0,832,833,1,0,0,0,833,91,1,0,0,0,834,832,1,0,0,0,835,
836,5,17,0,0,836,837,3,16,8,0,837,93,1,0,0,0,838,839,5,24,0,0,839,840,3,
96,48,0,840,95,1,0,0,0,841,846,3,22,11,0,842,843,5,64,0,0,843,845,3,22,11,
0,844,842,1,0,0,0,845,848,1,0,0,0,846,844,1,0,0,0,846,847,1,0,0,0,847,97,
1,0,0,0,848,846,1,0,0,0,849,853,5,59,0,0,850,852,3,100,50,0,851,850,1,0,
0,0,852,855,1,0,0,0,853,851,1,0,0,0,853,854,1,0,0,0,854,856,1,0,0,0,855,
853,1,0,0,0,856,857,5,60,0,0,857,99,1,0,0,0,858,863,3,102,51,0,859,863,3,
170,85,0,860,863,3,172,86,0,861,863,3,174,87,0,862,858,1,0,0,0,862,859,1,
0,0,0,862,860,1,0,0,0,862,861,1,0,0,0,863,101,1,0,0,0,864,870,3,104,52,0,
865,870,3,140,70,0,866,870,3,82,41,0,867,870,3,198,99,0,868,870,5,63,0,0,
869,864,1,0,0,0,869,865,1,0,0,0,869,866,1,0,0,0,869,867,1,0,0,0,869,868,
1,0,0,0,870,103,1,0,0,0,871,873,3,106,53,0,872,871,1,0,0,0,873,876,1,0,0,
0,874,872,1,0,0,0,874,875,1,0,0,0,875,877,1,0,0,0,876,874,1,0,0,0,877,878,
3,116,58,0,878,879,3,108,54,0,879,880,5,63,0,0,880,105,1,0,0,0,881,890,3,
230,115,0,882,890,5,35,0,0,883,890,5,34,0,0,884,890,5,33,0,0,885,890,5,38,
0,0,886,890,5,18,0,0,887,890,5,46,0,0,888,890,5,49,0,0,889,881,1,0,0,0,889,
882,1,0,0,0,889,883,1,0,0,0,889,884,1,0,0,0,889,885,1,0,0,0,889,886,1,0,
0,0,889,887,1,0,0,0,889,888,1,0,0,0,890,107,1,0,0,0,891,896,3,110,55,0,892,
893,5,64,0,0,893,895,3,110,55,0,894,892,1,0,0,0,895,898,1,0,0,0,896,894,
1,0,0,0,896,897,1,0,0,0,897,109,1,0,0,0,898,896,1,0,0,0,899,902,3,112,56,
0,900,901,5,66,0,0,901,903,3,114,57,0,902,900,1,0,0,0,902,903,1,0,0,0,903,
111,1,0,0,0,904,906,5,102,0,0,905,907,3,32,16,0,906,905,1,0,0,0,906,907,
1,0,0,0,907,113,1,0,0,0,908,911,3,414,207,0,909,911,3,248,124,0,910,908,
1,0,0,0,910,909,1,0,0,0,911,115,1,0,0,0,912,915,3,118,59,0,913,915,3,120,
60,0,914,912,1,0,0,0,914,913,1,0,0,0,915,117,1,0,0,0,916,919,3,6,3,0,917,
919,5,3,0,0,918,916,1,0,0,0,918,917,1,0,0,0,919,119,1,0,0,0,920,924,3,122,
61,0,921,924,3,136,68,0,922,924,3,138,69,0,923,920,1,0,0,0,923,921,1,0,0,
0,923,922,1,0,0,0,924,121,1,0,0,0,925,928,3,128,64,0,926,928,3,134,67,0,
927,925,1,0,0,0,927,926,1,0,0,0,928,933,1,0,0,0,929,932,3,126,63,0,930,932,
3,132,66,0,931,929,1,0,0,0,931,930,1,0,0,0,932,935,1,0,0,0,933,931,1,0,0,
0,933,934,1,0,0,0,934,123,1,0,0,0,935,933,1,0,0,0,936,938,5,102,0,0,937,
939,3,42,21,0,938,937,1,0,0,0,938,939,1,0,0,0,939,953,1,0,0,0,940,941,3,
122,61,0,941,945,5,65,0,0,942,944,3,230,115,0,943,942,1,0,0,0,944,947,1,
0,0,0,945,943,1,0,0,0,945,946,1,0,0,0,946,948,1,0,0,0,947,945,1,0,0,0,948,
950,5,102,0,0,949,951,3,42,21,0,950,949,1,0,0,0,950,951,1,0,0,0,951,953,
1,0,0,0,952,936,1,0,0,0,952,940,1,0,0,0,953,125,1,0,0,0,954,958,5,65,0,0,
955,957,3,230,115,0,956,955,1,0,0,0,957,960,1,0,0,0,958,956,1,0,0,0,958,
959,1,0,0,0,959,961,1,0,0,0,960,958,1,0,0,0,961,963,5,102,0,0,962,964,3,
42,21,0,963,962,1,0,0,0,963,964,1,0,0,0,964,127,1,0,0,0,965,967,5,102,0,
0,966,968,3,42,21,0,967,966,1,0,0,0,967,968,1,0,0,0,968,129,1,0,0,0,969,
970,3,124,62,0,970,131,1,0,0,0,971,972,3,126,63,0,972,133,1,0,0,0,973,974,
3,128,64,0,974,135,1,0,0,0,975,976,5,102,0,0,976,137,1,0,0,0,977,978,3,118,
59,0,978,979,3,32,16,0,979,987,1,0,0,0,980,981,3,122,61,0,981,982,3,32,16,
0,982,987,1,0,0,0,983,984,3,136,68,0,984,985,3,32,16,0,985,987,1,0,0,0,986,
977,1,0,0,0,986,980,1,0,0,0,986,983,1,0,0,0,987,139,1,0,0,0,988,990,3,142,
71,0,989,988,1,0,0,0,990,993,1,0,0,0,991,989,1,0,0,0,991,992,1,0,0,0,992,
994,1,0,0,0,993,991,1,0,0,0,994,995,3,144,72,0,995,996,3,168,84,0,996,141,
1,0,0,0,997,1008,3,230,115,0,998,1008,5,35,0,0,999,1008,5,34,0,0,1000,1008,
5,33,0,0,1001,1008,5,1,0,0,1002,1008,5,38,0,0,1003,1008,5,18,0,0,1004,1008,
5,42,0,0,1005,1008,5,30,0,0,1006,1008,5,39,0,0,1007,997,1,0,0,0,1007,998,
1,0,0,0,1007,999,1,0,0,0,1007,1000,1,0,0,0,1007,1001,1,0,0,0,1007,1002,1,
0,0,0,1007,1003,1,0,0,0,1007,1004,1,0,0,0,1007,1005,1,0,0,0,1007,1006,1,
0,0,0,1008,143,1,0,0,0,1009,1010,3,146,73,0,1010,1012,3,148,74,0,1011,1013,
3,162,81,0,1012,1011,1,0,0,0,1012,1013,1,0,0,0,1013,1027,1,0,0,0,1014,1018,
3,88,44,0,1015,1017,3,230,115,0,1016,1015,1,0,0,0,1017,1020,1,0,0,0,1018,
1016,1,0,0,0,1018,1019,1,0,0,0,1019,1021,1,0,0,0,1020,1018,1,0,0,0,1021,
1022,3,146,73,0,1022,1024,3,148,74,0,1023,1025,3,162,81,0,1024,1023,1,0,
0,0,1024,1025,1,0,0,0,1025,1027,1,0,0,0,1026,1009,1,0,0,0,1026,1014,1,0,
0,0,1027,145,1,0,0,0,1028,1031,3,116,58,0,1029,1031,5,48,0,0,1030,1028,1,
0,0,0,1030,1029,1,0,0,0,1031,147,1,0,0,0,1032,1033,5,102,0,0,1033,1035,5,
57,0,0,1034,1036,3,150,75,0,1035,1034,1,0,0,0,1035,1036,1,0,0,0,1036,1037,
1,0,0,0,1037,1039,5,58,0,0,1038,1040,3,32,16,0,1039,1038,1,0,0,0,1039,1040,
1,0,0,0,1040,149,1,0,0,0,1041,1042,3,152,76,0,1042,1043,5,64,0,0,1043,1044,
3,158,79,0,1044,1047,1,0,0,0,1045,1047,3,158,79,0,1046,1041,1,0,0,0,1046,
1045,1,0,0,0,1047,151,1,0,0,0,1048,1053,3,154,77,0,1049,1050,5,64,0,0,1050,
1052,3,154,77,0,1051,1049,1,0,0,0,1052,1055,1,0,0,0,1053,1051,1,0,0,0,1053,
1054,1,0,0,0,1054,1065,1,0,0,0,1055,1053,1,0,0,0,1056,1061,3,160,80,0,1057,
1058,5,64,0,0,1058,1060,3,154,77,0,1059,1057,1,0,0,0,1060,1063,1,0,0,0,1061,
1059,1,0,0,0,1061,1062,1,0,0,0,1062,1065,1,0,0,0,1063,1061,1,0,0,0,1064,
1048,1,0,0,0,1064,1056,1,0,0,0,1065,153,1,0,0,0,1066,1068,3,156,78,0,1067,
1066,1,0,0,0,1068,1071,1,0,0,0,1069,1067,1,0,0,0,1069,1070,1,0,0,0,1070,
1072,1,0,0,0,1071,1069,1,0,0,0,1072,1073,3,116,58,0,1073,1074,3,112,56,0,
1074,155,1,0,0,0,1075,1078,3,230,115,0,1076,1078,5,18,0,0,1077,1075,1,0,
0,0,1077,1076,1,0,0,0,1078,157,1,0,0,0,1079,1081,3,156,78,0,1080,1079,1,
0,0,0,1081,1084,1,0,0,0,1082,1080,1,0,0,0,1082,1083,1,0,0,0,1083,1085,1,
0,0,0,1084,1082,1,0,0,0,1085,1089,3,116,58,0,1086,1088,3,230,115,0,1087,
1086,1,0,0,0,1088,1091,1,0,0,0,1089,1087,1,0,0,0,1089,1090,1,0,0,0,1090,
1092,1,0,0,0,1091,1089,1,0,0,0,1092,1093,5,104,0,0,1093,1094,3,112,56,0,
1094,1097,1,0,0,0,1095,1097,3,154,77,0,1096,1082,1,0,0,0,1096,1095,1,0,0,
0,1097,159,1,0,0,0,1098,1100,3,230,115,0,1099,1098,1,0,0,0,1100,1103,1,0,
0,0,1101,1099,1,0,0,0,1101,1102,1,0,0,0,1102,1104,1,0,0,0,1103,1101,1,0,
0,0,1104,1107,3,116,58,0,1105,1106,5,102,0,0,1106,1108,5,65,0,0,1107,1105,
1,0,0,0,1107,1108,1,0,0,0,1108,1109,1,0,0,0,1109,1110,5,43,0,0,1110,161,
1,0,0,0,1111,1112,5,45,0,0,1112,1113,3,164,82,0,1113,163,1,0,0,0,1114,1119,
3,166,83,0,1115,1116,5,64,0,0,1116,1118,3,166,83,0,1117,1115,1,0,0,0,1118,
1121,1,0,0,0,1119,1117,1,0,0,0,1119,1120,1,0,0,0,1120,165,1,0,0,0,1121,1119,
1,0,0,0,1122,1125,3,16,8,0,1123,1125,3,28,14,0,1124,1122,1,0,0,0,1124,1123,
1,0,0,0,1125,167,1,0,0,0,1126,1129,3,252,126,0,1127,1129,5,63,0,0,1128,1126,
1,0,0,0,1128,1127,1,0,0,0,1129,169,1,0,0,0,1130,1131,3,252,126,0,1131,171,
1,0,0,0,1132,1133,5,38,0,0,1133,1134,3,252,126,0,1134,173,1,0,0,0,1135,1137,
3,176,88,0,1136,1135,1,0,0,0,1137,1140,1,0,0,0,1138,1136,1,0,0,0,1138,1139,
1,0,0,0,1139,1141,1,0,0,0,1140,1138,1,0,0,0,1141,1143,3,178,89,0,1142,1144,
3,162,81,0,1143,1142,1,0,0,0,1143,1144,1,0,0,0,1144,1145,1,0,0,0,1145,1146,
3,182,91,0,1146,175,1,0,0,0,1147,1152,3,230,115,0,1148,1152,5,35,0,0,1149,
1152,5,34,0,0,1150,1152,5,33,0,0,1151,1147,1,0,0,0,1151,1148,1,0,0,0,1151,
1149,1,0,0,0,1151,1150,1,0,0,0,1152,177,1,0,0,0,1153,1155,3,88,44,0,1154,
1153,1,0,0,0,1154,1155,1,0,0,0,1155,1156,1,0,0,0,1156,1157,3,180,90,0,1157,
1159,5,57,0,0,1158,1160,3,150,75,0,1159,1158,1,0,0,0,1159,1160,1,0,0,0,1160,
1161,1,0,0,0,1161,1162,5,58,0,0,1162,179,1,0,0,0,1163,1164,5,102,0,0,1164,
181,1,0,0,0,1165,1167,5,59,0,0,1166,1168,3,184,92,0,1167,1166,1,0,0,0,1167,
1168,1,0,0,0,1168,1170,1,0,0,0,1169,1171,3,254,127,0,1170,1169,1,0,0,0,1170,
1171,1,0,0,0,1171,1172,1,0,0,0,1172,1173,5,60,0,0,1173,183,1,0,0,0,1174,
1176,3,42,21,0,1175,1174,1,0,0,0,1175,1176,1,0,0,0,1176,1177,1,0,0,0,1177,
1178,5,43,0,0,1178,1180,5,57,0,0,1179,1181,3,398,199,0,1180,1179,1,0,0,0,
1180,1181,1,0,0,0,1181,1182,1,0,0,0,1182,1183,5,58,0,0,1183,1221,5,63,0,
0,1184,1186,3,42,21,0,1185,1184,1,0,0,0,1185,1186,1,0,0,0,1186,1187,1,0,
0,0,1187,1188,5,40,0,0,1188,1190,5,57,0,0,1189,1191,3,398,199,0,1190,1189,
1,0,0,0,1190,1191,1,0,0,0,1191,1192,1,0,0,0,1192,1193,5,58,0,0,1193,1221,
5,63,0,0,1194,1195,3,58,29,0,1195,1197,5,65,0,0,1196,1198,3,42,21,0,1197,
1196,1,0,0,0,1197,1198,1,0,0,0,1198,1199,1,0,0,0,1199,1200,5,40,0,0,1200,
1202,5,57,0,0,1201,1203,3,398,199,0,1202,1201,1,0,0,0,1202,1203,1,0,0,0,
1203,1204,1,0,0,0,1204,1205,5,58,0,0,1205,1206,5,63,0,0,1206,1221,1,0,0,
0,1207,1208,3,352,176,0,1208,1210,5,65,0,0,1209,1211,3,42,21,0,1210,1209,
1,0,0,0,1210,1211,1,0,0,0,1211,1212,1,0,0,0,1212,1213,5,40,0,0,1213,1215,
5,57,0,0,1214,1216,3,398,199,0,1215,1214,1,0,0,0,1215,1216,1,0,0,0,1216,
1217,1,0,0,0,1217,1218,5,58,0,0,1218,1219,5,63,0,0,1219,1221,1,0,0,0,1220,
1175,1,0,0,0,1220,1185,1,0,0,0,1220,1194,1,0,0,0,1220,1207,1,0,0,0,1221,
185,1,0,0,0,1222,1224,3,86,43,0,1223,1222,1,0,0,0,1224,1227,1,0,0,0,1225,
1223,1,0,0,0,1225,1226,1,0,0,0,1226,1228,1,0,0,0,1227,1225,1,0,0,0,1228,
1229,5,16,0,0,1229,1231,5,102,0,0,1230,1232,3,94,47,0,1231,1230,1,0,0,0,
1231,1232,1,0,0,0,1232,1233,1,0,0,0,1233,1234,3,188,94,0,1234,187,1,0,0,
0,1235,1237,5,59,0,0,1236,1238,3,190,95,0,1237,1236,1,0,0,0,1237,1238,1,
0,0,0,1238,1240,1,0,0,0,1239,1241,5,64,0,0,1240,1239,1,0,0,0,1240,1241,1,
0,0,0,1241,1243,1,0,0,0,1242,1244,3,196,98,0,1243,1242,1,0,0,0,1243,1244,
1,0,0,0,1244,1245,1,0,0,0,1245,1246,5,60,0,0,1246,189,1,0,0,0,1247,1252,
3,192,96,0,1248,1249,5,64,0,0,1249,1251,3,192,96,0,1250,1248,1,0,0,0,1251,
1254,1,0,0,0,1252,1250,1,0,0,0,1252,1253,1,0,0,0,1253,191,1,0,0,0,1254,1252,
1,0,0,0,1255,1257,3,194,97,0,1256,1255,1,0,0,0,1257,1260,1,0,0,0,1258,1256,
1,0,0,0,1258,1259,1,0,0,0,1259,1261,1,0,0,0,1260,1258,1,0,0,0,1261,1267,
5,102,0,0,1262,1264,5,57,0,0,1263,1265,3,398,199,0,1264,1263,1,0,0,0,1264,
1265,1,0,0,0,1265,1266,1,0,0,0,1266,1268,5,58,0,0,1267,1262,1,0,0,0,1267,
1268,1,0,0,0,1268,1270,1,0,0,0,1269,1271,3,98,49,0,1270,1269,1,0,0,0,1270,
1271,1,0,0,0,1271,193,1,0,0,0,1272,1273,3,230,115,0,1273,195,1,0,0,0,1274,
1278,5,63,0,0,1275,1277,3,100,50,0,1276,1275,1,0,0,0,1277,1280,1,0,0,0,1278,
1276,1,0,0,0,1278,1279,1,0,0,0,1279,197,1,0,0,0,1280,1278,1,0,0,0,1281,1284,
3,200,100,0,1282,1284,3,218,109,0,1283,1281,1,0,0,0,1283,1282,1,0,0,0,1284,
199,1,0,0,0,1285,1287,3,202,101,0,1286,1285,1,0,0,0,1287,1290,1,0,0,0,1288,
1286,1,0,0,0,1288,1289,1,0,0,0,1289,1291,1,0,0,0,1290,1288,1,0,0,0,1291,
1292,5,28,0,0,1292,1294,5,102,0,0,1293,1295,3,88,44,0,1294,1293,1,0,0,0,
1294,1295,1,0,0,0,1295,1297,1,0,0,0,1296,1298,3,204,102,0,1297,1296,1,0,
0,0,1297,1298,1,0,0,0,1298,1299,1,0,0,0,1299,1300,3,206,103,0,1300,201,1,
0,0,0,1301,1309,3,230,115,0,1302,1309,5,35,0,0,1303,1309,5,34,0,0,1304,1309,
5,33,0,0,1305,1309,5,1,0,0,1306,1309,5,38,0,0,1307,1309,5,39,0,0,1308,1301,
1,0,0,0,1308,1302,1,0,0,0,1308,1303,1,0,0,0,1308,1304,1,0,0,0,1308,1305,
1,0,0,0,1308,1306,1,0,0,0,1308,1307,1,0,0,0,1309,203,1,0,0,0,1310,1311,5,
17,0,0,1311,1312,3,96,48,0,1312,205,1,0,0,0,1313,1317,5,59,0,0,1314,1316,
3,208,104,0,1315,1314,1,0,0,0,1316,1319,1,0,0,0,1317,1315,1,0,0,0,1317,1318,
1,0,0,0,1318,1320,1,0,0,0,1319,1317,1,0,0,0,1320,1321,5,60,0,0,1321,207,
1,0,0,0,1322,1328,3,210,105,0,1323,1328,3,214,107,0,1324,1328,3,82,41,0,
1325,1328,3,198,99,0,1326,1328,5,63,0,0,1327,1322,1,0,0,0,1327,1323,1,0,
0,0,1327,1324,1,0,0,0,1327,1325,1,0,0,0,1327,1326,1,0,0,0,1328,209,1,0,0,
0,1329,1331,3,212,106,0,1330,1329,1,0,0,0,1331,1334,1,0,0,0,1332,1330,1,
0,0,0,1332,1333,1,0,0,0,1333,1335,1,0,0,0,1334,1332,1,0,0,0,1335,1336,3,
116,58,0,1336,1337,3,108,54,0,1337,1338,5,63,0,0,1338,211,1,0,0,0,1339,1344,
3,230,115,0,1340,1344,5,35,0,0,1341,1344,5,38,0,0,1342,1344,5,18,0,0,1343,
1339,1,0,0,0,1343,1340,1,0,0,0,1343,1341,1,0,0,0,1343,1342,1,0,0,0,1344,
213,1,0,0,0,1345,1347,3,216,108,0,1346,1345,1,0,0,0,1347,1350,1,0,0,0,1348,
1346,1,0,0,0,1348,1349,1,0,0,0,1349,1351,1,0,0,0,1350,1348,1,0,0,0,1351,
1352,3,144,72,0,1352,1353,3,168,84,0,1353,215,1,0,0,0,1354,1361,3,230,115,
0,1355,1361,5,35,0,0,1356,1361,5,1,0,0,1357,1361,5,12,0,0,1358,1361,5,38,
0,0,1359,1361,5,39,0,0,1360,1354,1,0,0,0,1360,1355,1,0,0,0,1360,1356,1,0,
0,0,1360,1357,1,0,0,0,1360,1358,1,0,0,0,1360,1359,1,0,0,0,1361,217,1,0,0,
0,1362,1364,3,202,101,0,1363,1362,1,0,0,0,1364,1367,1,0,0,0,1365,1363,1,
0,0,0,1365,1366,1,0,0,0,1366,1368,1,0,0,0,1367,1365,1,0,0,0,1368,1369,5,
103,0,0,1369,1370,5,28,0,0,1370,1371,5,102,0,0,1371,1372,3,220,110,0,1372,
219,1,0,0,0,1373,1377,5,59,0,0,1374,1376,3,222,111,0,1375,1374,1,0,0,0,1376,
1379,1,0,0,0,1377,1375,1,0,0,0,1377,1378,1,0,0,0,1378,1380,1,0,0,0,1379,
1377,1,0,0,0,1380,1381,5,60,0,0,1381,221,1,0,0,0,1382,1388,3,224,112,0,1383,
1388,3,210,105,0,1384,1388,3,82,41,0,1385,1388,3,198,99,0,1386,1388,5,63,
0,0,1387,1382,1,0,0,0,1387,1383,1,0,0,0,1387,1384,1,0,0,0,1387,1385,1,0,
0,0,1387,1386,1,0,0,0,1388,223,1,0,0,0,1389,1391,3,226,113,0,1390,1389,1,
0,0,0,1391,1394,1,0,0,0,1392,1390,1,0,0,0,1392,1393,1,0,0,0,1393,1395,1,
0,0,0,1394,1392,1,0,0,0,1395,1396,3,116,58,0,1396,1397,5,102,0,0,1397,1398,
5,57,0,0,1398,1400,5,58,0,0,1399,1401,3,32,16,0,1400,1399,1,0,0,0,1400,1401,
1,0,0,0,1401,1403,1,0,0,0,1402,1404,3,228,114,0,1403,1402,1,0,0,0,1403,1404,
1,0,0,0,1404,1405,1,0,0,0,1405,1406,5,63,0,0,1406,225,1,0,0,0,1407,1411,
3,230,115,0,1408,1411,5,35,0,0,1409,1411,5,1,0,0,1410,1407,1,0,0,0,1410,
1408,1,0,0,0,1410,1409,1,0,0,0,1411,227,1,0,0,0,1412,1413,5,12,0,0,1413,
1414,3,238,119,0,1414,229,1,0,0,0,1415,1419,3,232,116,0,1416,1419,3,244,
122,0,1417,1419,3,246,123,0,1418,1415,1,0,0,0,1418,1416,1,0,0,0,1418,1417,
1,0,0,0,1419,231,1,0,0,0,1420,1421,5,103,0,0,1421,1422,3,54,27,0,1422,1424,
5,57,0,0,1423,1425,3,234,117,0,1424,1423,1,0,0,0,1424,1425,1,0,0,0,1425,
1426,1,0,0,0,1426,1427,5,58,0,0,1427,233,1,0,0,0,1428,1433,3,236,118,0,1429,
1430,5,64,0,0,1430,1432,3,236,118,0,1431,1429,1,0,0,0,1432,1435,1,0,0,0,
1433,1431,1,0,0,0,1433,1434,1,0,0,0,1434,235,1,0,0,0,1435,1433,1,0,0,0,1436,
1437,5,102,0,0,1437,1438,5,66,0,0,1438,1439,3,238,119,0,1439,237,1,0,0,0,
1440,1444,3,432,216,0,1441,1444,3,240,120,0,1442,1444,3,230,115,0,1443,1440,
1,0,0,0,1443,1441,1,0,0,0,1443,1442,1,0,0,0,1444,239,1,0,0,0,1445,1447,5,
59,0,0,1446,1448,3,242,121,0,1447,1446,1,0,0,0,1447,1448,1,0,0,0,1448,1450,
1,0,0,0,1449,1451,5,64,0,0,1450,1449,1,0,0,0,1450,1451,1,0,0,0,1451,1452,
1,0,0,0,1452,1453,5,60,0,0,1453,241,1,0,0,0,1454,1459,3,238,119,0,1455,1456,
5,64,0,0,1456,1458,3,238,119,0,1457,1455,1,0,0,0,1458,1461,1,0,0,0,1459,
1457,1,0,0,0,1459,1460,1,0,0,0,1460,243,1,0,0,0,1461,1459,1,0,0,0,1462,1463,
5,103,0,0,1463,1464,3,54,27,0,1464,245,1,0,0,0,1465,1466,5,103,0,0,1466,
1467,3,54,27,0,1467,1468,5,57,0,0,1468,1469,3,238,119,0,1469,1470,5,58,0,
0,1470,247,1,0,0,0,1471,1473,5,59,0,0,1472,1474,3,250,125,0,1473,1472,1,
0,0,0,1473,1474,1,0,0,0,1474,1476,1,0,0,0,1475,1477,5,64,0,0,1476,1475,1,
0,0,0,1476,1477,1,0,0,0,1477,1478,1,0,0,0,1478,1479,5,60,0,0,1479,249,1,
0,0,0,1480,1485,3,114,57,0,1481,1482,5,64,0,0,1482,1484,3,114,57,0,1483,
1481,1,0,0,0,1484,1487,1,0,0,0,1485,1483,1,0,0,0,1485,1486,1,0,0,0,1486,
251,1,0,0,0,1487,1485,1,0,0,0,1488,1490,5,59,0,0,1489,1491,3,254,127,0,1490,
1489,1,0,0,0,1490,1491,1,0,0,0,1491,1492,1,0,0,0,1492,1493,5,60,0,0,1493,
253,1,0,0,0,1494,1498,3,256,128,0,1495,1497,3,256,128,0,1496,1495,1,0,0,
0,1497,1500,1,0,0,0,1498,1496,1,0,0,0,1498,1499,1,0,0,0,1499,255,1,0,0,0,
1500,1498,1,0,0,0,1501,1505,3,258,129,0,1502,1505,3,82,41,0,1503,1505,3,
262,131,0,1504,1501,1,0,0,0,1504,1502,1,0,0,0,1504,1503,1,0,0,0,1505,257,
1,0,0,0,1506,1507,3,260,130,0,1507,1508,5,63,0,0,1508,259,1,0,0,0,1509,1511,
3,156,78,0,1510,1509,1,0,0,0,1511,1514,1,0,0,0,1512,1510,1,0,0,0,1512,1513,
1,0,0,0,1513,1515,1,0,0,0,1514,1512,1,0,0,0,1515,1516,3,116,58,0,1516,1517,
3,108,54,0,1517,261,1,0,0,0,1518,1525,3,266,133,0,1519,1525,3,270,135,0,
1520,1525,3,278,139,0,1521,1525,3,280,140,0,1522,1525,3,298,149,0,1523,1525,
3,304,152,0,1524,1518,1,0,0,0,1524,1519,1,0,0,0,1524,1520,1,0,0,0,1524,1521,
1,0,0,0,1524,1522,1,0,0,0,1524,1523,1,0,0,0,1525,263,1,0,0,0,1526,1532,3,
266,133,0,1527,1532,3,272,136,0,1528,1532,3,282,141,0,1529,1532,3,300,150,
0,1530,1532,3,306,153,0,1531,1526,1,0,0,0,1531,1527,1,0,0,0,1531,1528,1,
0,0,0,1531,1529,1,0,0,0,1531,1530,1,0,0,0,1532,265,1,0,0,0,1533,1546,3,252,
126,0,1534,1546,3,268,134,0,1535,1546,3,274,137,0,1536,1546,3,284,142,0,
1537,1546,3,286,143,0,1538,1546,3,302,151,0,1539,1546,3,322,161,0,1540,1546,
3,324,162,0,1541,1546,3,326,163,0,1542,1546,3,330,165,0,1543,1546,3,328,
164,0,1544,1546,3,332,166,0,1545,1533,1,0,0,0,1545,1534,1,0,0,0,1545,1535,
1,0,0,0,1545,1536,1,0,0,0,1545,1537,1,0,0,0,1545,1538,1,0,0,0,1545,1539,
1,0,0,0,1545,1540,1,0,0,0,1545,1541,1,0,0,0,1545,1542,1,0,0,0,1545,1543,
1,0,0,0,1545,1544,1,0,0,0,1546,267,1,0,0,0,1547,1548,5,63,0,0,1548,269,1,
0,0,0,1549,1550,5,102,0,0,1550,1551,5,72,0,0,1551,1552,3,262,131,0,1552,
271,1,0,0,0,1553,1554,5,102,0,0,1554,1555,5,72,0,0,1555,1556,3,264,132,0,
1556,273,1,0,0,0,1557,1558,3,276,138,0,1558,1559,5,63,0,0,1559,275,1,0,0,
0,1560,1568,3,426,213,0,1561,1568,3,456,228,0,1562,1568,3,458,229,0,1563,
1568,3,464,232,0,1564,1568,3,468,234,0,1565,1568,3,392,196,0,1566,1568,3,
372,186,0,1567,1560,1,0,0,0,1567,1561,1,0,0,0,1567,1562,1,0,0,0,1567,1563,
1,0,0,0,1567,1564,1,0,0,0,1567,1565,1,0,0,0,1567,1566,1,0,0,0,1568,277,1,
0,0,0,1569,1570,5,22,0,0,1570,1571,5,57,0,0,1571,1572,3,414,207,0,1572,1573,
5,58,0,0,1573,1574,3,262,131,0,1574,279,1,0,0,0,1575,1576,5,22,0,0,1576,
1577,5,57,0,0,1577,1578,3,414,207,0,1578,1579,5,58,0,0,1579,1580,3,264,132,
0,1580,1581,5,15,0,0,1581,1582,3,262,131,0,1582,281,1,0,0,0,1583,1584,5,
22,0,0,1584,1585,5,57,0,0,1585,1586,3,414,207,0,1586,1587,5,58,0,0,1587,
1588,3,264,132,0,1588,1589,5,15,0,0,1589,1590,3,264,132,0,1590,283,1,0,0,
0,1591,1592,5,2,0,0,1592,1593,3,414,207,0,1593,1594,5,63,0,0,1594,1602,1,
0,0,0,1595,1596,5,2,0,0,1596,1597,3,414,207,0,1597,1598,5,72,0,0,1598,1599,
3,414,207,0,1599,1600,5,63,0,0,1600,1602,1,0,0,0,1601,1591,1,0,0,0,1601,
1595,1,0,0,0,1602,285,1,0,0,0,1603,1604,5,41,0,0,1604,1605,5,57,0,0,1605,
1606,3,414,207,0,1606,1607,5,58,0,0,1607,1608,3,288,144,0,1608,287,1,0,0,
0,1609,1613,5,59,0,0,1610,1612,3,290,145,0,1611,1610,1,0,0,0,1612,1615,1,
0,0,0,1613,1611,1,0,0,0,1613,1614,1,0,0,0,1614,1619,1,0,0,0,1615,1613,1,
0,0,0,1616,1618,3,294,147,0,1617,1616,1,0,0,0,1618,1621,1,0,0,0,1619,1617,
1,0,0,0,1619,1620,1,0,0,0,1620,1622,1,0,0,0,1621,1619,1,0,0,0,1622,1623,
5,60,0,0,1623,289,1,0,0,0,1624,1625,3,292,146,0,1625,1626,3,254,127,0,1626,
291,1,0,0,0,1627,1631,3,294,147,0,1628,1630,3,294,147,0,1629,1628,1,0,0,
0,1630,1633,1,0,0,0,1631,1629,1,0,0,0,1631,1632,1,0,0,0,1632,293,1,0,0,0,
1633,1631,1,0,0,0,1634,1635,5,6,0,0,1635,1636,3,412,206,0,1636,1637,5,72,
0,0,1637,1645,1,0,0,0,1638,1639,5,6,0,0,1639,1640,3,296,148,0,1640,1641,
5,72,0,0,1641,1645,1,0,0,0,1642,1643,5,12,0,0,1643,1645,5,72,0,0,1644,1634,
1,0,0,0,1644,1638,1,0,0,0,1644,1642,1,0,0,0,1645,295,1,0,0,0,1646,1647,5,
102,0,0,1647,297,1,0,0,0,1648,1649,5,50,0,0,1649,1650,5,57,0,0,1650,1651,
3,414,207,0,1651,1652,5,58,0,0,1652,1653,3,262,131,0,1653,299,1,0,0,0,1654,
1655,5,50,0,0,1655,1656,5,57,0,0,1656,1657,3,414,207,0,1657,1658,5,58,0,
0,1658,1659,3,264,132,0,1659,301,1,0,0,0,1660,1661,5,13,0,0,1661,1662,3,
262,131,0,1662,1663,5,50,0,0,1663,1664,5,57,0,0,1664,1665,3,414,207,0,1665,
1666,5,58,0,0,1666,1667,5,63,0,0,1667,303,1,0,0,0,1668,1671,3,308,154,0,
1669,1671,3,318,159,0,1670,1668,1,0,0,0,1670,1669,1,0,0,0,1671,305,1,0,0,
0,1672,1675,3,310,155,0,1673,1675,3,320,160,0,1674,1672,1,0,0,0,1674,1673,
1,0,0,0,1675,307,1,0,0,0,1676,1677,5,21,0,0,1677,1679,5,57,0,0,1678,1680,
3,312,156,0,1679,1678,1,0,0,0,1679,1680,1,0,0,0,1680,1681,1,0,0,0,1681,1683,
5,63,0,0,1682,1684,3,414,207,0,1683,1682,1,0,0,0,1683,1684,1,0,0,0,1684,
1685,1,0,0,0,1685,1687,5,63,0,0,1686,1688,3,314,157,0,1687,1686,1,0,0,0,
1687,1688,1,0,0,0,1688,1689,1,0,0,0,1689,1690,5,58,0,0,1690,1691,3,262,131,
0,1691,309,1,0,0,0,1692,1693,5,21,0,0,1693,1695,5,57,0,0,1694,1696,3,312,
156,0,1695,1694,1,0,0,0,1695,1696,1,0,0,0,1696,1697,1,0,0,0,1697,1699,5,
63,0,0,1698,1700,3,414,207,0,1699,1698,1,0,0,0,1699,1700,1,0,0,0,1700,1701,
1,0,0,0,1701,1703,5,63,0,0,1702,1704,3,314,157,0,1703,1702,1,0,0,0,1703,
1704,1,0,0,0,1704,1705,1,0,0,0,1705,1706,5,58,0,0,1706,1707,3,264,132,0,
1707,311,1,0,0,0,1708,1711,3,316,158,0,1709,1711,3,260,130,0,1710,1708,1,
0,0,0,1710,1709,1,0,0,0,1711,313,1,0,0,0,1712,1713,3,316,158,0,1713,315,
1,0,0,0,1714,1719,3,276,138,0,1715,1716,5,64,0,0,1716,1718,3,276,138,0,1717,
1715,1,0,0,0,1718,1721,1,0,0,0,1719,1717,1,0,0,0,1719,1720,1,0,0,0,1720,
317,1,0,0,0,1721,1719,1,0,0,0,1722,1723,5,21,0,0,1723,1727,5,57,0,0,1724,
1726,3,156,78,0,1725,1724,1,0,0,0,1726,1729,1,0,0,0,1727,1725,1,0,0,0,1727,
1728,1,0,0,0,1728,1730,1,0,0,0,1729,1727,1,0,0,0,1730,1731,3,116,58,0,1731,
1732,3,112,56,0,1732,1733,5,72,0,0,1733,1734,3,414,207,0,1734,1735,5,58,
0,0,1735,1736,3,262,131,0,1736,319,1,0,0,0,1737,1738,5,21,0,0,1738,1742,
5,57,0,0,1739,1741,3,156,78,0,1740,1739,1,0,0,0,1741,1744,1,0,0,0,1742,1740,
1,0,0,0,1742,1743,1,0,0,0,1743,1745,1,0,0,0,1744,1742,1,0,0,0,1745,1746,
3,116,58,0,1746,1747,3,112,56,0,1747,1748,5,72,0,0,1748,1749,3,414,207,0,
1749,1750,5,58,0,0,1750,1751,3,264,132,0,1751,321,1,0,0,0,1752,1754,5,4,
0,0,1753,1755,5,102,0,0,1754,1753,1,0,0,0,1754,1755,1,0,0,0,1755,1756,1,
0,0,0,1756,1757,5,63,0,0,1757,323,1,0,0,0,1758,1760,5,11,0,0,1759,1761,5,
102,0,0,1760,1759,1,0,0,0,1760,1761,1,0,0,0,1761,1762,1,0,0,0,1762,1763,
5,63,0,0,1763,325,1,0,0,0,1764,1766,5,36,0,0,1765,1767,3,414,207,0,1766,
1765,1,0,0,0,1766,1767,1,0,0,0,1767,1768,1,0,0,0,1768,1769,5,63,0,0,1769,
327,1,0,0,0,1770,1771,5,44,0,0,1771,1772,3,414,207,0,1772,1773,5,63,0,0,
1773,329,1,0,0,0,1774,1775,5,42,0,0,1775,1776,5,57,0,0,1776,1777,3,414,207,
0,1777,1778,5,58,0,0,1778,1779,3,252,126,0,1779,331,1,0,0,0,1780,1781,5,
47,0,0,1781,1782,3,252,126,0,1782,1783,3,334,167,0,1783,1793,1,0,0,0,1784,
1785,5,47,0,0,1785,1787,3,252,126,0,1786,1788,3,334,167,0,1787,1786,1,0,
0,0,1787,1788,1,0,0,0,1788,1789,1,0,0,0,1789,1790,3,342,171,0,1790,1793,
1,0,0,0,1791,1793,3,344,172,0,1792,1780,1,0,0,0,1792,1784,1,0,0,0,1792,1791,
1,0,0,0,1793,333,1,0,0,0,1794,1798,3,336,168,0,1795,1797,3,336,168,0,1796,
1795,1,0,0,0,1797,1800,1,0,0,0,1798,1796,1,0,0,0,1798,1799,1,0,0,0,1799,
335,1,0,0,0,1800,1798,1,0,0,0,1801,1802,5,7,0,0,1802,1803,5,57,0,0,1803,
1804,3,338,169,0,1804,1805,5,58,0,0,1805,1806,3,252,126,0,1806,337,1,0,0,
0,1807,1809,3,156,78,0,1808,1807,1,0,0,0,1809,1812,1,0,0,0,1810,1808,1,0,
0,0,1810,1811,1,0,0,0,1811,1813,1,0,0,0,1812,1810,1,0,0,0,1813,1814,3,340,
170,0,1814,1815,3,112,56,0,1815,339,1,0,0,0,1816,1821,3,124,62,0,1817,1818,
5,86,0,0,1818,1820,3,16,8,0,1819,1817,1,0,0,0,1820,1823,1,0,0,0,1821,1819,
1,0,0,0,1821,1822,1,0,0,0,1822,341,1,0,0,0,1823,1821,1,0,0,0,1824,1825,5,
19,0,0,1825,1826,3,252,126,0,1826,343,1,0,0,0,1827,1828,5,47,0,0,1828,1829,
3,346,173,0,1829,1831,3,252,126,0,1830,1832,3,334,167,0,1831,1830,1,0,0,
0,1831,1832,1,0,0,0,1832,1834,1,0,0,0,1833,1835,3,342,171,0,1834,1833,1,
0,0,0,1834,1835,1,0,0,0,1835,345,1,0,0,0,1836,1837,5,57,0,0,1837,1839,3,
348,174,0,1838,1840,5,63,0,0,1839,1838,1,0,0,0,1839,1840,1,0,0,0,1840,1841,
1,0,0,0,1841,1842,5,58,0,0,1842,347,1,0,0,0,1843,1848,3,350,175,0,1844,1845,
5,63,0,0,1845,1847,3,350,175,0,1846,1844,1,0,0,0,1847,1850,1,0,0,0,1848,
1846,1,0,0,0,1848,1849,1,0,0,0,1849,349,1,0,0,0,1850,1848,1,0,0,0,1851,1853,
3,156,78,0,1852,1851,1,0,0,0,1853,1856,1,0,0,0,1854,1852,1,0,0,0,1854,1855,
1,0,0,0,1855,1857,1,0,0,0,1856,1854,1,0,0,0,1857,1858,3,116,58,0,1858,1859,
3,112,56,0,1859,1860,5,66,0,0,1860,1861,3,414,207,0,1861,351,1,0,0,0,1862,
1865,3,366,183,0,1863,1865,3,406,203,0,1864,1862,1,0,0,0,1864,1863,1,0,0,
0,1865,1869,1,0,0,0,1866,1868,3,360,180,0,1867,1866,1,0,0,0,1868,1871,1,
0,0,0,1869,1867,1,0,0,0,1869,1870,1,0,0,0,1870,353,1,0,0,0,1871,1869,1,0,
0,0,1872,1902,3,0,0,0,1873,1878,3,54,27,0,1874,1875,5,61,0,0,1875,1877,5,
62,0,0,1876,1874,1,0,0,0,1877,1880,1,0,0,0,1878,1876,1,0,0,0,1878,1879,1,
0,0,0,1879,1881,1,0,0,0,1880,1878,1,0,0,0,1881,1882,5,65,0,0,1882,1883,5,
9,0,0,1883,1902,1,0,0,0,1884,1885,5,48,0,0,1885,1886,5,65,0,0,1886,1902,
5,9,0,0,1887,1902,5,43,0,0,1888,1889,3,54,27,0,1889,1890,5,65,0,0,1890,1891,
5,43,0,0,1891,1902,1,0,0,0,1892,1893,5,57,0,0,1893,1894,3,414,207,0,1894,
1895,5,58,0,0,1895,1902,1,0,0,0,1896,1902,3,372,186,0,1897,1902,3,380,190,
0,1898,1902,3,386,193,0,1899,1902,3,392,196,0,1900,1902,3,400,200,0,1901,
1872,1,0,0,0,1901,1873,1,0,0,0,1901,1884,1,0,0,0,1901,1887,1,0,0,0,1901,
1888,1,0,0,0,1901,1892,1,0,0,0,1901,1896,1,0,0,0,1901,1897,1,0,0,0,1901,
1898,1,0,0,0,1901,1899,1,0,0,0,1901,1900,1,0,0,0,1902,355,1,0,0,0,1903,1904,
1,0,0,0,1904,357,1,0,0,0,1905,1934,3,0,0,0,1906,1911,3,54,27,0,1907,1908,
5,61,0,0,1908,1910,5,62,0,0,1909,1907,1,0,0,0,1910,1913,1,0,0,0,1911,1909,
1,0,0,0,1911,1912,1,0,0,0,1912,1914,1,0,0,0,1913,1911,1,0,0,0,1914,1915,
5,65,0,0,1915,1916,5,9,0,0,1916,1934,1,0,0,0,1917,1918,5,48,0,0,1918,1919,
5,65,0,0,1919,1934,5,9,0,0,1920,1934,5,43,0,0,1921,1922,3,54,27,0,1922,1923,
5,65,0,0,1923,1924,5,43,0,0,1924,1934,1,0,0,0,1925,1926,5,57,0,0,1926,1927,
3,414,207,0,1927,1928,5,58,0,0,1928,1934,1,0,0,0,1929,1934,3,372,186,0,1930,
1934,3,380,190,0,1931,1934,3,392,196,0,1932,1934,3,400,200,0,1933,1905,1,
0,0,0,1933,1906,1,0,0,0,1933,1917,1,0,0,0,1933,1920,1,0,0,0,1933,1921,1,
0,0,0,1933,1925,1,0,0,0,1933,1929,1,0,0,0,1933,1930,1,0,0,0,1933,1931,1,
0,0,0,1933,1932,1,0,0,0,1934,359,1,0,0,0,1935,1941,3,374,187,0,1936,1941,
3,382,191,0,1937,1941,3,388,194,0,1938,1941,3,394,197,0,1939,1941,3,402,
201,0,1940,1935,1,0,0,0,1940,1936,1,0,0,0,1940,1937,1,0,0,0,1940,1938,1,
0,0,0,1940,1939,1,0,0,0,1941,361,1,0,0,0,1942,1943,1,0,0,0,1943,363,1,0,
0,0,1944,1949,3,374,187,0,1945,1949,3,382,191,0,1946,1949,3,394,197,0,1947,
1949,3,402,201,0,1948,1944,1,0,0,0,1948,1945,1,0,0,0,1948,1946,1,0,0,0,1948,
1947,1,0,0,0,1949,365,1,0,0,0,1950,1991,3,0,0,0,1951,1956,3,54,27,0,1952,
1953,5,61,0,0,1953,1955,5,62,0,0,1954,1952,1,0,0,0,1955,1958,1,0,0,0,1956,
1954,1,0,0,0,1956,1957,1,0,0,0,1957,1959,1,0,0,0,1958,1956,1,0,0,0,1959,
1960,5,65,0,0,1960,1961,5,9,0,0,1961,1991,1,0,0,0,1962,1967,3,118,59,0,1963,
1964,5,61,0,0,1964,1966,5,62,0,0,1965,1963,1,0,0,0,1966,1969,1,0,0,0,1967,
1965,1,0,0,0,1967,1968,1,0,0,0,1968,1970,1,0,0,0,1969,1967,1,0,0,0,1970,
1971,5,65,0,0,1971,1972,5,9,0,0,1972,1991,1,0,0,0,1973,1974,5,48,0,0,1974,
1975,5,65,0,0,1975,1991,5,9,0,0,1976,1991,5,43,0,0,1977,1978,3,54,27,0,1978,
1979,5,65,0,0,1979,1980,5,43,0,0,1980,1991,1,0,0,0,1981,1982,5,57,0,0,1982,
1983,3,414,207,0,1983,1984,5,58,0,0,1984,1991,1,0,0,0,1985,1991,3,376,188,
0,1986,1991,3,384,192,0,1987,1991,3,390,195,0,1988,1991,3,396,198,0,1989,
1991,3,404,202,0,1990,1950,1,0,0,0,1990,1951,1,0,0,0,1990,1962,1,0,0,0,1990,
1973,1,0,0,0,1990,1976,1,0,0,0,1990,1977,1,0,0,0,1990,1981,1,0,0,0,1990,
1985,1,0,0,0,1990,1986,1,0,0,0,1990,1987,1,0,0,0,1990,1988,1,0,0,0,1990,
1989,1,0,0,0,1991,367,1,0,0,0,1992,1993,1,0,0,0,1993,369,1,0,0,0,1994,2034,
3,0,0,0,1995,2000,3,54,27,0,1996,1997,5,61,0,0,1997,1999,5,62,0,0,1998,1996,
1,0,0,0,1999,2002,1,0,0,0,2000,1998,1,0,0,0,2000,2001,1,0,0,0,2001,2003,
1,0,0,0,2002,2000,1,0,0,0,2003,2004,5,65,0,0,2004,2005,5,9,0,0,2005,2034,
1,0,0,0,2006,2011,3,118,59,0,2007,2008,5,61,0,0,2008,2010,5,62,0,0,2009,
2007,1,0,0,0,2010,2013,1,0,0,0,2011,2009,1,0,0,0,2011,2012,1,0,0,0,2012,
2014,1,0,0,0,2013,2011,1,0,0,0,2014,2015,5,65,0,0,2015,2016,5,9,0,0,2016,
2034,1,0,0,0,2017,2018,5,48,0,0,2018,2019,5,65,0,0,2019,2034,5,9,0,0,2020,
2034,5,43,0,0,2021,2022,3,54,27,0,2022,2023,5,65,0,0,2023,2024,5,43,0,0,
2024,2034,1,0,0,0,2025,2026,5,57,0,0,2026,2027,3,414,207,0,2027,2028,5,58,
0,0,2028,2034,1,0,0,0,2029,2034,3,376,188,0,2030,2034,3,384,192,0,2031,2034,
3,396,198,0,2032,2034,3,404,202,0,2033,1994,1,0,0,0,2033,1995,1,0,0,0,2033,
2006,1,0,0,0,2033,2017,1,0,0,0,2033,2020,1,0,0,0,2033,2021,1,0,0,0,2033,
2025,1,0,0,0,2033,2029,1,0,0,0,2033,2030,1,0,0,0,2033,2031,1,0,0,0,2033,
2032,1,0,0,0,2034,371,1,0,0,0,2035,2037,5,31,0,0,2036,2038,3,42,21,0,2037,
2036,1,0,0,0,2037,2038,1,0,0,0,2038,2042,1,0,0,0,2039,2041,3,230,115,0,2040,
2039,1,0,0,0,2041,2044,1,0,0,0,2042,2040,1,0,0,0,2042,2043,1,0,0,0,2043,
2045,1,0,0,0,2044,2042,1,0,0,0,2045,2056,5,102,0,0,2046,2050,5,65,0,0,2047,
2049,3,230,115,0,2048,2047,1,0,0,0,2049,2052,1,0,0,0,2050,2048,1,0,0,0,2050,
2051,1,0,0,0,2051,2053,1,0,0,0,2052,2050,1,0,0,0,2053,2055,5,102,0,0,2054,
2046,1,0,0,0,2055,2058,1,0,0,0,2056,2054,1,0,0,0,2056,2057,1,0,0,0,2057,
2060,1,0,0,0,2058,2056,1,0,0,0,2059,2061,3,378,189,0,2060,2059,1,0,0,0,2060,
2061,1,0,0,0,2061,2062,1,0,0,0,2062,2064,5,57,0,0,2063,2065,3,398,199,0,
2064,2063,1,0,0,0,2064,2065,1,0,0,0,2065,2066,1,0,0,0,2066,2068,5,58,0,0,
2067,2069,3,98,49,0,2068,2067,1,0,0,0,2068,2069,1,0,0,0,2069,2119,1,0,0,
0,2070,2071,3,58,29,0,2071,2072,5,65,0,0,2072,2074,5,31,0,0,2073,2075,3,
42,21,0,2074,2073,1,0,0,0,2074,2075,1,0,0,0,2075,2079,1,0,0,0,2076,2078,
3,230,115,0,2077,2076,1,0,0,0,2078,2081,1,0,0,0,2079,2077,1,0,0,0,2079,2080,
1,0,0,0,2080,2082,1,0,0,0,2081,2079,1,0,0,0,2082,2084,5,102,0,0,2083,2085,
3,378,189,0,2084,2083,1,0,0,0,2084,2085,1,0,0,0,2085,2086,1,0,0,0,2086,2088,
5,57,0,0,2087,2089,3,398,199,0,2088,2087,1,0,0,0,2088,2089,1,0,0,0,2089,
2090,1,0,0,0,2090,2092,5,58,0,0,2091,2093,3,98,49,0,2092,2091,1,0,0,0,2092,
2093,1,0,0,0,2093,2119,1,0,0,0,2094,2095,3,352,176,0,2095,2096,5,65,0,0,
2096,2098,5,31,0,0,2097,2099,3,42,21,0,2098,2097,1,0,0,0,2098,2099,1,0,0,
0,2099,2103,1,0,0,0,2100,2102,3,230,115,0,2101,2100,1,0,0,0,2102,2105,1,
0,0,0,2103,2101,1,0,0,0,2103,2104,1,0,0,0,2104,2106,1,0,0,0,2105,2103,1,
0,0,0,2106,2108,5,102,0,0,2107,2109,3,378,189,0,2108,2107,1,0,0,0,2108,2109,
1,0,0,0,2109,2110,1,0,0,0,2110,2112,5,57,0,0,2111,2113,3,398,199,0,2112,
2111,1,0,0,0,2112,2113,1,0,0,0,2113,2114,1,0,0,0,2114,2116,5,58,0,0,2115,
2117,3,98,49,0,2116,2115,1,0,0,0,2116,2117,1,0,0,0,2117,2119,1,0,0,0,2118,
2035,1,0,0,0,2118,2070,1,0,0,0,2118,2094,1,0,0,0,2119,373,1,0,0,0,2120,2121,
5,65,0,0,2121,2123,5,31,0,0,2122,2124,3,42,21,0,2123,2122,1,0,0,0,2123,2124,
1,0,0,0,2124,2128,1,0,0,0,2125,2127,3,230,115,0,2126,2125,1,0,0,0,2127,2130,
1,0,0,0,2128,2126,1,0,0,0,2128,2129,1,0,0,0,2129,2131,1,0,0,0,2130,2128,
1,0,0,0,2131,2133,5,102,0,0,2132,2134,3,378,189,0,2133,2132,1,0,0,0,2133,
2134,1,0,0,0,2134,2135,1,0,0,0,2135,2137,5,57,0,0,2136,2138,3,398,199,0,
2137,2136,1,0,0,0,2137,2138,1,0,0,0,2138,2139,1,0,0,0,2139,2141,5,58,0,0,
2140,2142,3,98,49,0,2141,2140,1,0,0,0,2141,2142,1,0,0,0,2142,375,1,0,0,0,
2143,2145,5,31,0,0,2144,2146,3,42,21,0,2145,2144,1,0,0,0,2145,2146,1,0,0,
0,2146,2150,1,0,0,0,2147,2149,3,230,115,0,2148,2147,1,0,0,0,2149,2152,1,
0,0,0,2150,2148,1,0,0,0,2150,2151,1,0,0,0,2151,2153,1,0,0,0,2152,2150,1,
0,0,0,2153,2164,5,102,0,0,2154,2158,5,65,0,0,2155,2157,3,230,115,0,2156,
2155,1,0,0,0,2157,2160,1,0,0,0,2158,2156,1,0,0,0,2158,2159,1,0,0,0,2159,
2161,1,0,0,0,2160,2158,1,0,0,0,2161,2163,5,102,0,0,2162,2154,1,0,0,0,2163,
2166,1,0,0,0,2164,2162,1,0,0,0,2164,2165,1,0,0,0,2165,2168,1,0,0,0,2166,
2164,1,0,0,0,2167,2169,3,378,189,0,2168,2167,1,0,0,0,2168,2169,1,0,0,0,2169,
2170,1,0,0,0,2170,2172,5,57,0,0,2171,2173,3,398,199,0,2172,2171,1,0,0,0,
2172,2173,1,0,0,0,2173,2174,1,0,0,0,2174,2176,5,58,0,0,2175,2177,3,98,49,
0,2176,2175,1,0,0,0,2176,2177,1,0,0,0,2177,2203,1,0,0,0,2178,2179,3,58,29,
0,2179,2180,5,65,0,0,2180,2182,5,31,0,0,2181,2183,3,42,21,0,2182,2181,1,
0,0,0,2182,2183,1,0,0,0,2183,2187,1,0,0,0,2184,2186,3,230,115,0,2185,2184,
1,0,0,0,2186,2189,1,0,0,0,2187,2185,1,0,0,0,2187,2188,1,0,0,0,2188,2190,
1,0,0,0,2189,2187,1,0,0,0,2190,2192,5,102,0,0,2191,2193,3,378,189,0,2192,
2191,1,0,0,0,2192,2193,1,0,0,0,2193,2194,1,0,0,0,2194,2196,5,57,0,0,2195,
2197,3,398,199,0,2196,2195,1,0,0,0,2196,2197,1,0,0,0,2197,2198,1,0,0,0,2198,
2200,5,58,0,0,2199,2201,3,98,49,0,2200,2199,1,0,0,0,2200,2201,1,0,0,0,2201,
2203,1,0,0,0,2202,2143,1,0,0,0,2202,2178,1,0,0,0,2203,377,1,0,0,0,2204,2208,
3,42,21,0,2205,2206,5,68,0,0,2206,2208,5,67,0,0,2207,2204,1,0,0,0,2207,2205,
1,0,0,0,2208,379,1,0,0,0,2209,2210,3,352,176,0,2210,2211,5,65,0,0,2211,2212,
5,102,0,0,2212,2223,1,0,0,0,2213,2214,5,40,0,0,2214,2215,5,65,0,0,2215,2223,
5,102,0,0,2216,2217,3,54,27,0,2217,2218,5,65,0,0,2218,2219,5,40,0,0,2219,
2220,5,65,0,0,2220,2221,5,102,0,0,2221,2223,1,0,0,0,2222,2209,1,0,0,0,2222,
2213,1,0,0,0,2222,2216,1,0,0,0,2223,381,1,0,0,0,2224,2225,5,65,0,0,2225,
2226,5,102,0,0,2226,383,1,0,0,0,2227,2228,5,40,0,0,2228,2229,5,65,0,0,2229,
2237,5,102,0,0,2230,2231,3,54,27,0,2231,2232,5,65,0,0,2232,2233,5,40,0,0,
2233,2234,5,65,0,0,2234,2235,5,102,0,0,2235,2237,1,0,0,0,2236,2227,1,0,0,
0,2236,2230,1,0,0,0,2237,385,1,0,0,0,2238,2239,3,58,29,0,2239,2240,5,61,
0,0,2240,2241,3,414,207,0,2241,2242,5,62,0,0,2242,2249,1,0,0,0,2243,2244,
3,358,179,0,2244,2245,5,61,0,0,2245,2246,3,414,207,0,2246,2247,5,62,0,0,
2247,2249,1,0,0,0,2248,2238,1,0,0,0,2248,2243,1,0,0,0,2249,2257,1,0,0,0,
2250,2251,3,356,178,0,2251,2252,5,61,0,0,2252,2253,3,414,207,0,2253,2254,
5,62,0,0,2254,2256,1,0,0,0,2255,2250,1,0,0,0,2256,2259,1,0,0,0,2257,2255,
1,0,0,0,2257,2258,1,0,0,0,2258,387,1,0,0,0,2259,2257,1,0,0,0,2260,2261,3,
364,182,0,2261,2262,5,61,0,0,2262,2263,3,414,207,0,2263,2264,5,62,0,0,2264,
2272,1,0,0,0,2265,2266,3,362,181,0,2266,2267,5,61,0,0,2267,2268,3,414,207,
0,2268,2269,5,62,0,0,2269,2271,1,0,0,0,2270,2265,1,0,0,0,2271,2274,1,0,0,
0,2272,2270,1,0,0,0,2272,2273,1,0,0,0,2273,389,1,0,0,0,2274,2272,1,0,0,0,
2275,2276,3,58,29,0,2276,2277,5,61,0,0,2277,2278,3,414,207,0,2278,2279,5,
62,0,0,2279,2286,1,0,0,0,2280,2281,3,370,185,0,2281,2282,5,61,0,0,2282,2283,
3,414,207,0,2283,2284,5,62,0,0,2284,2286,1,0,0,0,2285,2275,1,0,0,0,2285,
2280,1,0,0,0,2286,2294,1,0,0,0,2287,2288,3,368,184,0,2288,2289,5,61,0,0,
2289,2290,3,414,207,0,2290,2291,5,62,0,0,2291,2293,1,0,0,0,2292,2287,1,0,
0,0,2293,2296,1,0,0,0,2294,2292,1,0,0,0,2294,2295,1,0,0,0,2295,391,1,0,0,
0,2296,2294,1,0,0,0,2297,2298,3,60,30,0,2298,2300,5,57,0,0,2299,2301,3,398,
199,0,2300,2299,1,0,0,0,2300,2301,1,0,0,0,2301,2302,1,0,0,0,2302,2303,5,
58,0,0,2303,2366,1,0,0,0,2304,2305,3,54,27,0,2305,2307,5,65,0,0,2306,2308,
3,42,21,0,2307,2306,1,0,0,0,2307,2308,1,0,0,0,2308,2309,1,0,0,0,2309,2310,
5,102,0,0,2310,2312,5,57,0,0,2311,2313,3,398,199,0,2312,2311,1,0,0,0,2312,
2313,1,0,0,0,2313,2314,1,0,0,0,2314,2315,5,58,0,0,2315,2366,1,0,0,0,2316,
2317,3,58,29,0,2317,2319,5,65,0,0,2318,2320,3,42,21,0,2319,2318,1,0,0,0,
2319,2320,1,0,0,0,2320,2321,1,0,0,0,2321,2322,5,102,0,0,2322,2324,5,57,0,
0,2323,2325,3,398,199,0,2324,2323,1,0,0,0,2324,2325,1,0,0,0,2325,2326,1,
0,0,0,2326,2327,5,58,0,0,2327,2366,1,0,0,0,2328,2329,3,352,176,0,2329,2331,
5,65,0,0,2330,2332,3,42,21,0,2331,2330,1,0,0,0,2331,2332,1,0,0,0,2332,2333,
1,0,0,0,2333,2334,5,102,0,0,2334,2336,5,57,0,0,2335,2337,3,398,199,0,2336,
2335,1,0,0,0,2336,2337,1,0,0,0,2337,2338,1,0,0,0,2338,2339,5,58,0,0,2339,
2366,1,0,0,0,2340,2341,5,40,0,0,2341,2343,5,65,0,0,2342,2344,3,42,21,0,2343,
2342,1,0,0,0,2343,2344,1,0,0,0,2344,2345,1,0,0,0,2345,2346,5,102,0,0,2346,
2348,5,57,0,0,2347,2349,3,398,199,0,2348,2347,1,0,0,0,2348,2349,1,0,0,0,
2349,2350,1,0,0,0,2350,2366,5,58,0,0,2351,2352,3,54,27,0,2352,2353,5,65,
0,0,2353,2354,5,40,0,0,2354,2356,5,65,0,0,2355,2357,3,42,21,0,2356,2355,
1,0,0,0,2356,2357,1,0,0,0,2357,2358,1,0,0,0,2358,2359,5,102,0,0,2359,2361,
5,57,0,0,2360,2362,3,398,199,0,2361,2360,1,0,0,0,2361,2362,1,0,0,0,2362,
2363,1,0,0,0,2363,2364,5,58,0,0,2364,2366,1,0,0,0,2365,2297,1,0,0,0,2365,
2304,1,0,0,0,2365,2316,1,0,0,0,2365,2328,1,0,0,0,2365,2340,1,0,0,0,2365,
2351,1,0,0,0,2366,393,1,0,0,0,2367,2369,5,65,0,0,2368,2370,3,42,21,0,2369,
2368,1,0,0,0,2369,2370,1,0,0,0,2370,2371,1,0,0,0,2371,2372,5,102,0,0,2372,
2374,5,57,0,0,2373,2375,3,398,199,0,2374,2373,1,0,0,0,2374,2375,1,0,0,0,
2375,2376,1,0,0,0,2376,2377,5,58,0,0,2377,395,1,0,0,0,2378,2379,3,60,30,
0,2379,2381,5,57,0,0,2380,2382,3,398,199,0,2381,2380,1,0,0,0,2381,2382,1,
0,0,0,2382,2383,1,0,0,0,2383,2384,5,58,0,0,2384,2435,1,0,0,0,2385,2386,3,
54,27,0,2386,2388,5,65,0,0,2387,2389,3,42,21,0,2388,2387,1,0,0,0,2388,2389,
1,0,0,0,2389,2390,1,0,0,0,2390,2391,5,102,0,0,2391,2393,5,57,0,0,2392,2394,
3,398,199,0,2393,2392,1,0,0,0,2393,2394,1,0,0,0,2394,2395,1,0,0,0,2395,2396,
5,58,0,0,2396,2435,1,0,0,0,2397,2398,3,58,29,0,2398,2400,5,65,0,0,2399,2401,
3,42,21,0,2400,2399,1,0,0,0,2400,2401,1,0,0,0,2401,2402,1,0,0,0,2402,2403,
5,102,0,0,2403,2405,5,57,0,0,2404,2406,3,398,199,0,2405,2404,1,0,0,0,2405,
2406,1,0,0,0,2406,2407,1,0,0,0,2407,2408,5,58,0,0,2408,2435,1,0,0,0,2409,
2410,5,40,0,0,2410,2412,5,65,0,0,2411,2413,3,42,21,0,2412,2411,1,0,0,0,2412,
2413,1,0,0,0,2413,2414,1,0,0,0,2414,2415,5,102,0,0,2415,2417,5,57,0,0,2416,
2418,3,398,199,0,2417,2416,1,0,0,0,2417,2418,1,0,0,0,2418,2419,1,0,0,0,2419,
2435,5,58,0,0,2420,2421,3,54,27,0,2421,2422,5,65,0,0,2422,2423,5,40,0,0,
2423,2425,5,65,0,0,2424,2426,3,42,21,0,2425,2424,1,0,0,0,2425,2426,1,0,0,
0,2426,2427,1,0,0,0,2427,2428,5,102,0,0,2428,2430,5,57,0,0,2429,2431,3,398,
199,0,2430,2429,1,0,0,0,2430,2431,1,0,0,0,2431,2432,1,0,0,0,2432,2433,5,
58,0,0,2433,2435,1,0,0,0,2434,2378,1,0,0,0,2434,2385,1,0,0,0,2434,2397,1,
0,0,0,2434,2409,1,0,0,0,2434,2420,1,0,0,0,2435,397,1,0,0,0,2436,2441,3,414,
207,0,2437,2438,5,64,0,0,2438,2440,3,414,207,0,2439,2437,1,0,0,0,2440,2443,
1,0,0,0,2441,2439,1,0,0,0,2441,2442,1,0,0,0,2442,399,1,0,0,0,2443,2441,1,
0,0,0,2444,2445,3,58,29,0,2445,2447,5,90,0,0,2446,2448,3,42,21,0,2447,2446,
1,0,0,0,2447,2448,1,0,0,0,2448,2449,1,0,0,0,2449,2450,5,102,0,0,2450,2492,
1,0,0,0,2451,2452,3,12,6,0,2452,2454,5,90,0,0,2453,2455,3,42,21,0,2454,2453,
1,0,0,0,2454,2455,1,0,0,0,2455,2456,1,0,0,0,2456,2457,5,102,0,0,2457,2492,
1,0,0,0,2458,2459,3,352,176,0,2459,2461,5,90,0,0,2460,2462,3,42,21,0,2461,
2460,1,0,0,0,2461,2462,1,0,0,0,2462,2463,1,0,0,0,2463,2464,5,102,0,0,2464,
2492,1,0,0,0,2465,2466,5,40,0,0,2466,2468,5,90,0,0,2467,2469,3,42,21,0,2468,
2467,1,0,0,0,2468,2469,1,0,0,0,2469,2470,1,0,0,0,2470,2492,5,102,0,0,2471,
2472,3,54,27,0,2472,2473,5,65,0,0,2473,2474,5,40,0,0,2474,2476,5,90,0,0,
2475,2477,3,42,21,0,2476,2475,1,0,0,0,2476,2477,1,0,0,0,2477,2478,1,0,0,
0,2478,2479,5,102,0,0,2479,2492,1,0,0,0,2480,2481,3,16,8,0,2481,2483,5,90,
0,0,2482,2484,3,42,21,0,2483,2482,1,0,0,0,2483,2484,1,0,0,0,2484,2485,1,
0,0,0,2485,2486,5,31,0,0,2486,2492,1,0,0,0,2487,2488,3,30,15,0,2488,2489,
5,90,0,0,2489,2490,5,31,0,0,2490,2492,1,0,0,0,2491,2444,1,0,0,0,2491,2451,
1,0,0,0,2491,2458,1,0,0,0,2491,2465,1,0,0,0,2491,2471,1,0,0,0,2491,2480,
1,0,0,0,2491,2487,1,0,0,0,2492,401,1,0,0,0,2493,2495,5,90,0,0,2494,2496,
3,42,21,0,2495,2494,1,0,0,0,2495,2496,1,0,0,0,2496,2497,1,0,0,0,2497,2498,
5,102,0,0,2498,403,1,0,0,0,2499,2500,3,58,29,0,2500,2502,5,90,0,0,2501,2503,
3,42,21,0,2502,2501,1,0,0,0,2502,2503,1,0,0,0,2503,2504,1,0,0,0,2504,2505,
5,102,0,0,2505,2540,1,0,0,0,2506,2507,3,12,6,0,2507,2509,5,90,0,0,2508,2510,
3,42,21,0,2509,2508,1,0,0,0,2509,2510,1,0,0,0,2510,2511,1,0,0,0,2511,2512,
5,102,0,0,2512,2540,1,0,0,0,2513,2514,5,40,0,0,2514,2516,5,90,0,0,2515,2517,
3,42,21,0,2516,2515,1,0,0,0,2516,2517,1,0,0,0,2517,2518,1,0,0,0,2518,2540,
5,102,0,0,2519,2520,3,54,27,0,2520,2521,5,65,0,0,2521,2522,5,40,0,0,2522,
2524,5,90,0,0,2523,2525,3,42,21,0,2524,2523,1,0,0,0,2524,2525,1,0,0,0,2525,
2526,1,0,0,0,2526,2527,5,102,0,0,2527,2540,1,0,0,0,2528,2529,3,16,8,0,2529,
2531,5,90,0,0,2530,2532,3,42,21,0,2531,2530,1,0,0,0,2531,2532,1,0,0,0,2532,
2533,1,0,0,0,2533,2534,5,31,0,0,2534,2540,1,0,0,0,2535,2536,3,30,15,0,2536,
2537,5,90,0,0,2537,2538,5,31,0,0,2538,2540,1,0,0,0,2539,2499,1,0,0,0,2539,
2506,1,0,0,0,2539,2513,1,0,0,0,2539,2519,1,0,0,0,2539,2528,1,0,0,0,2539,
2535,1,0,0,0,2540,405,1,0,0,0,2541,2542,5,31,0,0,2542,2543,3,4,2,0,2543,
2545,3,408,204,0,2544,2546,3,32,16,0,2545,2544,1,0,0,0,2545,2546,1,0,0,0,
2546,2564,1,0,0,0,2547,2548,5,31,0,0,2548,2549,3,14,7,0,2549,2551,3,408,
204,0,2550,2552,3,32,16,0,2551,2550,1,0,0,0,2551,2552,1,0,0,0,2552,2564,
1,0,0,0,2553,2554,5,31,0,0,2554,2555,3,4,2,0,2555,2556,3,32,16,0,2556,2557,
3,248,124,0,2557,2564,1,0,0,0,2558,2559,5,31,0,0,2559,2560,3,14,7,0,2560,
2561,3,32,16,0,2561,2562,3,248,124,0,2562,2564,1,0,0,0,2563,2541,1,0,0,0,
2563,2547,1,0,0,0,2563,2553,1,0,0,0,2563,2558,1,0,0,0,2564,407,1,0,0,0,2565,
2569,3,410,205,0,2566,2568,3,410,205,0,2567,2566,1,0,0,0,2568,2571,1,0,0,
0,2569,2567,1,0,0,0,2569,2570,1,0,0,0,2570,409,1,0,0,0,2571,2569,1,0,0,0,
2572,2574,3,230,115,0,2573,2572,1,0,0,0,2574,2577,1,0,0,0,2575,2573,1,0,
0,0,2575,2576,1,0,0,0,2576,2578,1,0,0,0,2577,2575,1,0,0,0,2578,2579,5,61,
0,0,2579,2580,3,414,207,0,2580,2581,5,62,0,0,2581,411,1,0,0,0,2582,2583,
3,414,207,0,2583,413,1,0,0,0,2584,2587,3,416,208,0,2585,2587,3,424,212,0,
2586,2584,1,0,0,0,2586,2585,1,0,0,0,2587,415,1,0,0,0,2588,2589,3,418,209,
0,2589,2590,5,89,0,0,2590,2591,3,422,211,0,2591,417,1,0,0,0,2592,2603,5,
102,0,0,2593,2595,5,57,0,0,2594,2596,3,150,75,0,2595,2594,1,0,0,0,2595,2596,
1,0,0,0,2596,2597,1,0,0,0,2597,2603,5,58,0,0,2598,2599,5,57,0,0,2599,2600,
3,420,210,0,2600,2601,5,58,0,0,2601,2603,1,0,0,0,2602,2592,1,0,0,0,2602,
2593,1,0,0,0,2602,2598,1,0,0,0,2603,419,1,0,0,0,2604,2609,5,102,0,0,2605,
2606,5,64,0,0,2606,2608,5,102,0,0,2607,2605,1,0,0,0,2608,2611,1,0,0,0,2609,
2607,1,0,0,0,2609,2610,1,0,0,0,2610,421,1,0,0,0,2611,2609,1,0,0,0,2612,2615,
3,414,207,0,2613,2615,3,252,126,0,2614,2612,1,0,0,0,2614,2613,1,0,0,0,2615,
423,1,0,0,0,2616,2619,3,432,216,0,2617,2619,3,426,213,0,2618,2616,1,0,0,
0,2618,2617,1,0,0,0,2619,425,1,0,0,0,2620,2621,3,428,214,0,2621,2622,3,430,
215,0,2622,2623,3,414,207,0,2623,427,1,0,0,0,2624,2628,3,58,29,0,2625,2628,
3,380,190,0,2626,2628,3,386,193,0,2627,2624,1,0,0,0,2627,2625,1,0,0,0,2627,
2626,1,0,0,0,2628,429,1,0,0,0,2629,2630,7,3,0,0,2630,431,1,0,0,0,2631,2639,
3,434,217,0,2632,2633,3,434,217,0,2633,2634,5,71,0,0,2634,2635,3,414,207,
0,2635,2636,5,72,0,0,2636,2637,3,432,216,0,2637,2639,1,0,0,0,2638,2631,1,
0,0,0,2638,2632,1,0,0,0,2639,433,1,0,0,0,2640,2641,6,217,-1,0,2641,2642,
3,436,218,0,2642,2648,1,0,0,0,2643,2644,10,1,0,0,2644,2645,5,78,0,0,2645,
2647,3,436,218,0,2646,2643,1,0,0,0,2647,2650,1,0,0,0,2648,2646,1,0,0,0,2648,
2649,1,0,0,0,2649,435,1,0,0,0,2650,2648,1,0,0,0,2651,2652,6,218,-1,0,2652,
2653,3,438,219,0,2653,2659,1,0,0,0,2654,2655,10,1,0,0,2655,2656,5,77,0,0,
2656,2658,3,438,219,0,2657,2654,1,0,0,0,2658,2661,1,0,0,0,2659,2657,1,0,
0,0,2659,2660,1,0,0,0,2660,437,1,0,0,0,2661,2659,1,0,0,0,2662,2663,6,219,
-1,0,2663,2664,3,440,220,0,2664,2670,1,0,0,0,2665,2666,10,1,0,0,2666,2667,
5,86,0,0,2667,2669,3,440,220,0,2668,2665,1,0,0,0,2669,2672,1,0,0,0,2670,
2668,1,0,0,0,2670,2671,1,0,0,0,2671,439,1,0,0,0,2672,2670,1,0,0,0,2673,2674,
6,220,-1,0,2674,2675,3,442,221,0,2675,2681,1,0,0,0,2676,2677,10,1,0,0,2677,
2678,5,87,0,0,2678,2680,3,442,221,0,2679,2676,1,0,0,0,2680,2683,1,0,0,0,
2681,2679,1,0,0,0,2681,2682,1,0,0,0,2682,441,1,0,0,0,2683,2681,1,0,0,0,2684,
2685,6,221,-1,0,2685,2686,3,444,222,0,2686,2692,1,0,0,0,2687,2688,10,1,0,
0,2688,2689,5,85,0,0,2689,2691,3,444,222,0,2690,2687,1,0,0,0,2691,2694,1,
0,0,0,2692,2690,1,0,0,0,2692,2693,1,0,0,0,2693,443,1,0,0,0,2694,2692,1,0,
0,0,2695,2696,6,222,-1,0,2696,2697,3,446,223,0,2697,2706,1,0,0,0,2698,2699,
10,2,0,0,2699,2700,5,73,0,0,2700,2705,3,446,223,0,2701,2702,10,1,0,0,2702,
2703,5,76,0,0,2703,2705,3,446,223,0,2704,2698,1,0,0,0,2704,2701,1,0,0,0,
2705,2708,1,0,0,0,2706,2704,1,0,0,0,2706,2707,1,0,0,0,2707,445,1,0,0,0,2708,
2706,1,0,0,0,2709,2710,6,223,-1,0,2710,2711,3,448,224,0,2711,2729,1,0,0,
0,2712,2713,10,5,0,0,2713,2714,5,68,0,0,2714,2728,3,448,224,0,2715,2716,
10,4,0,0,2716,2717,5,67,0,0,2717,2728,3,448,224,0,2718,2719,10,3,0,0,2719,
2720,5,74,0,0,2720,2728,3,448,224,0,2721,2722,10,2,0,0,2722,2723,5,75,0,
0,2723,2728,3,448,224,0,2724,2725,10,1,0,0,2725,2726,5,26,0,0,2726,2728,
3,12,6,0,2727,2712,1,0,0,0,2727,2715,1,0,0,0,2727,2718,1,0,0,0,2727,2721,
1,0,0,0,2727,2724,1,0,0,0,2728,2731,1,0,0,0,2729,2727,1,0,0,0,2729,2730,
1,0,0,0,2730,447,1,0,0,0,2731,2729,1,0,0,0,2732,2733,6,224,-1,0,2733,2734,
3,450,225,0,2734,2750,1,0,0,0,2735,2736,10,3,0,0,2736,2737,5,68,0,0,2737,
2738,5,68,0,0,2738,2749,3,450,225,0,2739,2740,10,2,0,0,2740,2741,5,67,0,
0,2741,2742,5,67,0,0,2742,2749,3,450,225,0,2743,2744,10,1,0,0,2744,2745,
5,67,0,0,2745,2746,5,67,0,0,2746,2747,5,67,0,0,2747,2749,3,450,225,0,2748,
2735,1,0,0,0,2748,2739,1,0,0,0,2748,2743,1,0,0,0,2749,2752,1,0,0,0,2750,
2748,1,0,0,0,2750,2751,1,0,0,0,2751,449,1,0,0,0,2752,2750,1,0,0,0,2753,2754,
6,225,-1,0,2754,2755,3,452,226,0,2755,2764,1,0,0,0,2756,2757,10,2,0,0,2757,
2758,5,81,0,0,2758,2763,3,452,226,0,2759,2760,10,1,0,0,2760,2761,5,82,0,
0,2761,2763,3,452,226,0,2762,2756,1,0,0,0,2762,2759,1,0,0,0,2763,2766,1,
0,0,0,2764,2762,1,0,0,0,2764,2765,1,0,0,0,2765,451,1,0,0,0,2766,2764,1,0,
0,0,2767,2768,6,226,-1,0,2768,2769,3,454,227,0,2769,2781,1,0,0,0,2770,2771,
10,3,0,0,2771,2772,5,83,0,0,2772,2780,3,454,227,0,2773,2774,10,2,0,0,2774,
2775,5,84,0,0,2775,2780,3,454,227,0,2776,2777,10,1,0,0,2777,2778,5,88,0,
0,2778,2780,3,454,227,0,2779,2770,1,0,0,0,2779,2773,1,0,0,0,2779,2776,1,
0,0,0,2780,2783,1,0,0,0,2781,2779,1,0,0,0,2781,2782,1,0,0,0,2782,453,1,0,
0,0,2783,2781,1,0,0,0,2784,2792,3,456,228,0,2785,2792,3,458,229,0,2786,2787,
5,81,0,0,2787,2792,3,454,227,0,2788,2789,5,82,0,0,2789,2792,3,454,227,0,
2790,2792,3,460,230,0,2791,2784,1,0,0,0,2791,2785,1,0,0,0,2791,2786,1,0,
0,0,2791,2788,1,0,0,0,2791,2790,1,0,0,0,2792,455,1,0,0,0,2793,2794,5,79,
0,0,2794,2795,3,454,227,0,2795,457,1,0,0,0,2796,2797,5,80,0,0,2797,2798,
3,454,227,0,2798,459,1,0,0,0,2799,2806,3,462,231,0,2800,2801,5,70,0,0,2801,
2806,3,454,227,0,2802,2803,5,69,0,0,2803,2806,3,454,227,0,2804,2806,3,472,
236,0,2805,2799,1,0,0,0,2805,2800,1,0,0,0,2805,2802,1,0,0,0,2805,2804,1,
0,0,0,2806,461,1,0,0,0,2807,2810,3,352,176,0,2808,2810,3,58,29,0,2809,2807,
1,0,0,0,2809,2808,1,0,0,0,2810,2815,1,0,0,0,2811,2814,3,466,233,0,2812,2814,
3,470,235,0,2813,2811,1,0,0,0,2813,2812,1,0,0,0,2814,2817,1,0,0,0,2815,2813,
1,0,0,0,2815,2816,1,0,0,0,2816,463,1,0,0,0,2817,2815,1,0,0,0,2818,2819,3,
462,231,0,2819,2820,5,79,0,0,2820,465,1,0,0,0,2821,2822,5,79,0,0,2822,467,
1,0,0,0,2823,2824,3,462,231,0,2824,2825,5,80,0,0,2825,469,1,0,0,0,2826,2827,
5,80,0,0,2827,471,1,0,0,0,2828,2829,5,57,0,0,2829,2830,3,4,2,0,2830,2831,
5,58,0,0,2831,2832,3,454,227,0,2832,2856,1,0,0,0,2833,2834,5,57,0,0,2834,
2838,3,12,6,0,2835,2837,3,40,20,0,2836,2835,1,0,0,0,2837,2840,1,0,0,0,2838,
2836,1,0,0,0,2838,2839,1,0,0,0,2839,2841,1,0,0,0,2840,2838,1,0,0,0,2841,
2842,5,58,0,0,2842,2843,3,460,230,0,2843,2856,1,0,0,0,2844,2845,5,57,0,0,
2845,2849,3,12,6,0,2846,2848,3,40,20,0,2847,2846,1,0,0,0,2848,2851,1,0,0,
0,2849,2847,1,0,0,0,2849,2850,1,0,0,0,2850,2852,1,0,0,0,2851,2849,1,0,0,
0,2852,2853,5,58,0,0,2853,2854,3,416,208,0,2854,2856,1,0,0,0,2855,2828,1,
0,0,0,2855,2833,1,0,0,0,2855,2844,1,0,0,0,2856,473,1,0,0,0,324,478,483,490,
494,498,507,511,515,517,523,528,535,540,542,548,553,558,563,574,588,593,
601,608,614,619,630,633,647,652,657,662,668,678,686,696,704,716,720,725,
731,739,748,759,788,792,797,803,806,809,821,832,846,853,862,869,874,889,
896,902,906,910,914,918,923,927,931,933,938,945,950,952,958,963,967,986,
991,1007,1012,1018,1024,1026,1030,1035,1039,1046,1053,1061,1064,1069,1077,
1082,1089,1096,1101,1107,1119,1124,1128,1138,1143,1151,1154,1159,1167,1170,
1175,1180,1185,1190,1197,1202,1210,1215,1220,1225,1231,1237,1240,1243,1252,
1258,1264,1267,1270,1278,1283,1288,1294,1297,1308,1317,1327,1332,1343,1348,
1360,1365,1377,1387,1392,1400,1403,1410,1418,1424,1433,1443,1447,1450,1459,
1473,1476,1485,1490,1498,1504,1512,1524,1531,1545,1567,1601,1613,1619,1631,
1644,1670,1674,1679,1683,1687,1695,1699,1703,1710,1719,1727,1742,1754,1760,
1766,1787,1792,1798,1810,1821,1831,1834,1839,1848,1854,1864,1869,1878,1901,
1911,1933,1940,1948,1956,1967,1990,2000,2011,2033,2037,2042,2050,2056,2060,
2064,2068,2074,2079,2084,2088,2092,2098,2103,2108,2112,2116,2118,2123,2128,
2133,2137,2141,2145,2150,2158,2164,2168,2172,2176,2182,2187,2192,2196,2200,
2202,2207,2222,2236,2248,2257,2272,2285,2294,2300,2307,2312,2319,2324,2331,
2336,2343,2348,2356,2361,2365,2369,2374,2381,2388,2393,2400,2405,2412,2417,
2425,2430,2434,2441,2447,2454,2461,2468,2476,2483,2491,2495,2502,2509,2516,
2524,2531,2539,2545,2551,2563,2569,2575,2586,2595,2602,2609,2614,2618,2627,
2638,2648,2659,2670,2681,2692,2704,2706,2727,2729,2748,2750,2762,2764,2779,
2781,2791,2805,2809,2813,2815,2838,2849,2855];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

const sharedContextCache = new antlr4.atn.PredictionContextCache();

export default class Java8Parser extends antlr4.Parser {

    static grammarFileName = "Java8.g4";
    static literalNames = [ null, "'abstract'", "'assert'", "'boolean'", 
                            "'break'", "'byte'", "'case'", "'catch'", "'char'", 
                            "'class'", "'const'", "'continue'", "'default'", 
                            "'do'", "'double'", "'else'", "'enum'", "'extends'", 
                            "'final'", "'finally'", "'float'", "'for'", 
                            "'if'", "'goto'", "'implements'", "'import'", 
                            "'instanceof'", "'int'", "'interface'", "'long'", 
                            "'native'", "'new'", "'package'", "'private'", 
                            "'protected'", "'public'", "'return'", "'short'", 
                            "'static'", "'strictfp'", "'super'", "'switch'", 
                            "'synchronized'", "'this'", "'throw'", "'throws'", 
                            "'transient'", "'try'", "'void'", "'volatile'", 
                            "'while'", null, null, null, null, null, "'null'", 
                            "'('", "')'", "'{'", "'}'", "'['", "']'", "';'", 
                            "','", "'.'", "'='", "'>'", "'<'", "'!'", "'~'", 
                            "'?'", "':'", "'=='", "'<='", "'>='", "'!='", 
                            "'&&'", "'||'", "'++'", "'--'", "'+'", "'-'", 
                            "'*'", "'/'", "'&'", "'|'", "'^'", "'%'", "'->'", 
                            "'::'", "'+='", "'-='", "'*='", "'/='", "'&='", 
                            "'|='", "'^='", "'%='", "'<<='", "'>>='", "'>>>='", 
                            null, "'@'", "'...'" ];
    static symbolicNames = [ null, "ABSTRACT", "ASSERT", "BOOLEAN", "BREAK", 
                             "BYTE", "CASE", "CATCH", "CHAR", "CLASS", "CONST", 
                             "CONTINUE", "DEFAULT", "DO", "DOUBLE", "ELSE", 
                             "ENUM", "EXTENDS", "FINAL", "FINALLY", "FLOAT", 
                             "FOR", "IF", "GOTO", "IMPLEMENTS", "IMPORT", 
                             "INSTANCEOF", "INT", "INTERFACE", "LONG", "NATIVE", 
                             "NEW", "PACKAGE", "PRIVATE", "PROTECTED", "PUBLIC", 
                             "RETURN", "SHORT", "STATIC", "STRICTFP", "SUPER", 
                             "SWITCH", "SYNCHRONIZED", "THIS", "THROW", 
                             "THROWS", "TRANSIENT", "TRY", "VOID", "VOLATILE", 
                             "WHILE", "IntegerLiteral", "FloatingPointLiteral", 
                             "BooleanLiteral", "CharacterLiteral", "StringLiteral", 
                             "NullLiteral", "LPAREN", "RPAREN", "LBRACE", 
                             "RBRACE", "LBRACK", "RBRACK", "SEMI", "COMMA", 
                             "DOT", "ASSIGN", "GT", "LT", "BANG", "TILDE", 
                             "QUESTION", "COLON", "EQUAL", "LE", "GE", "NOTEQUAL", 
                             "AND", "OR", "INC", "DEC", "ADD", "SUB", "MUL", 
                             "DIV", "BITAND", "BITOR", "CARET", "MOD", "ARROW", 
                             "COLONCOLON", "ADD_ASSIGN", "SUB_ASSIGN", "MUL_ASSIGN", 
                             "DIV_ASSIGN", "AND_ASSIGN", "OR_ASSIGN", "XOR_ASSIGN", 
                             "MOD_ASSIGN", "LSHIFT_ASSIGN", "RSHIFT_ASSIGN", 
                             "URSHIFT_ASSIGN", "Identifier", "AT", "ELLIPSIS", 
                             "WS", "COMMENT", "LINE_COMMENT" ];
    static ruleNames = [ "literal", "type", "primitiveType", "numericType", 
                         "integralType", "floatingPointType", "referenceType", 
                         "classOrInterfaceType", "classType", "classType_lf_classOrInterfaceType", 
                         "classType_lfno_classOrInterfaceType", "interfaceType", 
                         "interfaceType_lf_classOrInterfaceType", "interfaceType_lfno_classOrInterfaceType", 
                         "typeVariable", "arrayType", "dims", "typeParameter", 
                         "typeParameterModifier", "typeBound", "additionalBound", 
                         "typeArguments", "typeArgumentList", "typeArgument", 
                         "wildcard", "wildcardBounds", "packageName", "typeName", 
                         "packageOrTypeName", "expressionName", "methodName", 
                         "ambiguousName", "compilationUnit", "packageDeclaration", 
                         "packageModifier", "importDeclaration", "singleTypeImportDeclaration", 
                         "typeImportOnDemandDeclaration", "singleStaticImportDeclaration", 
                         "staticImportOnDemandDeclaration", "typeDeclaration", 
                         "classDeclaration", "normalClassDeclaration", "classModifier", 
                         "typeParameters", "typeParameterList", "superclass", 
                         "superinterfaces", "interfaceTypeList", "classBody", 
                         "classBodyDeclaration", "classMemberDeclaration", 
                         "fieldDeclaration", "fieldModifier", "variableDeclaratorList", 
                         "variableDeclarator", "variableDeclaratorId", "variableInitializer", 
                         "unannType", "unannPrimitiveType", "unannReferenceType", 
                         "unannClassOrInterfaceType", "unannClassType", 
                         "unannClassType_lf_unannClassOrInterfaceType", 
                         "unannClassType_lfno_unannClassOrInterfaceType", 
                         "unannInterfaceType", "unannInterfaceType_lf_unannClassOrInterfaceType", 
                         "unannInterfaceType_lfno_unannClassOrInterfaceType", 
                         "unannTypeVariable", "unannArrayType", "methodDeclaration", 
                         "methodModifier", "methodHeader", "result", "methodDeclarator", 
                         "formalParameterList", "formalParameters", "formalParameter", 
                         "variableModifier", "lastFormalParameter", "receiverParameter", 
                         "throws_", "exceptionTypeList", "exceptionType", 
                         "methodBody", "instanceInitializer", "staticInitializer", 
                         "constructorDeclaration", "constructorModifier", 
                         "constructorDeclarator", "simpleTypeName", "constructorBody", 
                         "explicitConstructorInvocation", "enumDeclaration", 
                         "enumBody", "enumConstantList", "enumConstant", 
                         "enumConstantModifier", "enumBodyDeclarations", 
                         "interfaceDeclaration", "normalInterfaceDeclaration", 
                         "interfaceModifier", "extendsInterfaces", "interfaceBody", 
                         "interfaceMemberDeclaration", "constantDeclaration", 
                         "constantModifier", "interfaceMethodDeclaration", 
                         "interfaceMethodModifier", "annotationTypeDeclaration", 
                         "annotationTypeBody", "annotationTypeMemberDeclaration", 
                         "annotationTypeElementDeclaration", "annotationTypeElementModifier", 
                         "defaultValue", "annotation", "normalAnnotation", 
                         "elementValuePairList", "elementValuePair", "elementValue", 
                         "elementValueArrayInitializer", "elementValueList", 
                         "markerAnnotation", "singleElementAnnotation", 
                         "arrayInitializer", "variableInitializerList", 
                         "block", "blockStatements", "blockStatement", "localVariableDeclarationStatement", 
                         "localVariableDeclaration", "statement", "statementNoShortIf", 
                         "statementWithoutTrailingSubstatement", "emptyStatement", 
                         "labeledStatement", "labeledStatementNoShortIf", 
                         "expressionStatement", "statementExpression", "ifThenStatement", 
                         "ifThenElseStatement", "ifThenElseStatementNoShortIf", 
                         "assertStatement", "switchStatement", "switchBlock", 
                         "switchBlockStatementGroup", "switchLabels", "switchLabel", 
                         "enumConstantName", "whileStatement", "whileStatementNoShortIf", 
                         "doStatement", "forStatement", "forStatementNoShortIf", 
                         "basicForStatement", "basicForStatementNoShortIf", 
                         "forInit", "forUpdate", "statementExpressionList", 
                         "enhancedForStatement", "enhancedForStatementNoShortIf", 
                         "breakStatement", "continueStatement", "returnStatement", 
                         "throwStatement", "synchronizedStatement", "tryStatement", 
                         "catches", "catchClause", "catchFormalParameter", 
                         "catchType", "finally_", "tryWithResourcesStatement", 
                         "resourceSpecification", "resourceList", "resource", 
                         "primary", "primaryNoNewArray", "primaryNoNewArray_lf_arrayAccess", 
                         "primaryNoNewArray_lfno_arrayAccess", "primaryNoNewArray_lf_primary", 
                         "primaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary", 
                         "primaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary", 
                         "primaryNoNewArray_lfno_primary", "primaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary", 
                         "primaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary", 
                         "classInstanceCreationExpression", "classInstanceCreationExpression_lf_primary", 
                         "classInstanceCreationExpression_lfno_primary", 
                         "typeArgumentsOrDiamond", "fieldAccess", "fieldAccess_lf_primary", 
                         "fieldAccess_lfno_primary", "arrayAccess", "arrayAccess_lf_primary", 
                         "arrayAccess_lfno_primary", "methodInvocation", 
                         "methodInvocation_lf_primary", "methodInvocation_lfno_primary", 
                         "argumentList", "methodReference", "methodReference_lf_primary", 
                         "methodReference_lfno_primary", "arrayCreationExpression", 
                         "dimExprs", "dimExpr", "constantExpression", "expression", 
                         "lambdaExpression", "lambdaParameters", "inferredFormalParameterList", 
                         "lambdaBody", "assignmentExpression", "assignment", 
                         "leftHandSide", "assignmentOperator", "conditionalExpression", 
                         "conditionalOrExpression", "conditionalAndExpression", 
                         "inclusiveOrExpression", "exclusiveOrExpression", 
                         "andExpression", "equalityExpression", "relationalExpression", 
                         "shiftExpression", "additiveExpression", "multiplicativeExpression", 
                         "unaryExpression", "preIncrementExpression", "preDecrementExpression", 
                         "unaryExpressionNotPlusMinus", "postfixExpression", 
                         "postIncrementExpression", "postIncrementExpression_lf_postfixExpression", 
                         "postDecrementExpression", "postDecrementExpression_lf_postfixExpression", 
                         "castExpression" ];

    constructor(input) {
        super(input);
        this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
        this.ruleNames = Java8Parser.ruleNames;
        this.literalNames = Java8Parser.literalNames;
        this.symbolicNames = Java8Parser.symbolicNames;
    }

    sempred(localctx, ruleIndex, predIndex) {
    	switch(ruleIndex) {
    	case 26:
    	    		return this.packageName_sempred(localctx, predIndex);
    	case 28:
    	    		return this.packageOrTypeName_sempred(localctx, predIndex);
    	case 31:
    	    		return this.ambiguousName_sempred(localctx, predIndex);
    	case 217:
    	    		return this.conditionalOrExpression_sempred(localctx, predIndex);
    	case 218:
    	    		return this.conditionalAndExpression_sempred(localctx, predIndex);
    	case 219:
    	    		return this.inclusiveOrExpression_sempred(localctx, predIndex);
    	case 220:
    	    		return this.exclusiveOrExpression_sempred(localctx, predIndex);
    	case 221:
    	    		return this.andExpression_sempred(localctx, predIndex);
    	case 222:
    	    		return this.equalityExpression_sempred(localctx, predIndex);
    	case 223:
    	    		return this.relationalExpression_sempred(localctx, predIndex);
    	case 224:
    	    		return this.shiftExpression_sempred(localctx, predIndex);
    	case 225:
    	    		return this.additiveExpression_sempred(localctx, predIndex);
    	case 226:
    	    		return this.multiplicativeExpression_sempred(localctx, predIndex);
        default:
            throw "No predicate with index:" + ruleIndex;
       }
    }

    packageName_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 0:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    packageOrTypeName_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 1:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    ambiguousName_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 2:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    conditionalOrExpression_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 3:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    conditionalAndExpression_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 4:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    inclusiveOrExpression_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 5:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    exclusiveOrExpression_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 6:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    andExpression_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 7:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    equalityExpression_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 8:
    			return this.precpred(this._ctx, 2);
    		case 9:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    relationalExpression_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 10:
    			return this.precpred(this._ctx, 5);
    		case 11:
    			return this.precpred(this._ctx, 4);
    		case 12:
    			return this.precpred(this._ctx, 3);
    		case 13:
    			return this.precpred(this._ctx, 2);
    		case 14:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    shiftExpression_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 15:
    			return this.precpred(this._ctx, 3);
    		case 16:
    			return this.precpred(this._ctx, 2);
    		case 17:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    additiveExpression_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 18:
    			return this.precpred(this._ctx, 2);
    		case 19:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    multiplicativeExpression_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 20:
    			return this.precpred(this._ctx, 3);
    		case 21:
    			return this.precpred(this._ctx, 2);
    		case 22:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };




	literal() {
	    let localctx = new LiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 0, Java8Parser.RULE_literal);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 474;
	        _la = this._input.LA(1);
	        if(!(((((_la - 51)) & ~0x1f) === 0 && ((1 << (_la - 51)) & 63) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	type() {
	    let localctx = new TypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 2, Java8Parser.RULE_type);
	    try {
	        this.state = 478;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,0,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 476;
	            this.primitiveType();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 477;
	            this.referenceType();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	primitiveType() {
	    let localctx = new PrimitiveTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 4, Java8Parser.RULE_primitiveType);
	    var _la = 0;
	    try {
	        this.state = 494;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,3,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 483;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===103) {
	                this.state = 480;
	                this.annotation();
	                this.state = 485;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 486;
	            this.numericType();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 490;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===103) {
	                this.state = 487;
	                this.annotation();
	                this.state = 492;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 493;
	            this.match(Java8Parser.BOOLEAN);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	numericType() {
	    let localctx = new NumericTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 6, Java8Parser.RULE_numericType);
	    try {
	        this.state = 498;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 5:
	        case 8:
	        case 27:
	        case 29:
	        case 37:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 496;
	            this.integralType();
	            break;
	        case 14:
	        case 20:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 497;
	            this.floatingPointType();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	integralType() {
	    let localctx = new IntegralTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 8, Java8Parser.RULE_integralType);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 500;
	        _la = this._input.LA(1);
	        if(!((((_la) & ~0x1f) === 0 && ((1 << _la) & 671088928) !== 0) || _la===37)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	floatingPointType() {
	    let localctx = new FloatingPointTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 10, Java8Parser.RULE_floatingPointType);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 502;
	        _la = this._input.LA(1);
	        if(!(_la===14 || _la===20)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	referenceType() {
	    let localctx = new ReferenceTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 12, Java8Parser.RULE_referenceType);
	    try {
	        this.state = 507;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,5,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 504;
	            this.classOrInterfaceType();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 505;
	            this.typeVariable();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 506;
	            this.arrayType();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	classOrInterfaceType() {
	    let localctx = new ClassOrInterfaceTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 14, Java8Parser.RULE_classOrInterfaceType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 511;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,6,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 509;
	            this.classType_lfno_classOrInterfaceType();
	            break;

	        case 2:
	            this.state = 510;
	            this.interfaceType_lfno_classOrInterfaceType();
	            break;

	        }
	        this.state = 517;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,8,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 515;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,7,this._ctx);
	                switch(la_) {
	                case 1:
	                    this.state = 513;
	                    this.classType_lf_classOrInterfaceType();
	                    break;

	                case 2:
	                    this.state = 514;
	                    this.interfaceType_lf_classOrInterfaceType();
	                    break;

	                } 
	            }
	            this.state = 519;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,8,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	classType() {
	    let localctx = new ClassTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 16, Java8Parser.RULE_classType);
	    var _la = 0;
	    try {
	        this.state = 542;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,13,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 523;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===103) {
	                this.state = 520;
	                this.annotation();
	                this.state = 525;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 526;
	            this.match(Java8Parser.Identifier);
	            this.state = 528;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===68) {
	                this.state = 527;
	                this.typeArguments();
	            }

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 530;
	            this.classOrInterfaceType();
	            this.state = 531;
	            this.match(Java8Parser.DOT);
	            this.state = 535;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===103) {
	                this.state = 532;
	                this.annotation();
	                this.state = 537;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 538;
	            this.match(Java8Parser.Identifier);
	            this.state = 540;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===68) {
	                this.state = 539;
	                this.typeArguments();
	            }

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	classType_lf_classOrInterfaceType() {
	    let localctx = new ClassType_lf_classOrInterfaceTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 18, Java8Parser.RULE_classType_lf_classOrInterfaceType);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 544;
	        this.match(Java8Parser.DOT);
	        this.state = 548;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===103) {
	            this.state = 545;
	            this.annotation();
	            this.state = 550;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 551;
	        this.match(Java8Parser.Identifier);
	        this.state = 553;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,15,this._ctx);
	        if(la_===1) {
	            this.state = 552;
	            this.typeArguments();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	classType_lfno_classOrInterfaceType() {
	    let localctx = new ClassType_lfno_classOrInterfaceTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 20, Java8Parser.RULE_classType_lfno_classOrInterfaceType);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 558;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===103) {
	            this.state = 555;
	            this.annotation();
	            this.state = 560;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 561;
	        this.match(Java8Parser.Identifier);
	        this.state = 563;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,17,this._ctx);
	        if(la_===1) {
	            this.state = 562;
	            this.typeArguments();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	interfaceType() {
	    let localctx = new InterfaceTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 22, Java8Parser.RULE_interfaceType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 565;
	        this.classType();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	interfaceType_lf_classOrInterfaceType() {
	    let localctx = new InterfaceType_lf_classOrInterfaceTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 24, Java8Parser.RULE_interfaceType_lf_classOrInterfaceType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 567;
	        this.classType_lf_classOrInterfaceType();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	interfaceType_lfno_classOrInterfaceType() {
	    let localctx = new InterfaceType_lfno_classOrInterfaceTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 26, Java8Parser.RULE_interfaceType_lfno_classOrInterfaceType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 569;
	        this.classType_lfno_classOrInterfaceType();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeVariable() {
	    let localctx = new TypeVariableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 28, Java8Parser.RULE_typeVariable);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 574;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===103) {
	            this.state = 571;
	            this.annotation();
	            this.state = 576;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 577;
	        this.match(Java8Parser.Identifier);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	arrayType() {
	    let localctx = new ArrayTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 30, Java8Parser.RULE_arrayType);
	    try {
	        this.state = 588;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,19,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 579;
	            this.primitiveType();
	            this.state = 580;
	            this.dims();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 582;
	            this.classOrInterfaceType();
	            this.state = 583;
	            this.dims();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 585;
	            this.typeVariable();
	            this.state = 586;
	            this.dims();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dims() {
	    let localctx = new DimsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 32, Java8Parser.RULE_dims);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 593;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===103) {
	            this.state = 590;
	            this.annotation();
	            this.state = 595;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 596;
	        this.match(Java8Parser.LBRACK);
	        this.state = 597;
	        this.match(Java8Parser.RBRACK);
	        this.state = 608;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,22,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 601;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===103) {
	                    this.state = 598;
	                    this.annotation();
	                    this.state = 603;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                this.state = 604;
	                this.match(Java8Parser.LBRACK);
	                this.state = 605;
	                this.match(Java8Parser.RBRACK); 
	            }
	            this.state = 610;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,22,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeParameter() {
	    let localctx = new TypeParameterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 34, Java8Parser.RULE_typeParameter);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 614;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===103) {
	            this.state = 611;
	            this.typeParameterModifier();
	            this.state = 616;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 617;
	        this.match(Java8Parser.Identifier);
	        this.state = 619;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===17) {
	            this.state = 618;
	            this.typeBound();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeParameterModifier() {
	    let localctx = new TypeParameterModifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 36, Java8Parser.RULE_typeParameterModifier);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 621;
	        this.annotation();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeBound() {
	    let localctx = new TypeBoundContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 38, Java8Parser.RULE_typeBound);
	    var _la = 0;
	    try {
	        this.state = 633;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,26,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 623;
	            this.match(Java8Parser.EXTENDS);
	            this.state = 624;
	            this.typeVariable();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 625;
	            this.match(Java8Parser.EXTENDS);
	            this.state = 626;
	            this.classOrInterfaceType();
	            this.state = 630;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===85) {
	                this.state = 627;
	                this.additionalBound();
	                this.state = 632;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	additionalBound() {
	    let localctx = new AdditionalBoundContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 40, Java8Parser.RULE_additionalBound);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 635;
	        this.match(Java8Parser.BITAND);
	        this.state = 636;
	        this.interfaceType();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeArguments() {
	    let localctx = new TypeArgumentsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 42, Java8Parser.RULE_typeArguments);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 638;
	        this.match(Java8Parser.LT);
	        this.state = 639;
	        this.typeArgumentList();
	        this.state = 640;
	        this.match(Java8Parser.GT);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeArgumentList() {
	    let localctx = new TypeArgumentListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 44, Java8Parser.RULE_typeArgumentList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 642;
	        this.typeArgument();
	        this.state = 647;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===64) {
	            this.state = 643;
	            this.match(Java8Parser.COMMA);
	            this.state = 644;
	            this.typeArgument();
	            this.state = 649;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeArgument() {
	    let localctx = new TypeArgumentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 46, Java8Parser.RULE_typeArgument);
	    try {
	        this.state = 652;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,28,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 650;
	            this.referenceType();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 651;
	            this.wildcard();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	wildcard() {
	    let localctx = new WildcardContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 48, Java8Parser.RULE_wildcard);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 657;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===103) {
	            this.state = 654;
	            this.annotation();
	            this.state = 659;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 660;
	        this.match(Java8Parser.QUESTION);
	        this.state = 662;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===17 || _la===40) {
	            this.state = 661;
	            this.wildcardBounds();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	wildcardBounds() {
	    let localctx = new WildcardBoundsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 50, Java8Parser.RULE_wildcardBounds);
	    try {
	        this.state = 668;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 17:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 664;
	            this.match(Java8Parser.EXTENDS);
	            this.state = 665;
	            this.referenceType();
	            break;
	        case 40:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 666;
	            this.match(Java8Parser.SUPER);
	            this.state = 667;
	            this.referenceType();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	packageName(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new PackageNameContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 52;
	    this.enterRecursionRule(localctx, 52, Java8Parser.RULE_packageName, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 671;
	        this.match(Java8Parser.Identifier);
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 678;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,32,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new PackageNameContext(this, _parentctx, _parentState);
	                this.pushNewRecursionContext(localctx, _startState, Java8Parser.RULE_packageName);
	                this.state = 673;
	                if (!( this.precpred(this._ctx, 1))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                }
	                this.state = 674;
	                this.match(Java8Parser.DOT);
	                this.state = 675;
	                this.match(Java8Parser.Identifier); 
	            }
	            this.state = 680;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,32,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	typeName() {
	    let localctx = new TypeNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 54, Java8Parser.RULE_typeName);
	    try {
	        this.state = 686;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,33,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 681;
	            this.match(Java8Parser.Identifier);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 682;
	            this.packageOrTypeName(0);
	            this.state = 683;
	            this.match(Java8Parser.DOT);
	            this.state = 684;
	            this.match(Java8Parser.Identifier);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	packageOrTypeName(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new PackageOrTypeNameContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 56;
	    this.enterRecursionRule(localctx, 56, Java8Parser.RULE_packageOrTypeName, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 689;
	        this.match(Java8Parser.Identifier);
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 696;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,34,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new PackageOrTypeNameContext(this, _parentctx, _parentState);
	                this.pushNewRecursionContext(localctx, _startState, Java8Parser.RULE_packageOrTypeName);
	                this.state = 691;
	                if (!( this.precpred(this._ctx, 1))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                }
	                this.state = 692;
	                this.match(Java8Parser.DOT);
	                this.state = 693;
	                this.match(Java8Parser.Identifier); 
	            }
	            this.state = 698;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,34,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	expressionName() {
	    let localctx = new ExpressionNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 58, Java8Parser.RULE_expressionName);
	    try {
	        this.state = 704;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,35,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 699;
	            this.match(Java8Parser.Identifier);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 700;
	            this.ambiguousName(0);
	            this.state = 701;
	            this.match(Java8Parser.DOT);
	            this.state = 702;
	            this.match(Java8Parser.Identifier);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	methodName() {
	    let localctx = new MethodNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 60, Java8Parser.RULE_methodName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 706;
	        this.match(Java8Parser.Identifier);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	ambiguousName(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new AmbiguousNameContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 62;
	    this.enterRecursionRule(localctx, 62, Java8Parser.RULE_ambiguousName, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 709;
	        this.match(Java8Parser.Identifier);
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 716;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,36,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new AmbiguousNameContext(this, _parentctx, _parentState);
	                this.pushNewRecursionContext(localctx, _startState, Java8Parser.RULE_ambiguousName);
	                this.state = 711;
	                if (!( this.precpred(this._ctx, 1))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                }
	                this.state = 712;
	                this.match(Java8Parser.DOT);
	                this.state = 713;
	                this.match(Java8Parser.Identifier); 
	            }
	            this.state = 718;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,36,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	compilationUnit() {
	    let localctx = new CompilationUnitContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 64, Java8Parser.RULE_compilationUnit);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 720;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,37,this._ctx);
	        if(la_===1) {
	            this.state = 719;
	            this.packageDeclaration();

	        }
	        this.state = 725;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===25) {
	            this.state = 722;
	            this.importDeclaration();
	            this.state = 727;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 731;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) === 0 && ((1 << _la) & 268763650) !== 0) || ((((_la - 33)) & ~0x1f) === 0 && ((1 << (_la - 33)) & 1073741927) !== 0) || _la===103) {
	            this.state = 728;
	            this.typeDeclaration();
	            this.state = 733;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 734;
	        this.match(Java8Parser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	packageDeclaration() {
	    let localctx = new PackageDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 66, Java8Parser.RULE_packageDeclaration);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 739;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===103) {
	            this.state = 736;
	            this.packageModifier();
	            this.state = 741;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 742;
	        this.match(Java8Parser.PACKAGE);
	        this.state = 743;
	        this.match(Java8Parser.Identifier);
	        this.state = 748;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===65) {
	            this.state = 744;
	            this.match(Java8Parser.DOT);
	            this.state = 745;
	            this.match(Java8Parser.Identifier);
	            this.state = 750;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 751;
	        this.match(Java8Parser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	packageModifier() {
	    let localctx = new PackageModifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 68, Java8Parser.RULE_packageModifier);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 753;
	        this.annotation();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	importDeclaration() {
	    let localctx = new ImportDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 70, Java8Parser.RULE_importDeclaration);
	    try {
	        this.state = 759;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,42,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 755;
	            this.singleTypeImportDeclaration();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 756;
	            this.typeImportOnDemandDeclaration();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 757;
	            this.singleStaticImportDeclaration();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 758;
	            this.staticImportOnDemandDeclaration();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	singleTypeImportDeclaration() {
	    let localctx = new SingleTypeImportDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 72, Java8Parser.RULE_singleTypeImportDeclaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 761;
	        this.match(Java8Parser.IMPORT);
	        this.state = 762;
	        this.typeName();
	        this.state = 763;
	        this.match(Java8Parser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeImportOnDemandDeclaration() {
	    let localctx = new TypeImportOnDemandDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 74, Java8Parser.RULE_typeImportOnDemandDeclaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 765;
	        this.match(Java8Parser.IMPORT);
	        this.state = 766;
	        this.packageOrTypeName(0);
	        this.state = 767;
	        this.match(Java8Parser.DOT);
	        this.state = 768;
	        this.match(Java8Parser.MUL);
	        this.state = 769;
	        this.match(Java8Parser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	singleStaticImportDeclaration() {
	    let localctx = new SingleStaticImportDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 76, Java8Parser.RULE_singleStaticImportDeclaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 771;
	        this.match(Java8Parser.IMPORT);
	        this.state = 772;
	        this.match(Java8Parser.STATIC);
	        this.state = 773;
	        this.typeName();
	        this.state = 774;
	        this.match(Java8Parser.DOT);
	        this.state = 775;
	        this.match(Java8Parser.Identifier);
	        this.state = 776;
	        this.match(Java8Parser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	staticImportOnDemandDeclaration() {
	    let localctx = new StaticImportOnDemandDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 78, Java8Parser.RULE_staticImportOnDemandDeclaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 778;
	        this.match(Java8Parser.IMPORT);
	        this.state = 779;
	        this.match(Java8Parser.STATIC);
	        this.state = 780;
	        this.typeName();
	        this.state = 781;
	        this.match(Java8Parser.DOT);
	        this.state = 782;
	        this.match(Java8Parser.MUL);
	        this.state = 783;
	        this.match(Java8Parser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeDeclaration() {
	    let localctx = new TypeDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 80, Java8Parser.RULE_typeDeclaration);
	    try {
	        this.state = 788;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,43,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 785;
	            this.classDeclaration();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 786;
	            this.interfaceDeclaration();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 787;
	            this.match(Java8Parser.SEMI);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	classDeclaration() {
	    let localctx = new ClassDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 82, Java8Parser.RULE_classDeclaration);
	    try {
	        this.state = 792;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,44,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 790;
	            this.normalClassDeclaration();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 791;
	            this.enumDeclaration();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	normalClassDeclaration() {
	    let localctx = new NormalClassDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 84, Java8Parser.RULE_normalClassDeclaration);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 797;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===1 || _la===18 || ((((_la - 33)) & ~0x1f) === 0 && ((1 << (_la - 33)) & 103) !== 0) || _la===103) {
	            this.state = 794;
	            this.classModifier();
	            this.state = 799;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 800;
	        this.match(Java8Parser.CLASS);
	        this.state = 801;
	        this.match(Java8Parser.Identifier);
	        this.state = 803;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===68) {
	            this.state = 802;
	            this.typeParameters();
	        }

	        this.state = 806;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===17) {
	            this.state = 805;
	            this.superclass();
	        }

	        this.state = 809;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===24) {
	            this.state = 808;
	            this.superinterfaces();
	        }

	        this.state = 811;
	        this.classBody();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	classModifier() {
	    let localctx = new ClassModifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 86, Java8Parser.RULE_classModifier);
	    try {
	        this.state = 821;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 103:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 813;
	            this.annotation();
	            break;
	        case 35:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 814;
	            this.match(Java8Parser.PUBLIC);
	            break;
	        case 34:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 815;
	            this.match(Java8Parser.PROTECTED);
	            break;
	        case 33:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 816;
	            this.match(Java8Parser.PRIVATE);
	            break;
	        case 1:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 817;
	            this.match(Java8Parser.ABSTRACT);
	            break;
	        case 38:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 818;
	            this.match(Java8Parser.STATIC);
	            break;
	        case 18:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 819;
	            this.match(Java8Parser.FINAL);
	            break;
	        case 39:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 820;
	            this.match(Java8Parser.STRICTFP);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeParameters() {
	    let localctx = new TypeParametersContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 88, Java8Parser.RULE_typeParameters);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 823;
	        this.match(Java8Parser.LT);
	        this.state = 824;
	        this.typeParameterList();
	        this.state = 825;
	        this.match(Java8Parser.GT);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeParameterList() {
	    let localctx = new TypeParameterListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 90, Java8Parser.RULE_typeParameterList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 827;
	        this.typeParameter();
	        this.state = 832;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===64) {
	            this.state = 828;
	            this.match(Java8Parser.COMMA);
	            this.state = 829;
	            this.typeParameter();
	            this.state = 834;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	superclass() {
	    let localctx = new SuperclassContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 92, Java8Parser.RULE_superclass);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 835;
	        this.match(Java8Parser.EXTENDS);
	        this.state = 836;
	        this.classType();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	superinterfaces() {
	    let localctx = new SuperinterfacesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 94, Java8Parser.RULE_superinterfaces);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 838;
	        this.match(Java8Parser.IMPLEMENTS);
	        this.state = 839;
	        this.interfaceTypeList();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	interfaceTypeList() {
	    let localctx = new InterfaceTypeListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 96, Java8Parser.RULE_interfaceTypeList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 841;
	        this.interfaceType();
	        this.state = 846;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===64) {
	            this.state = 842;
	            this.match(Java8Parser.COMMA);
	            this.state = 843;
	            this.interfaceType();
	            this.state = 848;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	classBody() {
	    let localctx = new ClassBodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 98, Java8Parser.RULE_classBody);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 849;
	        this.match(Java8Parser.LBRACE);
	        this.state = 853;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) === 0 && ((1 << _la) & 2014659370) !== 0) || ((((_la - 33)) & ~0x1f) === 0 && ((1 << (_la - 33)) & 1140957815) !== 0) || _la===68 || _la===102 || _la===103) {
	            this.state = 850;
	            this.classBodyDeclaration();
	            this.state = 855;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 856;
	        this.match(Java8Parser.RBRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	classBodyDeclaration() {
	    let localctx = new ClassBodyDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 100, Java8Parser.RULE_classBodyDeclaration);
	    try {
	        this.state = 862;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,53,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 858;
	            this.classMemberDeclaration();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 859;
	            this.instanceInitializer();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 860;
	            this.staticInitializer();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 861;
	            this.constructorDeclaration();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	classMemberDeclaration() {
	    let localctx = new ClassMemberDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 102, Java8Parser.RULE_classMemberDeclaration);
	    try {
	        this.state = 869;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,54,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 864;
	            this.fieldDeclaration();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 865;
	            this.methodDeclaration();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 866;
	            this.classDeclaration();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 867;
	            this.interfaceDeclaration();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 868;
	            this.match(Java8Parser.SEMI);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fieldDeclaration() {
	    let localctx = new FieldDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 104, Java8Parser.RULE_fieldDeclaration);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 874;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(((((_la - 18)) & ~0x1f) === 0 && ((1 << (_la - 18)) & 2417197057) !== 0) || _la===103) {
	            this.state = 871;
	            this.fieldModifier();
	            this.state = 876;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 877;
	        this.unannType();
	        this.state = 878;
	        this.variableDeclaratorList();
	        this.state = 879;
	        this.match(Java8Parser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fieldModifier() {
	    let localctx = new FieldModifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 106, Java8Parser.RULE_fieldModifier);
	    try {
	        this.state = 889;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 103:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 881;
	            this.annotation();
	            break;
	        case 35:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 882;
	            this.match(Java8Parser.PUBLIC);
	            break;
	        case 34:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 883;
	            this.match(Java8Parser.PROTECTED);
	            break;
	        case 33:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 884;
	            this.match(Java8Parser.PRIVATE);
	            break;
	        case 38:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 885;
	            this.match(Java8Parser.STATIC);
	            break;
	        case 18:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 886;
	            this.match(Java8Parser.FINAL);
	            break;
	        case 46:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 887;
	            this.match(Java8Parser.TRANSIENT);
	            break;
	        case 49:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 888;
	            this.match(Java8Parser.VOLATILE);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	variableDeclaratorList() {
	    let localctx = new VariableDeclaratorListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 108, Java8Parser.RULE_variableDeclaratorList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 891;
	        this.variableDeclarator();
	        this.state = 896;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===64) {
	            this.state = 892;
	            this.match(Java8Parser.COMMA);
	            this.state = 893;
	            this.variableDeclarator();
	            this.state = 898;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	variableDeclarator() {
	    let localctx = new VariableDeclaratorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 110, Java8Parser.RULE_variableDeclarator);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 899;
	        this.variableDeclaratorId();
	        this.state = 902;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===66) {
	            this.state = 900;
	            this.match(Java8Parser.ASSIGN);
	            this.state = 901;
	            this.variableInitializer();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	variableDeclaratorId() {
	    let localctx = new VariableDeclaratorIdContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 112, Java8Parser.RULE_variableDeclaratorId);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 904;
	        this.match(Java8Parser.Identifier);
	        this.state = 906;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===61 || _la===103) {
	            this.state = 905;
	            this.dims();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	variableInitializer() {
	    let localctx = new VariableInitializerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 114, Java8Parser.RULE_variableInitializer);
	    try {
	        this.state = 910;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 3:
	        case 5:
	        case 8:
	        case 14:
	        case 20:
	        case 27:
	        case 29:
	        case 31:
	        case 37:
	        case 40:
	        case 43:
	        case 48:
	        case 51:
	        case 52:
	        case 53:
	        case 54:
	        case 55:
	        case 56:
	        case 57:
	        case 69:
	        case 70:
	        case 79:
	        case 80:
	        case 81:
	        case 82:
	        case 102:
	        case 103:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 908;
	            this.expression();
	            break;
	        case 59:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 909;
	            this.arrayInitializer();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unannType() {
	    let localctx = new UnannTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 116, Java8Parser.RULE_unannType);
	    try {
	        this.state = 914;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,61,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 912;
	            this.unannPrimitiveType();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 913;
	            this.unannReferenceType();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unannPrimitiveType() {
	    let localctx = new UnannPrimitiveTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 118, Java8Parser.RULE_unannPrimitiveType);
	    try {
	        this.state = 918;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 5:
	        case 8:
	        case 14:
	        case 20:
	        case 27:
	        case 29:
	        case 37:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 916;
	            this.numericType();
	            break;
	        case 3:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 917;
	            this.match(Java8Parser.BOOLEAN);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unannReferenceType() {
	    let localctx = new UnannReferenceTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 120, Java8Parser.RULE_unannReferenceType);
	    try {
	        this.state = 923;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,63,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 920;
	            this.unannClassOrInterfaceType();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 921;
	            this.unannTypeVariable();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 922;
	            this.unannArrayType();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unannClassOrInterfaceType() {
	    let localctx = new UnannClassOrInterfaceTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 122, Java8Parser.RULE_unannClassOrInterfaceType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 927;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,64,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 925;
	            this.unannClassType_lfno_unannClassOrInterfaceType();
	            break;

	        case 2:
	            this.state = 926;
	            this.unannInterfaceType_lfno_unannClassOrInterfaceType();
	            break;

	        }
	        this.state = 933;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,66,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 931;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,65,this._ctx);
	                switch(la_) {
	                case 1:
	                    this.state = 929;
	                    this.unannClassType_lf_unannClassOrInterfaceType();
	                    break;

	                case 2:
	                    this.state = 930;
	                    this.unannInterfaceType_lf_unannClassOrInterfaceType();
	                    break;

	                } 
	            }
	            this.state = 935;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,66,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unannClassType() {
	    let localctx = new UnannClassTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 124, Java8Parser.RULE_unannClassType);
	    var _la = 0;
	    try {
	        this.state = 952;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,70,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 936;
	            this.match(Java8Parser.Identifier);
	            this.state = 938;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===68) {
	                this.state = 937;
	                this.typeArguments();
	            }

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 940;
	            this.unannClassOrInterfaceType();
	            this.state = 941;
	            this.match(Java8Parser.DOT);
	            this.state = 945;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===103) {
	                this.state = 942;
	                this.annotation();
	                this.state = 947;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 948;
	            this.match(Java8Parser.Identifier);
	            this.state = 950;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===68) {
	                this.state = 949;
	                this.typeArguments();
	            }

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unannClassType_lf_unannClassOrInterfaceType() {
	    let localctx = new UnannClassType_lf_unannClassOrInterfaceTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 126, Java8Parser.RULE_unannClassType_lf_unannClassOrInterfaceType);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 954;
	        this.match(Java8Parser.DOT);
	        this.state = 958;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===103) {
	            this.state = 955;
	            this.annotation();
	            this.state = 960;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 961;
	        this.match(Java8Parser.Identifier);
	        this.state = 963;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===68) {
	            this.state = 962;
	            this.typeArguments();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unannClassType_lfno_unannClassOrInterfaceType() {
	    let localctx = new UnannClassType_lfno_unannClassOrInterfaceTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 128, Java8Parser.RULE_unannClassType_lfno_unannClassOrInterfaceType);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 965;
	        this.match(Java8Parser.Identifier);
	        this.state = 967;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===68) {
	            this.state = 966;
	            this.typeArguments();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unannInterfaceType() {
	    let localctx = new UnannInterfaceTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 130, Java8Parser.RULE_unannInterfaceType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 969;
	        this.unannClassType();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unannInterfaceType_lf_unannClassOrInterfaceType() {
	    let localctx = new UnannInterfaceType_lf_unannClassOrInterfaceTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 132, Java8Parser.RULE_unannInterfaceType_lf_unannClassOrInterfaceType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 971;
	        this.unannClassType_lf_unannClassOrInterfaceType();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unannInterfaceType_lfno_unannClassOrInterfaceType() {
	    let localctx = new UnannInterfaceType_lfno_unannClassOrInterfaceTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 134, Java8Parser.RULE_unannInterfaceType_lfno_unannClassOrInterfaceType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 973;
	        this.unannClassType_lfno_unannClassOrInterfaceType();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unannTypeVariable() {
	    let localctx = new UnannTypeVariableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 136, Java8Parser.RULE_unannTypeVariable);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 975;
	        this.match(Java8Parser.Identifier);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unannArrayType() {
	    let localctx = new UnannArrayTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 138, Java8Parser.RULE_unannArrayType);
	    try {
	        this.state = 986;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,74,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 977;
	            this.unannPrimitiveType();
	            this.state = 978;
	            this.dims();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 980;
	            this.unannClassOrInterfaceType();
	            this.state = 981;
	            this.dims();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 983;
	            this.unannTypeVariable();
	            this.state = 984;
	            this.dims();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	methodDeclaration() {
	    let localctx = new MethodDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 140, Java8Parser.RULE_methodDeclaration);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 991;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) === 0 && ((1 << _la) & 1074003970) !== 0) || ((((_la - 33)) & ~0x1f) === 0 && ((1 << (_la - 33)) & 615) !== 0) || _la===103) {
	            this.state = 988;
	            this.methodModifier();
	            this.state = 993;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 994;
	        this.methodHeader();
	        this.state = 995;
	        this.methodBody();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	methodModifier() {
	    let localctx = new MethodModifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 142, Java8Parser.RULE_methodModifier);
	    try {
	        this.state = 1007;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 103:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 997;
	            this.annotation();
	            break;
	        case 35:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 998;
	            this.match(Java8Parser.PUBLIC);
	            break;
	        case 34:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 999;
	            this.match(Java8Parser.PROTECTED);
	            break;
	        case 33:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1000;
	            this.match(Java8Parser.PRIVATE);
	            break;
	        case 1:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1001;
	            this.match(Java8Parser.ABSTRACT);
	            break;
	        case 38:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1002;
	            this.match(Java8Parser.STATIC);
	            break;
	        case 18:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 1003;
	            this.match(Java8Parser.FINAL);
	            break;
	        case 42:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 1004;
	            this.match(Java8Parser.SYNCHRONIZED);
	            break;
	        case 30:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 1005;
	            this.match(Java8Parser.NATIVE);
	            break;
	        case 39:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 1006;
	            this.match(Java8Parser.STRICTFP);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	methodHeader() {
	    let localctx = new MethodHeaderContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 144, Java8Parser.RULE_methodHeader);
	    var _la = 0;
	    try {
	        this.state = 1026;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 3:
	        case 5:
	        case 8:
	        case 14:
	        case 20:
	        case 27:
	        case 29:
	        case 37:
	        case 48:
	        case 102:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1009;
	            this.result();
	            this.state = 1010;
	            this.methodDeclarator();
	            this.state = 1012;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===45) {
	                this.state = 1011;
	                this.throws_();
	            }

	            break;
	        case 68:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1014;
	            this.typeParameters();
	            this.state = 1018;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===103) {
	                this.state = 1015;
	                this.annotation();
	                this.state = 1020;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1021;
	            this.result();
	            this.state = 1022;
	            this.methodDeclarator();
	            this.state = 1024;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===45) {
	                this.state = 1023;
	                this.throws_();
	            }

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	result() {
	    let localctx = new ResultContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 146, Java8Parser.RULE_result);
	    try {
	        this.state = 1030;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 3:
	        case 5:
	        case 8:
	        case 14:
	        case 20:
	        case 27:
	        case 29:
	        case 37:
	        case 102:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1028;
	            this.unannType();
	            break;
	        case 48:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1029;
	            this.match(Java8Parser.VOID);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	methodDeclarator() {
	    let localctx = new MethodDeclaratorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 148, Java8Parser.RULE_methodDeclarator);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1032;
	        this.match(Java8Parser.Identifier);
	        this.state = 1033;
	        this.match(Java8Parser.LPAREN);
	        this.state = 1035;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 672416040) !== 0) || _la===37 || _la===102 || _la===103) {
	            this.state = 1034;
	            this.formalParameterList();
	        }

	        this.state = 1037;
	        this.match(Java8Parser.RPAREN);
	        this.state = 1039;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===61 || _la===103) {
	            this.state = 1038;
	            this.dims();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	formalParameterList() {
	    let localctx = new FormalParameterListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 150, Java8Parser.RULE_formalParameterList);
	    try {
	        this.state = 1046;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,84,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1041;
	            this.formalParameters();
	            this.state = 1042;
	            this.match(Java8Parser.COMMA);
	            this.state = 1043;
	            this.lastFormalParameter();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1045;
	            this.lastFormalParameter();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	formalParameters() {
	    let localctx = new FormalParametersContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 152, Java8Parser.RULE_formalParameters);
	    try {
	        this.state = 1064;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,87,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1048;
	            this.formalParameter();
	            this.state = 1053;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,85,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 1049;
	                    this.match(Java8Parser.COMMA);
	                    this.state = 1050;
	                    this.formalParameter(); 
	                }
	                this.state = 1055;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,85,this._ctx);
	            }

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1056;
	            this.receiverParameter();
	            this.state = 1061;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,86,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 1057;
	                    this.match(Java8Parser.COMMA);
	                    this.state = 1058;
	                    this.formalParameter(); 
	                }
	                this.state = 1063;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,86,this._ctx);
	            }

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	formalParameter() {
	    let localctx = new FormalParameterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 154, Java8Parser.RULE_formalParameter);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1069;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===18 || _la===103) {
	            this.state = 1066;
	            this.variableModifier();
	            this.state = 1071;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1072;
	        this.unannType();
	        this.state = 1073;
	        this.variableDeclaratorId();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	variableModifier() {
	    let localctx = new VariableModifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 156, Java8Parser.RULE_variableModifier);
	    try {
	        this.state = 1077;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 103:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1075;
	            this.annotation();
	            break;
	        case 18:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1076;
	            this.match(Java8Parser.FINAL);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lastFormalParameter() {
	    let localctx = new LastFormalParameterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 158, Java8Parser.RULE_lastFormalParameter);
	    var _la = 0;
	    try {
	        this.state = 1096;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,92,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1082;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===18 || _la===103) {
	                this.state = 1079;
	                this.variableModifier();
	                this.state = 1084;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1085;
	            this.unannType();
	            this.state = 1089;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===103) {
	                this.state = 1086;
	                this.annotation();
	                this.state = 1091;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1092;
	            this.match(Java8Parser.ELLIPSIS);
	            this.state = 1093;
	            this.variableDeclaratorId();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1095;
	            this.formalParameter();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	receiverParameter() {
	    let localctx = new ReceiverParameterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 160, Java8Parser.RULE_receiverParameter);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1101;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===103) {
	            this.state = 1098;
	            this.annotation();
	            this.state = 1103;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1104;
	        this.unannType();
	        this.state = 1107;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===102) {
	            this.state = 1105;
	            this.match(Java8Parser.Identifier);
	            this.state = 1106;
	            this.match(Java8Parser.DOT);
	        }

	        this.state = 1109;
	        this.match(Java8Parser.THIS);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	throws_() {
	    let localctx = new Throws_Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 162, Java8Parser.RULE_throws_);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1111;
	        this.match(Java8Parser.THROWS);
	        this.state = 1112;
	        this.exceptionTypeList();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	exceptionTypeList() {
	    let localctx = new ExceptionTypeListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 164, Java8Parser.RULE_exceptionTypeList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1114;
	        this.exceptionType();
	        this.state = 1119;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===64) {
	            this.state = 1115;
	            this.match(Java8Parser.COMMA);
	            this.state = 1116;
	            this.exceptionType();
	            this.state = 1121;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	exceptionType() {
	    let localctx = new ExceptionTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 166, Java8Parser.RULE_exceptionType);
	    try {
	        this.state = 1124;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,96,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1122;
	            this.classType();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1123;
	            this.typeVariable();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	methodBody() {
	    let localctx = new MethodBodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 168, Java8Parser.RULE_methodBody);
	    try {
	        this.state = 1128;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 59:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1126;
	            this.block();
	            break;
	        case 63:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1127;
	            this.match(Java8Parser.SEMI);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	instanceInitializer() {
	    let localctx = new InstanceInitializerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 170, Java8Parser.RULE_instanceInitializer);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1130;
	        this.block();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	staticInitializer() {
	    let localctx = new StaticInitializerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 172, Java8Parser.RULE_staticInitializer);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1132;
	        this.match(Java8Parser.STATIC);
	        this.state = 1133;
	        this.block();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constructorDeclaration() {
	    let localctx = new ConstructorDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 174, Java8Parser.RULE_constructorDeclaration);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1138;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(((((_la - 33)) & ~0x1f) === 0 && ((1 << (_la - 33)) & 7) !== 0) || _la===103) {
	            this.state = 1135;
	            this.constructorModifier();
	            this.state = 1140;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1141;
	        this.constructorDeclarator();
	        this.state = 1143;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===45) {
	            this.state = 1142;
	            this.throws_();
	        }

	        this.state = 1145;
	        this.constructorBody();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constructorModifier() {
	    let localctx = new ConstructorModifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 176, Java8Parser.RULE_constructorModifier);
	    try {
	        this.state = 1151;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 103:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1147;
	            this.annotation();
	            break;
	        case 35:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1148;
	            this.match(Java8Parser.PUBLIC);
	            break;
	        case 34:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1149;
	            this.match(Java8Parser.PROTECTED);
	            break;
	        case 33:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1150;
	            this.match(Java8Parser.PRIVATE);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constructorDeclarator() {
	    let localctx = new ConstructorDeclaratorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 178, Java8Parser.RULE_constructorDeclarator);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1154;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===68) {
	            this.state = 1153;
	            this.typeParameters();
	        }

	        this.state = 1156;
	        this.simpleTypeName();
	        this.state = 1157;
	        this.match(Java8Parser.LPAREN);
	        this.state = 1159;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 672416040) !== 0) || _la===37 || _la===102 || _la===103) {
	            this.state = 1158;
	            this.formalParameterList();
	        }

	        this.state = 1161;
	        this.match(Java8Parser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simpleTypeName() {
	    let localctx = new SimpleTypeNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 180, Java8Parser.RULE_simpleTypeName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1163;
	        this.match(Java8Parser.Identifier);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constructorBody() {
	    let localctx = new ConstructorBodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 182, Java8Parser.RULE_constructorBody);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1165;
	        this.match(Java8Parser.LBRACE);
	        this.state = 1167;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,103,this._ctx);
	        if(la_===1) {
	            this.state = 1166;
	            this.explicitConstructorInvocation();

	        }
	        this.state = 1170;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 2826267454) !== 0) || ((((_la - 33)) & ~0x1f) === 0 && ((1 << (_la - 33)) & 1174327295) !== 0) || ((((_la - 79)) & ~0x1f) === 0 && ((1 << (_la - 79)) & 25165827) !== 0)) {
	            this.state = 1169;
	            this.blockStatements();
	        }

	        this.state = 1172;
	        this.match(Java8Parser.RBRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	explicitConstructorInvocation() {
	    let localctx = new ExplicitConstructorInvocationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 184, Java8Parser.RULE_explicitConstructorInvocation);
	    var _la = 0;
	    try {
	        this.state = 1220;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,113,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1175;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===68) {
	                this.state = 1174;
	                this.typeArguments();
	            }

	            this.state = 1177;
	            this.match(Java8Parser.THIS);
	            this.state = 1178;
	            this.match(Java8Parser.LPAREN);
	            this.state = 1180;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 2819637544) !== 0) || ((((_la - 37)) & ~0x1f) === 0 && ((1 << (_la - 37)) & 2082889) !== 0) || ((((_la - 69)) & ~0x1f) === 0 && ((1 << (_la - 69)) & 15363) !== 0) || _la===102 || _la===103) {
	                this.state = 1179;
	                this.argumentList();
	            }

	            this.state = 1182;
	            this.match(Java8Parser.RPAREN);
	            this.state = 1183;
	            this.match(Java8Parser.SEMI);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1185;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===68) {
	                this.state = 1184;
	                this.typeArguments();
	            }

	            this.state = 1187;
	            this.match(Java8Parser.SUPER);
	            this.state = 1188;
	            this.match(Java8Parser.LPAREN);
	            this.state = 1190;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 2819637544) !== 0) || ((((_la - 37)) & ~0x1f) === 0 && ((1 << (_la - 37)) & 2082889) !== 0) || ((((_la - 69)) & ~0x1f) === 0 && ((1 << (_la - 69)) & 15363) !== 0) || _la===102 || _la===103) {
	                this.state = 1189;
	                this.argumentList();
	            }

	            this.state = 1192;
	            this.match(Java8Parser.RPAREN);
	            this.state = 1193;
	            this.match(Java8Parser.SEMI);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1194;
	            this.expressionName();
	            this.state = 1195;
	            this.match(Java8Parser.DOT);
	            this.state = 1197;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===68) {
	                this.state = 1196;
	                this.typeArguments();
	            }

	            this.state = 1199;
	            this.match(Java8Parser.SUPER);
	            this.state = 1200;
	            this.match(Java8Parser.LPAREN);
	            this.state = 1202;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 2819637544) !== 0) || ((((_la - 37)) & ~0x1f) === 0 && ((1 << (_la - 37)) & 2082889) !== 0) || ((((_la - 69)) & ~0x1f) === 0 && ((1 << (_la - 69)) & 15363) !== 0) || _la===102 || _la===103) {
	                this.state = 1201;
	                this.argumentList();
	            }

	            this.state = 1204;
	            this.match(Java8Parser.RPAREN);
	            this.state = 1205;
	            this.match(Java8Parser.SEMI);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1207;
	            this.primary();
	            this.state = 1208;
	            this.match(Java8Parser.DOT);
	            this.state = 1210;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===68) {
	                this.state = 1209;
	                this.typeArguments();
	            }

	            this.state = 1212;
	            this.match(Java8Parser.SUPER);
	            this.state = 1213;
	            this.match(Java8Parser.LPAREN);
	            this.state = 1215;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 2819637544) !== 0) || ((((_la - 37)) & ~0x1f) === 0 && ((1 << (_la - 37)) & 2082889) !== 0) || ((((_la - 69)) & ~0x1f) === 0 && ((1 << (_la - 69)) & 15363) !== 0) || _la===102 || _la===103) {
	                this.state = 1214;
	                this.argumentList();
	            }

	            this.state = 1217;
	            this.match(Java8Parser.RPAREN);
	            this.state = 1218;
	            this.match(Java8Parser.SEMI);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enumDeclaration() {
	    let localctx = new EnumDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 186, Java8Parser.RULE_enumDeclaration);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1225;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===1 || _la===18 || ((((_la - 33)) & ~0x1f) === 0 && ((1 << (_la - 33)) & 103) !== 0) || _la===103) {
	            this.state = 1222;
	            this.classModifier();
	            this.state = 1227;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1228;
	        this.match(Java8Parser.ENUM);
	        this.state = 1229;
	        this.match(Java8Parser.Identifier);
	        this.state = 1231;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===24) {
	            this.state = 1230;
	            this.superinterfaces();
	        }

	        this.state = 1233;
	        this.enumBody();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enumBody() {
	    let localctx = new EnumBodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 188, Java8Parser.RULE_enumBody);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1235;
	        this.match(Java8Parser.LBRACE);
	        this.state = 1237;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===102 || _la===103) {
	            this.state = 1236;
	            this.enumConstantList();
	        }

	        this.state = 1240;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===64) {
	            this.state = 1239;
	            this.match(Java8Parser.COMMA);
	        }

	        this.state = 1243;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===63) {
	            this.state = 1242;
	            this.enumBodyDeclarations();
	        }

	        this.state = 1245;
	        this.match(Java8Parser.RBRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enumConstantList() {
	    let localctx = new EnumConstantListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 190, Java8Parser.RULE_enumConstantList);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1247;
	        this.enumConstant();
	        this.state = 1252;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,119,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1248;
	                this.match(Java8Parser.COMMA);
	                this.state = 1249;
	                this.enumConstant(); 
	            }
	            this.state = 1254;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,119,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enumConstant() {
	    let localctx = new EnumConstantContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 192, Java8Parser.RULE_enumConstant);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1258;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===103) {
	            this.state = 1255;
	            this.enumConstantModifier();
	            this.state = 1260;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1261;
	        this.match(Java8Parser.Identifier);
	        this.state = 1267;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===57) {
	            this.state = 1262;
	            this.match(Java8Parser.LPAREN);
	            this.state = 1264;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 2819637544) !== 0) || ((((_la - 37)) & ~0x1f) === 0 && ((1 << (_la - 37)) & 2082889) !== 0) || ((((_la - 69)) & ~0x1f) === 0 && ((1 << (_la - 69)) & 15363) !== 0) || _la===102 || _la===103) {
	                this.state = 1263;
	                this.argumentList();
	            }

	            this.state = 1266;
	            this.match(Java8Parser.RPAREN);
	        }

	        this.state = 1270;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===59) {
	            this.state = 1269;
	            this.classBody();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enumConstantModifier() {
	    let localctx = new EnumConstantModifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 194, Java8Parser.RULE_enumConstantModifier);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1272;
	        this.annotation();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enumBodyDeclarations() {
	    let localctx = new EnumBodyDeclarationsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 196, Java8Parser.RULE_enumBodyDeclarations);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1274;
	        this.match(Java8Parser.SEMI);
	        this.state = 1278;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) === 0 && ((1 << _la) & 2014659370) !== 0) || ((((_la - 33)) & ~0x1f) === 0 && ((1 << (_la - 33)) & 1140957815) !== 0) || _la===68 || _la===102 || _la===103) {
	            this.state = 1275;
	            this.classBodyDeclaration();
	            this.state = 1280;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	interfaceDeclaration() {
	    let localctx = new InterfaceDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 198, Java8Parser.RULE_interfaceDeclaration);
	    try {
	        this.state = 1283;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,125,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1281;
	            this.normalInterfaceDeclaration();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1282;
	            this.annotationTypeDeclaration();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	normalInterfaceDeclaration() {
	    let localctx = new NormalInterfaceDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 200, Java8Parser.RULE_normalInterfaceDeclaration);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1288;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===1 || ((((_la - 33)) & ~0x1f) === 0 && ((1 << (_la - 33)) & 103) !== 0) || _la===103) {
	            this.state = 1285;
	            this.interfaceModifier();
	            this.state = 1290;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1291;
	        this.match(Java8Parser.INTERFACE);
	        this.state = 1292;
	        this.match(Java8Parser.Identifier);
	        this.state = 1294;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===68) {
	            this.state = 1293;
	            this.typeParameters();
	        }

	        this.state = 1297;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===17) {
	            this.state = 1296;
	            this.extendsInterfaces();
	        }

	        this.state = 1299;
	        this.interfaceBody();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	interfaceModifier() {
	    let localctx = new InterfaceModifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 202, Java8Parser.RULE_interfaceModifier);
	    try {
	        this.state = 1308;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 103:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1301;
	            this.annotation();
	            break;
	        case 35:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1302;
	            this.match(Java8Parser.PUBLIC);
	            break;
	        case 34:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1303;
	            this.match(Java8Parser.PROTECTED);
	            break;
	        case 33:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1304;
	            this.match(Java8Parser.PRIVATE);
	            break;
	        case 1:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1305;
	            this.match(Java8Parser.ABSTRACT);
	            break;
	        case 38:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1306;
	            this.match(Java8Parser.STATIC);
	            break;
	        case 39:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 1307;
	            this.match(Java8Parser.STRICTFP);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	extendsInterfaces() {
	    let localctx = new ExtendsInterfacesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 204, Java8Parser.RULE_extendsInterfaces);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1310;
	        this.match(Java8Parser.EXTENDS);
	        this.state = 1311;
	        this.interfaceTypeList();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	interfaceBody() {
	    let localctx = new InterfaceBodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 206, Java8Parser.RULE_interfaceBody);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1313;
	        this.match(Java8Parser.LBRACE);
	        this.state = 1317;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) === 0 && ((1 << _la) & 940921642) !== 0) || ((((_la - 33)) & ~0x1f) === 0 && ((1 << (_la - 33)) & 1073774711) !== 0) || _la===68 || _la===102 || _la===103) {
	            this.state = 1314;
	            this.interfaceMemberDeclaration();
	            this.state = 1319;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1320;
	        this.match(Java8Parser.RBRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	interfaceMemberDeclaration() {
	    let localctx = new InterfaceMemberDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 208, Java8Parser.RULE_interfaceMemberDeclaration);
	    try {
	        this.state = 1327;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,131,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1322;
	            this.constantDeclaration();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1323;
	            this.interfaceMethodDeclaration();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1324;
	            this.classDeclaration();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1325;
	            this.interfaceDeclaration();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1326;
	            this.match(Java8Parser.SEMI);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constantDeclaration() {
	    let localctx = new ConstantDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 210, Java8Parser.RULE_constantDeclaration);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1332;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(((((_la - 18)) & ~0x1f) === 0 && ((1 << (_la - 18)) & 1179649) !== 0) || _la===103) {
	            this.state = 1329;
	            this.constantModifier();
	            this.state = 1334;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1335;
	        this.unannType();
	        this.state = 1336;
	        this.variableDeclaratorList();
	        this.state = 1337;
	        this.match(Java8Parser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constantModifier() {
	    let localctx = new ConstantModifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 212, Java8Parser.RULE_constantModifier);
	    try {
	        this.state = 1343;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 103:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1339;
	            this.annotation();
	            break;
	        case 35:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1340;
	            this.match(Java8Parser.PUBLIC);
	            break;
	        case 38:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1341;
	            this.match(Java8Parser.STATIC);
	            break;
	        case 18:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1342;
	            this.match(Java8Parser.FINAL);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	interfaceMethodDeclaration() {
	    let localctx = new InterfaceMethodDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 214, Java8Parser.RULE_interfaceMethodDeclaration);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1348;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===1 || _la===12 || ((((_la - 35)) & ~0x1f) === 0 && ((1 << (_la - 35)) & 25) !== 0) || _la===103) {
	            this.state = 1345;
	            this.interfaceMethodModifier();
	            this.state = 1350;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1351;
	        this.methodHeader();
	        this.state = 1352;
	        this.methodBody();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	interfaceMethodModifier() {
	    let localctx = new InterfaceMethodModifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 216, Java8Parser.RULE_interfaceMethodModifier);
	    try {
	        this.state = 1360;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 103:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1354;
	            this.annotation();
	            break;
	        case 35:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1355;
	            this.match(Java8Parser.PUBLIC);
	            break;
	        case 1:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1356;
	            this.match(Java8Parser.ABSTRACT);
	            break;
	        case 12:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1357;
	            this.match(Java8Parser.DEFAULT);
	            break;
	        case 38:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1358;
	            this.match(Java8Parser.STATIC);
	            break;
	        case 39:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1359;
	            this.match(Java8Parser.STRICTFP);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	annotationTypeDeclaration() {
	    let localctx = new AnnotationTypeDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 218, Java8Parser.RULE_annotationTypeDeclaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1365;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,136,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1362;
	                this.interfaceModifier(); 
	            }
	            this.state = 1367;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,136,this._ctx);
	        }

	        this.state = 1368;
	        this.match(Java8Parser.AT);
	        this.state = 1369;
	        this.match(Java8Parser.INTERFACE);
	        this.state = 1370;
	        this.match(Java8Parser.Identifier);
	        this.state = 1371;
	        this.annotationTypeBody();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	annotationTypeBody() {
	    let localctx = new AnnotationTypeBodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 220, Java8Parser.RULE_annotationTypeBody);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1373;
	        this.match(Java8Parser.LBRACE);
	        this.state = 1377;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) === 0 && ((1 << _la) & 940917546) !== 0) || ((((_la - 33)) & ~0x1f) === 0 && ((1 << (_la - 33)) & 1073741943) !== 0) || _la===102 || _la===103) {
	            this.state = 1374;
	            this.annotationTypeMemberDeclaration();
	            this.state = 1379;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1380;
	        this.match(Java8Parser.RBRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	annotationTypeMemberDeclaration() {
	    let localctx = new AnnotationTypeMemberDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 222, Java8Parser.RULE_annotationTypeMemberDeclaration);
	    try {
	        this.state = 1387;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,138,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1382;
	            this.annotationTypeElementDeclaration();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1383;
	            this.constantDeclaration();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1384;
	            this.classDeclaration();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1385;
	            this.interfaceDeclaration();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1386;
	            this.match(Java8Parser.SEMI);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	annotationTypeElementDeclaration() {
	    let localctx = new AnnotationTypeElementDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 224, Java8Parser.RULE_annotationTypeElementDeclaration);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1392;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===1 || _la===35 || _la===103) {
	            this.state = 1389;
	            this.annotationTypeElementModifier();
	            this.state = 1394;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1395;
	        this.unannType();
	        this.state = 1396;
	        this.match(Java8Parser.Identifier);
	        this.state = 1397;
	        this.match(Java8Parser.LPAREN);
	        this.state = 1398;
	        this.match(Java8Parser.RPAREN);
	        this.state = 1400;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===61 || _la===103) {
	            this.state = 1399;
	            this.dims();
	        }

	        this.state = 1403;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===12) {
	            this.state = 1402;
	            this.defaultValue();
	        }

	        this.state = 1405;
	        this.match(Java8Parser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	annotationTypeElementModifier() {
	    let localctx = new AnnotationTypeElementModifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 226, Java8Parser.RULE_annotationTypeElementModifier);
	    try {
	        this.state = 1410;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 103:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1407;
	            this.annotation();
	            break;
	        case 35:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1408;
	            this.match(Java8Parser.PUBLIC);
	            break;
	        case 1:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1409;
	            this.match(Java8Parser.ABSTRACT);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	defaultValue() {
	    let localctx = new DefaultValueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 228, Java8Parser.RULE_defaultValue);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1412;
	        this.match(Java8Parser.DEFAULT);
	        this.state = 1413;
	        this.elementValue();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	annotation() {
	    let localctx = new AnnotationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 230, Java8Parser.RULE_annotation);
	    try {
	        this.state = 1418;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,143,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1415;
	            this.normalAnnotation();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1416;
	            this.markerAnnotation();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1417;
	            this.singleElementAnnotation();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	normalAnnotation() {
	    let localctx = new NormalAnnotationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 232, Java8Parser.RULE_normalAnnotation);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1420;
	        this.match(Java8Parser.AT);
	        this.state = 1421;
	        this.typeName();
	        this.state = 1422;
	        this.match(Java8Parser.LPAREN);
	        this.state = 1424;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===102) {
	            this.state = 1423;
	            this.elementValuePairList();
	        }

	        this.state = 1426;
	        this.match(Java8Parser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	elementValuePairList() {
	    let localctx = new ElementValuePairListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 234, Java8Parser.RULE_elementValuePairList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1428;
	        this.elementValuePair();
	        this.state = 1433;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===64) {
	            this.state = 1429;
	            this.match(Java8Parser.COMMA);
	            this.state = 1430;
	            this.elementValuePair();
	            this.state = 1435;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	elementValuePair() {
	    let localctx = new ElementValuePairContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 236, Java8Parser.RULE_elementValuePair);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1436;
	        this.match(Java8Parser.Identifier);
	        this.state = 1437;
	        this.match(Java8Parser.ASSIGN);
	        this.state = 1438;
	        this.elementValue();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	elementValue() {
	    let localctx = new ElementValueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 238, Java8Parser.RULE_elementValue);
	    try {
	        this.state = 1443;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,146,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1440;
	            this.conditionalExpression();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1441;
	            this.elementValueArrayInitializer();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1442;
	            this.annotation();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	elementValueArrayInitializer() {
	    let localctx = new ElementValueArrayInitializerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 240, Java8Parser.RULE_elementValueArrayInitializer);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1445;
	        this.match(Java8Parser.LBRACE);
	        this.state = 1447;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 2819637544) !== 0) || ((((_la - 37)) & ~0x1f) === 0 && ((1 << (_la - 37)) & 6277193) !== 0) || ((((_la - 69)) & ~0x1f) === 0 && ((1 << (_la - 69)) & 15363) !== 0) || _la===102 || _la===103) {
	            this.state = 1446;
	            this.elementValueList();
	        }

	        this.state = 1450;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===64) {
	            this.state = 1449;
	            this.match(Java8Parser.COMMA);
	        }

	        this.state = 1452;
	        this.match(Java8Parser.RBRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	elementValueList() {
	    let localctx = new ElementValueListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 242, Java8Parser.RULE_elementValueList);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1454;
	        this.elementValue();
	        this.state = 1459;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,149,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1455;
	                this.match(Java8Parser.COMMA);
	                this.state = 1456;
	                this.elementValue(); 
	            }
	            this.state = 1461;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,149,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	markerAnnotation() {
	    let localctx = new MarkerAnnotationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 244, Java8Parser.RULE_markerAnnotation);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1462;
	        this.match(Java8Parser.AT);
	        this.state = 1463;
	        this.typeName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	singleElementAnnotation() {
	    let localctx = new SingleElementAnnotationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 246, Java8Parser.RULE_singleElementAnnotation);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1465;
	        this.match(Java8Parser.AT);
	        this.state = 1466;
	        this.typeName();
	        this.state = 1467;
	        this.match(Java8Parser.LPAREN);
	        this.state = 1468;
	        this.elementValue();
	        this.state = 1469;
	        this.match(Java8Parser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	arrayInitializer() {
	    let localctx = new ArrayInitializerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 248, Java8Parser.RULE_arrayInitializer);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1471;
	        this.match(Java8Parser.LBRACE);
	        this.state = 1473;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 2819637544) !== 0) || ((((_la - 37)) & ~0x1f) === 0 && ((1 << (_la - 37)) & 6277193) !== 0) || ((((_la - 69)) & ~0x1f) === 0 && ((1 << (_la - 69)) & 15363) !== 0) || _la===102 || _la===103) {
	            this.state = 1472;
	            this.variableInitializerList();
	        }

	        this.state = 1476;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===64) {
	            this.state = 1475;
	            this.match(Java8Parser.COMMA);
	        }

	        this.state = 1478;
	        this.match(Java8Parser.RBRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	variableInitializerList() {
	    let localctx = new VariableInitializerListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 250, Java8Parser.RULE_variableInitializerList);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1480;
	        this.variableInitializer();
	        this.state = 1485;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,152,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1481;
	                this.match(Java8Parser.COMMA);
	                this.state = 1482;
	                this.variableInitializer(); 
	            }
	            this.state = 1487;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,152,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	block() {
	    let localctx = new BlockContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 252, Java8Parser.RULE_block);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1488;
	        this.match(Java8Parser.LBRACE);
	        this.state = 1490;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 2826267454) !== 0) || ((((_la - 33)) & ~0x1f) === 0 && ((1 << (_la - 33)) & 1174327295) !== 0) || ((((_la - 79)) & ~0x1f) === 0 && ((1 << (_la - 79)) & 25165827) !== 0)) {
	            this.state = 1489;
	            this.blockStatements();
	        }

	        this.state = 1492;
	        this.match(Java8Parser.RBRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	blockStatements() {
	    let localctx = new BlockStatementsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 254, Java8Parser.RULE_blockStatements);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1494;
	        this.blockStatement();
	        this.state = 1498;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) === 0 && ((1 << _la) & 2826267454) !== 0) || ((((_la - 33)) & ~0x1f) === 0 && ((1 << (_la - 33)) & 1174327295) !== 0) || ((((_la - 79)) & ~0x1f) === 0 && ((1 << (_la - 79)) & 25165827) !== 0)) {
	            this.state = 1495;
	            this.blockStatement();
	            this.state = 1500;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	blockStatement() {
	    let localctx = new BlockStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 256, Java8Parser.RULE_blockStatement);
	    try {
	        this.state = 1504;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,155,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1501;
	            this.localVariableDeclarationStatement();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1502;
	            this.classDeclaration();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1503;
	            this.statement();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	localVariableDeclarationStatement() {
	    let localctx = new LocalVariableDeclarationStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 258, Java8Parser.RULE_localVariableDeclarationStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1506;
	        this.localVariableDeclaration();
	        this.state = 1507;
	        this.match(Java8Parser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	localVariableDeclaration() {
	    let localctx = new LocalVariableDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 260, Java8Parser.RULE_localVariableDeclaration);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1512;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===18 || _la===103) {
	            this.state = 1509;
	            this.variableModifier();
	            this.state = 1514;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1515;
	        this.unannType();
	        this.state = 1516;
	        this.variableDeclaratorList();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	statement() {
	    let localctx = new StatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 262, Java8Parser.RULE_statement);
	    try {
	        this.state = 1524;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,157,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1518;
	            this.statementWithoutTrailingSubstatement();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1519;
	            this.labeledStatement();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1520;
	            this.ifThenStatement();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1521;
	            this.ifThenElseStatement();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1522;
	            this.whileStatement();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1523;
	            this.forStatement();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	statementNoShortIf() {
	    let localctx = new StatementNoShortIfContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 264, Java8Parser.RULE_statementNoShortIf);
	    try {
	        this.state = 1531;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,158,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1526;
	            this.statementWithoutTrailingSubstatement();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1527;
	            this.labeledStatementNoShortIf();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1528;
	            this.ifThenElseStatementNoShortIf();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1529;
	            this.whileStatementNoShortIf();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1530;
	            this.forStatementNoShortIf();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	statementWithoutTrailingSubstatement() {
	    let localctx = new StatementWithoutTrailingSubstatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 266, Java8Parser.RULE_statementWithoutTrailingSubstatement);
	    try {
	        this.state = 1545;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 59:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1533;
	            this.block();
	            break;
	        case 63:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1534;
	            this.emptyStatement();
	            break;
	        case 3:
	        case 5:
	        case 8:
	        case 14:
	        case 20:
	        case 27:
	        case 29:
	        case 31:
	        case 37:
	        case 40:
	        case 43:
	        case 48:
	        case 51:
	        case 52:
	        case 53:
	        case 54:
	        case 55:
	        case 56:
	        case 57:
	        case 79:
	        case 80:
	        case 102:
	        case 103:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1535;
	            this.expressionStatement();
	            break;
	        case 2:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1536;
	            this.assertStatement();
	            break;
	        case 41:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1537;
	            this.switchStatement();
	            break;
	        case 13:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1538;
	            this.doStatement();
	            break;
	        case 4:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 1539;
	            this.breakStatement();
	            break;
	        case 11:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 1540;
	            this.continueStatement();
	            break;
	        case 36:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 1541;
	            this.returnStatement();
	            break;
	        case 42:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 1542;
	            this.synchronizedStatement();
	            break;
	        case 44:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 1543;
	            this.throwStatement();
	            break;
	        case 47:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 1544;
	            this.tryStatement();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	emptyStatement() {
	    let localctx = new EmptyStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 268, Java8Parser.RULE_emptyStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1547;
	        this.match(Java8Parser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	labeledStatement() {
	    let localctx = new LabeledStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 270, Java8Parser.RULE_labeledStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1549;
	        this.match(Java8Parser.Identifier);
	        this.state = 1550;
	        this.match(Java8Parser.COLON);
	        this.state = 1551;
	        this.statement();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	labeledStatementNoShortIf() {
	    let localctx = new LabeledStatementNoShortIfContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 272, Java8Parser.RULE_labeledStatementNoShortIf);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1553;
	        this.match(Java8Parser.Identifier);
	        this.state = 1554;
	        this.match(Java8Parser.COLON);
	        this.state = 1555;
	        this.statementNoShortIf();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expressionStatement() {
	    let localctx = new ExpressionStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 274, Java8Parser.RULE_expressionStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1557;
	        this.statementExpression();
	        this.state = 1558;
	        this.match(Java8Parser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	statementExpression() {
	    let localctx = new StatementExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 276, Java8Parser.RULE_statementExpression);
	    try {
	        this.state = 1567;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,160,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1560;
	            this.assignment();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1561;
	            this.preIncrementExpression();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1562;
	            this.preDecrementExpression();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1563;
	            this.postIncrementExpression();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1564;
	            this.postDecrementExpression();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1565;
	            this.methodInvocation();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 1566;
	            this.classInstanceCreationExpression();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ifThenStatement() {
	    let localctx = new IfThenStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 278, Java8Parser.RULE_ifThenStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1569;
	        this.match(Java8Parser.IF);
	        this.state = 1570;
	        this.match(Java8Parser.LPAREN);
	        this.state = 1571;
	        this.expression();
	        this.state = 1572;
	        this.match(Java8Parser.RPAREN);
	        this.state = 1573;
	        this.statement();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ifThenElseStatement() {
	    let localctx = new IfThenElseStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 280, Java8Parser.RULE_ifThenElseStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1575;
	        this.match(Java8Parser.IF);
	        this.state = 1576;
	        this.match(Java8Parser.LPAREN);
	        this.state = 1577;
	        this.expression();
	        this.state = 1578;
	        this.match(Java8Parser.RPAREN);
	        this.state = 1579;
	        this.statementNoShortIf();
	        this.state = 1580;
	        this.match(Java8Parser.ELSE);
	        this.state = 1581;
	        this.statement();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ifThenElseStatementNoShortIf() {
	    let localctx = new IfThenElseStatementNoShortIfContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 282, Java8Parser.RULE_ifThenElseStatementNoShortIf);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1583;
	        this.match(Java8Parser.IF);
	        this.state = 1584;
	        this.match(Java8Parser.LPAREN);
	        this.state = 1585;
	        this.expression();
	        this.state = 1586;
	        this.match(Java8Parser.RPAREN);
	        this.state = 1587;
	        this.statementNoShortIf();
	        this.state = 1588;
	        this.match(Java8Parser.ELSE);
	        this.state = 1589;
	        this.statementNoShortIf();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	assertStatement() {
	    let localctx = new AssertStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 284, Java8Parser.RULE_assertStatement);
	    try {
	        this.state = 1601;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,161,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1591;
	            this.match(Java8Parser.ASSERT);
	            this.state = 1592;
	            this.expression();
	            this.state = 1593;
	            this.match(Java8Parser.SEMI);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1595;
	            this.match(Java8Parser.ASSERT);
	            this.state = 1596;
	            this.expression();
	            this.state = 1597;
	            this.match(Java8Parser.COLON);
	            this.state = 1598;
	            this.expression();
	            this.state = 1599;
	            this.match(Java8Parser.SEMI);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	switchStatement() {
	    let localctx = new SwitchStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 286, Java8Parser.RULE_switchStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1603;
	        this.match(Java8Parser.SWITCH);
	        this.state = 1604;
	        this.match(Java8Parser.LPAREN);
	        this.state = 1605;
	        this.expression();
	        this.state = 1606;
	        this.match(Java8Parser.RPAREN);
	        this.state = 1607;
	        this.switchBlock();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	switchBlock() {
	    let localctx = new SwitchBlockContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 288, Java8Parser.RULE_switchBlock);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1609;
	        this.match(Java8Parser.LBRACE);
	        this.state = 1613;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,162,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1610;
	                this.switchBlockStatementGroup(); 
	            }
	            this.state = 1615;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,162,this._ctx);
	        }

	        this.state = 1619;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===6 || _la===12) {
	            this.state = 1616;
	            this.switchLabel();
	            this.state = 1621;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1622;
	        this.match(Java8Parser.RBRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	switchBlockStatementGroup() {
	    let localctx = new SwitchBlockStatementGroupContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 290, Java8Parser.RULE_switchBlockStatementGroup);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1624;
	        this.switchLabels();
	        this.state = 1625;
	        this.blockStatements();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	switchLabels() {
	    let localctx = new SwitchLabelsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 292, Java8Parser.RULE_switchLabels);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1627;
	        this.switchLabel();
	        this.state = 1631;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===6 || _la===12) {
	            this.state = 1628;
	            this.switchLabel();
	            this.state = 1633;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	switchLabel() {
	    let localctx = new SwitchLabelContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 294, Java8Parser.RULE_switchLabel);
	    try {
	        this.state = 1644;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,165,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1634;
	            this.match(Java8Parser.CASE);
	            this.state = 1635;
	            this.constantExpression();
	            this.state = 1636;
	            this.match(Java8Parser.COLON);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1638;
	            this.match(Java8Parser.CASE);
	            this.state = 1639;
	            this.enumConstantName();
	            this.state = 1640;
	            this.match(Java8Parser.COLON);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1642;
	            this.match(Java8Parser.DEFAULT);
	            this.state = 1643;
	            this.match(Java8Parser.COLON);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enumConstantName() {
	    let localctx = new EnumConstantNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 296, Java8Parser.RULE_enumConstantName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1646;
	        this.match(Java8Parser.Identifier);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	whileStatement() {
	    let localctx = new WhileStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 298, Java8Parser.RULE_whileStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1648;
	        this.match(Java8Parser.WHILE);
	        this.state = 1649;
	        this.match(Java8Parser.LPAREN);
	        this.state = 1650;
	        this.expression();
	        this.state = 1651;
	        this.match(Java8Parser.RPAREN);
	        this.state = 1652;
	        this.statement();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	whileStatementNoShortIf() {
	    let localctx = new WhileStatementNoShortIfContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 300, Java8Parser.RULE_whileStatementNoShortIf);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1654;
	        this.match(Java8Parser.WHILE);
	        this.state = 1655;
	        this.match(Java8Parser.LPAREN);
	        this.state = 1656;
	        this.expression();
	        this.state = 1657;
	        this.match(Java8Parser.RPAREN);
	        this.state = 1658;
	        this.statementNoShortIf();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	doStatement() {
	    let localctx = new DoStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 302, Java8Parser.RULE_doStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1660;
	        this.match(Java8Parser.DO);
	        this.state = 1661;
	        this.statement();
	        this.state = 1662;
	        this.match(Java8Parser.WHILE);
	        this.state = 1663;
	        this.match(Java8Parser.LPAREN);
	        this.state = 1664;
	        this.expression();
	        this.state = 1665;
	        this.match(Java8Parser.RPAREN);
	        this.state = 1666;
	        this.match(Java8Parser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	forStatement() {
	    let localctx = new ForStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 304, Java8Parser.RULE_forStatement);
	    try {
	        this.state = 1670;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,166,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1668;
	            this.basicForStatement();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1669;
	            this.enhancedForStatement();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	forStatementNoShortIf() {
	    let localctx = new ForStatementNoShortIfContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 306, Java8Parser.RULE_forStatementNoShortIf);
	    try {
	        this.state = 1674;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,167,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1672;
	            this.basicForStatementNoShortIf();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1673;
	            this.enhancedForStatementNoShortIf();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	basicForStatement() {
	    let localctx = new BasicForStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 308, Java8Parser.RULE_basicForStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1676;
	        this.match(Java8Parser.FOR);
	        this.state = 1677;
	        this.match(Java8Parser.LPAREN);
	        this.state = 1679;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 2819899688) !== 0) || ((((_la - 37)) & ~0x1f) === 0 && ((1 << (_la - 37)) & 2082889) !== 0) || ((((_la - 79)) & ~0x1f) === 0 && ((1 << (_la - 79)) & 25165827) !== 0)) {
	            this.state = 1678;
	            this.forInit();
	        }

	        this.state = 1681;
	        this.match(Java8Parser.SEMI);
	        this.state = 1683;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 2819637544) !== 0) || ((((_la - 37)) & ~0x1f) === 0 && ((1 << (_la - 37)) & 2082889) !== 0) || ((((_la - 69)) & ~0x1f) === 0 && ((1 << (_la - 69)) & 15363) !== 0) || _la===102 || _la===103) {
	            this.state = 1682;
	            this.expression();
	        }

	        this.state = 1685;
	        this.match(Java8Parser.SEMI);
	        this.state = 1687;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 2819637544) !== 0) || ((((_la - 37)) & ~0x1f) === 0 && ((1 << (_la - 37)) & 2082889) !== 0) || ((((_la - 79)) & ~0x1f) === 0 && ((1 << (_la - 79)) & 25165827) !== 0)) {
	            this.state = 1686;
	            this.forUpdate();
	        }

	        this.state = 1689;
	        this.match(Java8Parser.RPAREN);
	        this.state = 1690;
	        this.statement();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	basicForStatementNoShortIf() {
	    let localctx = new BasicForStatementNoShortIfContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 310, Java8Parser.RULE_basicForStatementNoShortIf);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1692;
	        this.match(Java8Parser.FOR);
	        this.state = 1693;
	        this.match(Java8Parser.LPAREN);
	        this.state = 1695;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 2819899688) !== 0) || ((((_la - 37)) & ~0x1f) === 0 && ((1 << (_la - 37)) & 2082889) !== 0) || ((((_la - 79)) & ~0x1f) === 0 && ((1 << (_la - 79)) & 25165827) !== 0)) {
	            this.state = 1694;
	            this.forInit();
	        }

	        this.state = 1697;
	        this.match(Java8Parser.SEMI);
	        this.state = 1699;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 2819637544) !== 0) || ((((_la - 37)) & ~0x1f) === 0 && ((1 << (_la - 37)) & 2082889) !== 0) || ((((_la - 69)) & ~0x1f) === 0 && ((1 << (_la - 69)) & 15363) !== 0) || _la===102 || _la===103) {
	            this.state = 1698;
	            this.expression();
	        }

	        this.state = 1701;
	        this.match(Java8Parser.SEMI);
	        this.state = 1703;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 2819637544) !== 0) || ((((_la - 37)) & ~0x1f) === 0 && ((1 << (_la - 37)) & 2082889) !== 0) || ((((_la - 79)) & ~0x1f) === 0 && ((1 << (_la - 79)) & 25165827) !== 0)) {
	            this.state = 1702;
	            this.forUpdate();
	        }

	        this.state = 1705;
	        this.match(Java8Parser.RPAREN);
	        this.state = 1706;
	        this.statementNoShortIf();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	forInit() {
	    let localctx = new ForInitContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 312, Java8Parser.RULE_forInit);
	    try {
	        this.state = 1710;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,174,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1708;
	            this.statementExpressionList();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1709;
	            this.localVariableDeclaration();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	forUpdate() {
	    let localctx = new ForUpdateContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 314, Java8Parser.RULE_forUpdate);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1712;
	        this.statementExpressionList();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	statementExpressionList() {
	    let localctx = new StatementExpressionListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 316, Java8Parser.RULE_statementExpressionList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1714;
	        this.statementExpression();
	        this.state = 1719;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===64) {
	            this.state = 1715;
	            this.match(Java8Parser.COMMA);
	            this.state = 1716;
	            this.statementExpression();
	            this.state = 1721;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enhancedForStatement() {
	    let localctx = new EnhancedForStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 318, Java8Parser.RULE_enhancedForStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1722;
	        this.match(Java8Parser.FOR);
	        this.state = 1723;
	        this.match(Java8Parser.LPAREN);
	        this.state = 1727;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===18 || _la===103) {
	            this.state = 1724;
	            this.variableModifier();
	            this.state = 1729;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1730;
	        this.unannType();
	        this.state = 1731;
	        this.variableDeclaratorId();
	        this.state = 1732;
	        this.match(Java8Parser.COLON);
	        this.state = 1733;
	        this.expression();
	        this.state = 1734;
	        this.match(Java8Parser.RPAREN);
	        this.state = 1735;
	        this.statement();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enhancedForStatementNoShortIf() {
	    let localctx = new EnhancedForStatementNoShortIfContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 320, Java8Parser.RULE_enhancedForStatementNoShortIf);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1737;
	        this.match(Java8Parser.FOR);
	        this.state = 1738;
	        this.match(Java8Parser.LPAREN);
	        this.state = 1742;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===18 || _la===103) {
	            this.state = 1739;
	            this.variableModifier();
	            this.state = 1744;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1745;
	        this.unannType();
	        this.state = 1746;
	        this.variableDeclaratorId();
	        this.state = 1747;
	        this.match(Java8Parser.COLON);
	        this.state = 1748;
	        this.expression();
	        this.state = 1749;
	        this.match(Java8Parser.RPAREN);
	        this.state = 1750;
	        this.statementNoShortIf();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	breakStatement() {
	    let localctx = new BreakStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 322, Java8Parser.RULE_breakStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1752;
	        this.match(Java8Parser.BREAK);
	        this.state = 1754;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===102) {
	            this.state = 1753;
	            this.match(Java8Parser.Identifier);
	        }

	        this.state = 1756;
	        this.match(Java8Parser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	continueStatement() {
	    let localctx = new ContinueStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 324, Java8Parser.RULE_continueStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1758;
	        this.match(Java8Parser.CONTINUE);
	        this.state = 1760;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===102) {
	            this.state = 1759;
	            this.match(Java8Parser.Identifier);
	        }

	        this.state = 1762;
	        this.match(Java8Parser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	returnStatement() {
	    let localctx = new ReturnStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 326, Java8Parser.RULE_returnStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1764;
	        this.match(Java8Parser.RETURN);
	        this.state = 1766;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 2819637544) !== 0) || ((((_la - 37)) & ~0x1f) === 0 && ((1 << (_la - 37)) & 2082889) !== 0) || ((((_la - 69)) & ~0x1f) === 0 && ((1 << (_la - 69)) & 15363) !== 0) || _la===102 || _la===103) {
	            this.state = 1765;
	            this.expression();
	        }

	        this.state = 1768;
	        this.match(Java8Parser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	throwStatement() {
	    let localctx = new ThrowStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 328, Java8Parser.RULE_throwStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1770;
	        this.match(Java8Parser.THROW);
	        this.state = 1771;
	        this.expression();
	        this.state = 1772;
	        this.match(Java8Parser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	synchronizedStatement() {
	    let localctx = new SynchronizedStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 330, Java8Parser.RULE_synchronizedStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1774;
	        this.match(Java8Parser.SYNCHRONIZED);
	        this.state = 1775;
	        this.match(Java8Parser.LPAREN);
	        this.state = 1776;
	        this.expression();
	        this.state = 1777;
	        this.match(Java8Parser.RPAREN);
	        this.state = 1778;
	        this.block();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tryStatement() {
	    let localctx = new TryStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 332, Java8Parser.RULE_tryStatement);
	    var _la = 0;
	    try {
	        this.state = 1792;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,182,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1780;
	            this.match(Java8Parser.TRY);
	            this.state = 1781;
	            this.block();
	            this.state = 1782;
	            this.catches();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1784;
	            this.match(Java8Parser.TRY);
	            this.state = 1785;
	            this.block();
	            this.state = 1787;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===7) {
	                this.state = 1786;
	                this.catches();
	            }

	            this.state = 1789;
	            this.finally_();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1791;
	            this.tryWithResourcesStatement();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	catches() {
	    let localctx = new CatchesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 334, Java8Parser.RULE_catches);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1794;
	        this.catchClause();
	        this.state = 1798;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===7) {
	            this.state = 1795;
	            this.catchClause();
	            this.state = 1800;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	catchClause() {
	    let localctx = new CatchClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 336, Java8Parser.RULE_catchClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1801;
	        this.match(Java8Parser.CATCH);
	        this.state = 1802;
	        this.match(Java8Parser.LPAREN);
	        this.state = 1803;
	        this.catchFormalParameter();
	        this.state = 1804;
	        this.match(Java8Parser.RPAREN);
	        this.state = 1805;
	        this.block();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	catchFormalParameter() {
	    let localctx = new CatchFormalParameterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 338, Java8Parser.RULE_catchFormalParameter);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1810;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===18 || _la===103) {
	            this.state = 1807;
	            this.variableModifier();
	            this.state = 1812;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1813;
	        this.catchType();
	        this.state = 1814;
	        this.variableDeclaratorId();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	catchType() {
	    let localctx = new CatchTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 340, Java8Parser.RULE_catchType);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1816;
	        this.unannClassType();
	        this.state = 1821;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===86) {
	            this.state = 1817;
	            this.match(Java8Parser.BITOR);
	            this.state = 1818;
	            this.classType();
	            this.state = 1823;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	finally_() {
	    let localctx = new Finally_Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 342, Java8Parser.RULE_finally_);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1824;
	        this.match(Java8Parser.FINALLY);
	        this.state = 1825;
	        this.block();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tryWithResourcesStatement() {
	    let localctx = new TryWithResourcesStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 344, Java8Parser.RULE_tryWithResourcesStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1827;
	        this.match(Java8Parser.TRY);
	        this.state = 1828;
	        this.resourceSpecification();
	        this.state = 1829;
	        this.block();
	        this.state = 1831;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===7) {
	            this.state = 1830;
	            this.catches();
	        }

	        this.state = 1834;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===19) {
	            this.state = 1833;
	            this.finally_();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	resourceSpecification() {
	    let localctx = new ResourceSpecificationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 346, Java8Parser.RULE_resourceSpecification);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1836;
	        this.match(Java8Parser.LPAREN);
	        this.state = 1837;
	        this.resourceList();
	        this.state = 1839;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===63) {
	            this.state = 1838;
	            this.match(Java8Parser.SEMI);
	        }

	        this.state = 1841;
	        this.match(Java8Parser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	resourceList() {
	    let localctx = new ResourceListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 348, Java8Parser.RULE_resourceList);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1843;
	        this.resource();
	        this.state = 1848;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,189,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1844;
	                this.match(Java8Parser.SEMI);
	                this.state = 1845;
	                this.resource(); 
	            }
	            this.state = 1850;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,189,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	resource() {
	    let localctx = new ResourceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 350, Java8Parser.RULE_resource);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1854;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===18 || _la===103) {
	            this.state = 1851;
	            this.variableModifier();
	            this.state = 1856;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1857;
	        this.unannType();
	        this.state = 1858;
	        this.variableDeclaratorId();
	        this.state = 1859;
	        this.match(Java8Parser.ASSIGN);
	        this.state = 1860;
	        this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	primary() {
	    let localctx = new PrimaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 352, Java8Parser.RULE_primary);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1864;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,191,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 1862;
	            this.primaryNoNewArray_lfno_primary();
	            break;

	        case 2:
	            this.state = 1863;
	            this.arrayCreationExpression();
	            break;

	        }
	        this.state = 1869;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,192,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1866;
	                this.primaryNoNewArray_lf_primary(); 
	            }
	            this.state = 1871;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,192,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	primaryNoNewArray() {
	    let localctx = new PrimaryNoNewArrayContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 354, Java8Parser.RULE_primaryNoNewArray);
	    var _la = 0;
	    try {
	        this.state = 1901;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,194,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1872;
	            this.literal();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1873;
	            this.typeName();
	            this.state = 1878;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===61) {
	                this.state = 1874;
	                this.match(Java8Parser.LBRACK);
	                this.state = 1875;
	                this.match(Java8Parser.RBRACK);
	                this.state = 1880;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1881;
	            this.match(Java8Parser.DOT);
	            this.state = 1882;
	            this.match(Java8Parser.CLASS);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1884;
	            this.match(Java8Parser.VOID);
	            this.state = 1885;
	            this.match(Java8Parser.DOT);
	            this.state = 1886;
	            this.match(Java8Parser.CLASS);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1887;
	            this.match(Java8Parser.THIS);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1888;
	            this.typeName();
	            this.state = 1889;
	            this.match(Java8Parser.DOT);
	            this.state = 1890;
	            this.match(Java8Parser.THIS);
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1892;
	            this.match(Java8Parser.LPAREN);
	            this.state = 1893;
	            this.expression();
	            this.state = 1894;
	            this.match(Java8Parser.RPAREN);
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 1896;
	            this.classInstanceCreationExpression();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 1897;
	            this.fieldAccess();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 1898;
	            this.arrayAccess();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 1899;
	            this.methodInvocation();
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 1900;
	            this.methodReference();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	primaryNoNewArray_lf_arrayAccess() {
	    let localctx = new PrimaryNoNewArray_lf_arrayAccessContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 356, Java8Parser.RULE_primaryNoNewArray_lf_arrayAccess);
	    try {
	        this.enterOuterAlt(localctx, 1);

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	primaryNoNewArray_lfno_arrayAccess() {
	    let localctx = new PrimaryNoNewArray_lfno_arrayAccessContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 358, Java8Parser.RULE_primaryNoNewArray_lfno_arrayAccess);
	    var _la = 0;
	    try {
	        this.state = 1933;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,196,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1905;
	            this.literal();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1906;
	            this.typeName();
	            this.state = 1911;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===61) {
	                this.state = 1907;
	                this.match(Java8Parser.LBRACK);
	                this.state = 1908;
	                this.match(Java8Parser.RBRACK);
	                this.state = 1913;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1914;
	            this.match(Java8Parser.DOT);
	            this.state = 1915;
	            this.match(Java8Parser.CLASS);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1917;
	            this.match(Java8Parser.VOID);
	            this.state = 1918;
	            this.match(Java8Parser.DOT);
	            this.state = 1919;
	            this.match(Java8Parser.CLASS);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1920;
	            this.match(Java8Parser.THIS);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1921;
	            this.typeName();
	            this.state = 1922;
	            this.match(Java8Parser.DOT);
	            this.state = 1923;
	            this.match(Java8Parser.THIS);
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1925;
	            this.match(Java8Parser.LPAREN);
	            this.state = 1926;
	            this.expression();
	            this.state = 1927;
	            this.match(Java8Parser.RPAREN);
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 1929;
	            this.classInstanceCreationExpression();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 1930;
	            this.fieldAccess();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 1931;
	            this.methodInvocation();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 1932;
	            this.methodReference();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	primaryNoNewArray_lf_primary() {
	    let localctx = new PrimaryNoNewArray_lf_primaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 360, Java8Parser.RULE_primaryNoNewArray_lf_primary);
	    try {
	        this.state = 1940;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,197,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1935;
	            this.classInstanceCreationExpression_lf_primary();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1936;
	            this.fieldAccess_lf_primary();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1937;
	            this.arrayAccess_lf_primary();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1938;
	            this.methodInvocation_lf_primary();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1939;
	            this.methodReference_lf_primary();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	primaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary() {
	    let localctx = new PrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 362, Java8Parser.RULE_primaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary);
	    try {
	        this.enterOuterAlt(localctx, 1);

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	primaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary() {
	    let localctx = new PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 364, Java8Parser.RULE_primaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary);
	    try {
	        this.state = 1948;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,198,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1944;
	            this.classInstanceCreationExpression_lf_primary();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1945;
	            this.fieldAccess_lf_primary();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1946;
	            this.methodInvocation_lf_primary();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1947;
	            this.methodReference_lf_primary();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	primaryNoNewArray_lfno_primary() {
	    let localctx = new PrimaryNoNewArray_lfno_primaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 366, Java8Parser.RULE_primaryNoNewArray_lfno_primary);
	    var _la = 0;
	    try {
	        this.state = 1990;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,201,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1950;
	            this.literal();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1951;
	            this.typeName();
	            this.state = 1956;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===61) {
	                this.state = 1952;
	                this.match(Java8Parser.LBRACK);
	                this.state = 1953;
	                this.match(Java8Parser.RBRACK);
	                this.state = 1958;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1959;
	            this.match(Java8Parser.DOT);
	            this.state = 1960;
	            this.match(Java8Parser.CLASS);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1962;
	            this.unannPrimitiveType();
	            this.state = 1967;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===61) {
	                this.state = 1963;
	                this.match(Java8Parser.LBRACK);
	                this.state = 1964;
	                this.match(Java8Parser.RBRACK);
	                this.state = 1969;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1970;
	            this.match(Java8Parser.DOT);
	            this.state = 1971;
	            this.match(Java8Parser.CLASS);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1973;
	            this.match(Java8Parser.VOID);
	            this.state = 1974;
	            this.match(Java8Parser.DOT);
	            this.state = 1975;
	            this.match(Java8Parser.CLASS);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1976;
	            this.match(Java8Parser.THIS);
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1977;
	            this.typeName();
	            this.state = 1978;
	            this.match(Java8Parser.DOT);
	            this.state = 1979;
	            this.match(Java8Parser.THIS);
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 1981;
	            this.match(Java8Parser.LPAREN);
	            this.state = 1982;
	            this.expression();
	            this.state = 1983;
	            this.match(Java8Parser.RPAREN);
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 1985;
	            this.classInstanceCreationExpression_lfno_primary();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 1986;
	            this.fieldAccess_lfno_primary();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 1987;
	            this.arrayAccess_lfno_primary();
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 1988;
	            this.methodInvocation_lfno_primary();
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 1989;
	            this.methodReference_lfno_primary();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	primaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary() {
	    let localctx = new PrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 368, Java8Parser.RULE_primaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary);
	    try {
	        this.enterOuterAlt(localctx, 1);

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	primaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary() {
	    let localctx = new PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 370, Java8Parser.RULE_primaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary);
	    var _la = 0;
	    try {
	        this.state = 2033;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,204,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1994;
	            this.literal();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1995;
	            this.typeName();
	            this.state = 2000;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===61) {
	                this.state = 1996;
	                this.match(Java8Parser.LBRACK);
	                this.state = 1997;
	                this.match(Java8Parser.RBRACK);
	                this.state = 2002;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 2003;
	            this.match(Java8Parser.DOT);
	            this.state = 2004;
	            this.match(Java8Parser.CLASS);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2006;
	            this.unannPrimitiveType();
	            this.state = 2011;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===61) {
	                this.state = 2007;
	                this.match(Java8Parser.LBRACK);
	                this.state = 2008;
	                this.match(Java8Parser.RBRACK);
	                this.state = 2013;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 2014;
	            this.match(Java8Parser.DOT);
	            this.state = 2015;
	            this.match(Java8Parser.CLASS);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2017;
	            this.match(Java8Parser.VOID);
	            this.state = 2018;
	            this.match(Java8Parser.DOT);
	            this.state = 2019;
	            this.match(Java8Parser.CLASS);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 2020;
	            this.match(Java8Parser.THIS);
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 2021;
	            this.typeName();
	            this.state = 2022;
	            this.match(Java8Parser.DOT);
	            this.state = 2023;
	            this.match(Java8Parser.THIS);
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 2025;
	            this.match(Java8Parser.LPAREN);
	            this.state = 2026;
	            this.expression();
	            this.state = 2027;
	            this.match(Java8Parser.RPAREN);
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 2029;
	            this.classInstanceCreationExpression_lfno_primary();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 2030;
	            this.fieldAccess_lfno_primary();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 2031;
	            this.methodInvocation_lfno_primary();
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 2032;
	            this.methodReference_lfno_primary();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	classInstanceCreationExpression() {
	    let localctx = new ClassInstanceCreationExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 372, Java8Parser.RULE_classInstanceCreationExpression);
	    var _la = 0;
	    try {
	        this.state = 2118;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,222,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2035;
	            this.match(Java8Parser.NEW);
	            this.state = 2037;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===68) {
	                this.state = 2036;
	                this.typeArguments();
	            }

	            this.state = 2042;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===103) {
	                this.state = 2039;
	                this.annotation();
	                this.state = 2044;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 2045;
	            this.match(Java8Parser.Identifier);
	            this.state = 2056;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===65) {
	                this.state = 2046;
	                this.match(Java8Parser.DOT);
	                this.state = 2050;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===103) {
	                    this.state = 2047;
	                    this.annotation();
	                    this.state = 2052;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                this.state = 2053;
	                this.match(Java8Parser.Identifier);
	                this.state = 2058;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 2060;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===68) {
	                this.state = 2059;
	                this.typeArgumentsOrDiamond();
	            }

	            this.state = 2062;
	            this.match(Java8Parser.LPAREN);
	            this.state = 2064;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 2819637544) !== 0) || ((((_la - 37)) & ~0x1f) === 0 && ((1 << (_la - 37)) & 2082889) !== 0) || ((((_la - 69)) & ~0x1f) === 0 && ((1 << (_la - 69)) & 15363) !== 0) || _la===102 || _la===103) {
	                this.state = 2063;
	                this.argumentList();
	            }

	            this.state = 2066;
	            this.match(Java8Parser.RPAREN);
	            this.state = 2068;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===59) {
	                this.state = 2067;
	                this.classBody();
	            }

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2070;
	            this.expressionName();
	            this.state = 2071;
	            this.match(Java8Parser.DOT);
	            this.state = 2072;
	            this.match(Java8Parser.NEW);
	            this.state = 2074;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===68) {
	                this.state = 2073;
	                this.typeArguments();
	            }

	            this.state = 2079;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===103) {
	                this.state = 2076;
	                this.annotation();
	                this.state = 2081;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 2082;
	            this.match(Java8Parser.Identifier);
	            this.state = 2084;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===68) {
	                this.state = 2083;
	                this.typeArgumentsOrDiamond();
	            }

	            this.state = 2086;
	            this.match(Java8Parser.LPAREN);
	            this.state = 2088;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 2819637544) !== 0) || ((((_la - 37)) & ~0x1f) === 0 && ((1 << (_la - 37)) & 2082889) !== 0) || ((((_la - 69)) & ~0x1f) === 0 && ((1 << (_la - 69)) & 15363) !== 0) || _la===102 || _la===103) {
	                this.state = 2087;
	                this.argumentList();
	            }

	            this.state = 2090;
	            this.match(Java8Parser.RPAREN);
	            this.state = 2092;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===59) {
	                this.state = 2091;
	                this.classBody();
	            }

	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2094;
	            this.primary();
	            this.state = 2095;
	            this.match(Java8Parser.DOT);
	            this.state = 2096;
	            this.match(Java8Parser.NEW);
	            this.state = 2098;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===68) {
	                this.state = 2097;
	                this.typeArguments();
	            }

	            this.state = 2103;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===103) {
	                this.state = 2100;
	                this.annotation();
	                this.state = 2105;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 2106;
	            this.match(Java8Parser.Identifier);
	            this.state = 2108;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===68) {
	                this.state = 2107;
	                this.typeArgumentsOrDiamond();
	            }

	            this.state = 2110;
	            this.match(Java8Parser.LPAREN);
	            this.state = 2112;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 2819637544) !== 0) || ((((_la - 37)) & ~0x1f) === 0 && ((1 << (_la - 37)) & 2082889) !== 0) || ((((_la - 69)) & ~0x1f) === 0 && ((1 << (_la - 69)) & 15363) !== 0) || _la===102 || _la===103) {
	                this.state = 2111;
	                this.argumentList();
	            }

	            this.state = 2114;
	            this.match(Java8Parser.RPAREN);
	            this.state = 2116;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===59) {
	                this.state = 2115;
	                this.classBody();
	            }

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	classInstanceCreationExpression_lf_primary() {
	    let localctx = new ClassInstanceCreationExpression_lf_primaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 374, Java8Parser.RULE_classInstanceCreationExpression_lf_primary);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2120;
	        this.match(Java8Parser.DOT);
	        this.state = 2121;
	        this.match(Java8Parser.NEW);
	        this.state = 2123;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===68) {
	            this.state = 2122;
	            this.typeArguments();
	        }

	        this.state = 2128;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===103) {
	            this.state = 2125;
	            this.annotation();
	            this.state = 2130;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 2131;
	        this.match(Java8Parser.Identifier);
	        this.state = 2133;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===68) {
	            this.state = 2132;
	            this.typeArgumentsOrDiamond();
	        }

	        this.state = 2135;
	        this.match(Java8Parser.LPAREN);
	        this.state = 2137;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 2819637544) !== 0) || ((((_la - 37)) & ~0x1f) === 0 && ((1 << (_la - 37)) & 2082889) !== 0) || ((((_la - 69)) & ~0x1f) === 0 && ((1 << (_la - 69)) & 15363) !== 0) || _la===102 || _la===103) {
	            this.state = 2136;
	            this.argumentList();
	        }

	        this.state = 2139;
	        this.match(Java8Parser.RPAREN);
	        this.state = 2141;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,227,this._ctx);
	        if(la_===1) {
	            this.state = 2140;
	            this.classBody();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	classInstanceCreationExpression_lfno_primary() {
	    let localctx = new ClassInstanceCreationExpression_lfno_primaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 376, Java8Parser.RULE_classInstanceCreationExpression_lfno_primary);
	    var _la = 0;
	    try {
	        this.state = 2202;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 31:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2143;
	            this.match(Java8Parser.NEW);
	            this.state = 2145;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===68) {
	                this.state = 2144;
	                this.typeArguments();
	            }

	            this.state = 2150;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===103) {
	                this.state = 2147;
	                this.annotation();
	                this.state = 2152;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 2153;
	            this.match(Java8Parser.Identifier);
	            this.state = 2164;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===65) {
	                this.state = 2154;
	                this.match(Java8Parser.DOT);
	                this.state = 2158;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===103) {
	                    this.state = 2155;
	                    this.annotation();
	                    this.state = 2160;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                this.state = 2161;
	                this.match(Java8Parser.Identifier);
	                this.state = 2166;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 2168;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===68) {
	                this.state = 2167;
	                this.typeArgumentsOrDiamond();
	            }

	            this.state = 2170;
	            this.match(Java8Parser.LPAREN);
	            this.state = 2172;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 2819637544) !== 0) || ((((_la - 37)) & ~0x1f) === 0 && ((1 << (_la - 37)) & 2082889) !== 0) || ((((_la - 69)) & ~0x1f) === 0 && ((1 << (_la - 69)) & 15363) !== 0) || _la===102 || _la===103) {
	                this.state = 2171;
	                this.argumentList();
	            }

	            this.state = 2174;
	            this.match(Java8Parser.RPAREN);
	            this.state = 2176;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,234,this._ctx);
	            if(la_===1) {
	                this.state = 2175;
	                this.classBody();

	            }
	            break;
	        case 102:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2178;
	            this.expressionName();
	            this.state = 2179;
	            this.match(Java8Parser.DOT);
	            this.state = 2180;
	            this.match(Java8Parser.NEW);
	            this.state = 2182;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===68) {
	                this.state = 2181;
	                this.typeArguments();
	            }

	            this.state = 2187;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===103) {
	                this.state = 2184;
	                this.annotation();
	                this.state = 2189;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 2190;
	            this.match(Java8Parser.Identifier);
	            this.state = 2192;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===68) {
	                this.state = 2191;
	                this.typeArgumentsOrDiamond();
	            }

	            this.state = 2194;
	            this.match(Java8Parser.LPAREN);
	            this.state = 2196;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 2819637544) !== 0) || ((((_la - 37)) & ~0x1f) === 0 && ((1 << (_la - 37)) & 2082889) !== 0) || ((((_la - 69)) & ~0x1f) === 0 && ((1 << (_la - 69)) & 15363) !== 0) || _la===102 || _la===103) {
	                this.state = 2195;
	                this.argumentList();
	            }

	            this.state = 2198;
	            this.match(Java8Parser.RPAREN);
	            this.state = 2200;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,239,this._ctx);
	            if(la_===1) {
	                this.state = 2199;
	                this.classBody();

	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeArgumentsOrDiamond() {
	    let localctx = new TypeArgumentsOrDiamondContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 378, Java8Parser.RULE_typeArgumentsOrDiamond);
	    try {
	        this.state = 2207;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,241,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2204;
	            this.typeArguments();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2205;
	            this.match(Java8Parser.LT);
	            this.state = 2206;
	            this.match(Java8Parser.GT);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fieldAccess() {
	    let localctx = new FieldAccessContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 380, Java8Parser.RULE_fieldAccess);
	    try {
	        this.state = 2222;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,242,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2209;
	            this.primary();
	            this.state = 2210;
	            this.match(Java8Parser.DOT);
	            this.state = 2211;
	            this.match(Java8Parser.Identifier);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2213;
	            this.match(Java8Parser.SUPER);
	            this.state = 2214;
	            this.match(Java8Parser.DOT);
	            this.state = 2215;
	            this.match(Java8Parser.Identifier);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2216;
	            this.typeName();
	            this.state = 2217;
	            this.match(Java8Parser.DOT);
	            this.state = 2218;
	            this.match(Java8Parser.SUPER);
	            this.state = 2219;
	            this.match(Java8Parser.DOT);
	            this.state = 2220;
	            this.match(Java8Parser.Identifier);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fieldAccess_lf_primary() {
	    let localctx = new FieldAccess_lf_primaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 382, Java8Parser.RULE_fieldAccess_lf_primary);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2224;
	        this.match(Java8Parser.DOT);
	        this.state = 2225;
	        this.match(Java8Parser.Identifier);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fieldAccess_lfno_primary() {
	    let localctx = new FieldAccess_lfno_primaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 384, Java8Parser.RULE_fieldAccess_lfno_primary);
	    try {
	        this.state = 2236;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 40:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2227;
	            this.match(Java8Parser.SUPER);
	            this.state = 2228;
	            this.match(Java8Parser.DOT);
	            this.state = 2229;
	            this.match(Java8Parser.Identifier);
	            break;
	        case 102:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2230;
	            this.typeName();
	            this.state = 2231;
	            this.match(Java8Parser.DOT);
	            this.state = 2232;
	            this.match(Java8Parser.SUPER);
	            this.state = 2233;
	            this.match(Java8Parser.DOT);
	            this.state = 2234;
	            this.match(Java8Parser.Identifier);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	arrayAccess() {
	    let localctx = new ArrayAccessContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 386, Java8Parser.RULE_arrayAccess);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2248;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,244,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 2238;
	            this.expressionName();
	            this.state = 2239;
	            this.match(Java8Parser.LBRACK);
	            this.state = 2240;
	            this.expression();
	            this.state = 2241;
	            this.match(Java8Parser.RBRACK);
	            break;

	        case 2:
	            this.state = 2243;
	            this.primaryNoNewArray_lfno_arrayAccess();
	            this.state = 2244;
	            this.match(Java8Parser.LBRACK);
	            this.state = 2245;
	            this.expression();
	            this.state = 2246;
	            this.match(Java8Parser.RBRACK);
	            break;

	        }
	        this.state = 2257;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===61) {
	            this.state = 2250;
	            this.primaryNoNewArray_lf_arrayAccess();
	            this.state = 2251;
	            this.match(Java8Parser.LBRACK);
	            this.state = 2252;
	            this.expression();
	            this.state = 2253;
	            this.match(Java8Parser.RBRACK);
	            this.state = 2259;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	arrayAccess_lf_primary() {
	    let localctx = new ArrayAccess_lf_primaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 388, Java8Parser.RULE_arrayAccess_lf_primary);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2260;
	        this.primaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary();
	        this.state = 2261;
	        this.match(Java8Parser.LBRACK);
	        this.state = 2262;
	        this.expression();
	        this.state = 2263;
	        this.match(Java8Parser.RBRACK);
	        this.state = 2272;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,246,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 2265;
	                this.primaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary();
	                this.state = 2266;
	                this.match(Java8Parser.LBRACK);
	                this.state = 2267;
	                this.expression();
	                this.state = 2268;
	                this.match(Java8Parser.RBRACK); 
	            }
	            this.state = 2274;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,246,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	arrayAccess_lfno_primary() {
	    let localctx = new ArrayAccess_lfno_primaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 390, Java8Parser.RULE_arrayAccess_lfno_primary);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2285;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,247,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 2275;
	            this.expressionName();
	            this.state = 2276;
	            this.match(Java8Parser.LBRACK);
	            this.state = 2277;
	            this.expression();
	            this.state = 2278;
	            this.match(Java8Parser.RBRACK);
	            break;

	        case 2:
	            this.state = 2280;
	            this.primaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary();
	            this.state = 2281;
	            this.match(Java8Parser.LBRACK);
	            this.state = 2282;
	            this.expression();
	            this.state = 2283;
	            this.match(Java8Parser.RBRACK);
	            break;

	        }
	        this.state = 2294;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,248,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 2287;
	                this.primaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary();
	                this.state = 2288;
	                this.match(Java8Parser.LBRACK);
	                this.state = 2289;
	                this.expression();
	                this.state = 2290;
	                this.match(Java8Parser.RBRACK); 
	            }
	            this.state = 2296;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,248,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	methodInvocation() {
	    let localctx = new MethodInvocationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 392, Java8Parser.RULE_methodInvocation);
	    var _la = 0;
	    try {
	        this.state = 2365;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,260,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2297;
	            this.methodName();
	            this.state = 2298;
	            this.match(Java8Parser.LPAREN);
	            this.state = 2300;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 2819637544) !== 0) || ((((_la - 37)) & ~0x1f) === 0 && ((1 << (_la - 37)) & 2082889) !== 0) || ((((_la - 69)) & ~0x1f) === 0 && ((1 << (_la - 69)) & 15363) !== 0) || _la===102 || _la===103) {
	                this.state = 2299;
	                this.argumentList();
	            }

	            this.state = 2302;
	            this.match(Java8Parser.RPAREN);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2304;
	            this.typeName();
	            this.state = 2305;
	            this.match(Java8Parser.DOT);
	            this.state = 2307;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===68) {
	                this.state = 2306;
	                this.typeArguments();
	            }

	            this.state = 2309;
	            this.match(Java8Parser.Identifier);
	            this.state = 2310;
	            this.match(Java8Parser.LPAREN);
	            this.state = 2312;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 2819637544) !== 0) || ((((_la - 37)) & ~0x1f) === 0 && ((1 << (_la - 37)) & 2082889) !== 0) || ((((_la - 69)) & ~0x1f) === 0 && ((1 << (_la - 69)) & 15363) !== 0) || _la===102 || _la===103) {
	                this.state = 2311;
	                this.argumentList();
	            }

	            this.state = 2314;
	            this.match(Java8Parser.RPAREN);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2316;
	            this.expressionName();
	            this.state = 2317;
	            this.match(Java8Parser.DOT);
	            this.state = 2319;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===68) {
	                this.state = 2318;
	                this.typeArguments();
	            }

	            this.state = 2321;
	            this.match(Java8Parser.Identifier);
	            this.state = 2322;
	            this.match(Java8Parser.LPAREN);
	            this.state = 2324;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 2819637544) !== 0) || ((((_la - 37)) & ~0x1f) === 0 && ((1 << (_la - 37)) & 2082889) !== 0) || ((((_la - 69)) & ~0x1f) === 0 && ((1 << (_la - 69)) & 15363) !== 0) || _la===102 || _la===103) {
	                this.state = 2323;
	                this.argumentList();
	            }

	            this.state = 2326;
	            this.match(Java8Parser.RPAREN);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2328;
	            this.primary();
	            this.state = 2329;
	            this.match(Java8Parser.DOT);
	            this.state = 2331;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===68) {
	                this.state = 2330;
	                this.typeArguments();
	            }

	            this.state = 2333;
	            this.match(Java8Parser.Identifier);
	            this.state = 2334;
	            this.match(Java8Parser.LPAREN);
	            this.state = 2336;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 2819637544) !== 0) || ((((_la - 37)) & ~0x1f) === 0 && ((1 << (_la - 37)) & 2082889) !== 0) || ((((_la - 69)) & ~0x1f) === 0 && ((1 << (_la - 69)) & 15363) !== 0) || _la===102 || _la===103) {
	                this.state = 2335;
	                this.argumentList();
	            }

	            this.state = 2338;
	            this.match(Java8Parser.RPAREN);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 2340;
	            this.match(Java8Parser.SUPER);
	            this.state = 2341;
	            this.match(Java8Parser.DOT);
	            this.state = 2343;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===68) {
	                this.state = 2342;
	                this.typeArguments();
	            }

	            this.state = 2345;
	            this.match(Java8Parser.Identifier);
	            this.state = 2346;
	            this.match(Java8Parser.LPAREN);
	            this.state = 2348;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 2819637544) !== 0) || ((((_la - 37)) & ~0x1f) === 0 && ((1 << (_la - 37)) & 2082889) !== 0) || ((((_la - 69)) & ~0x1f) === 0 && ((1 << (_la - 69)) & 15363) !== 0) || _la===102 || _la===103) {
	                this.state = 2347;
	                this.argumentList();
	            }

	            this.state = 2350;
	            this.match(Java8Parser.RPAREN);
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 2351;
	            this.typeName();
	            this.state = 2352;
	            this.match(Java8Parser.DOT);
	            this.state = 2353;
	            this.match(Java8Parser.SUPER);
	            this.state = 2354;
	            this.match(Java8Parser.DOT);
	            this.state = 2356;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===68) {
	                this.state = 2355;
	                this.typeArguments();
	            }

	            this.state = 2358;
	            this.match(Java8Parser.Identifier);
	            this.state = 2359;
	            this.match(Java8Parser.LPAREN);
	            this.state = 2361;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 2819637544) !== 0) || ((((_la - 37)) & ~0x1f) === 0 && ((1 << (_la - 37)) & 2082889) !== 0) || ((((_la - 69)) & ~0x1f) === 0 && ((1 << (_la - 69)) & 15363) !== 0) || _la===102 || _la===103) {
	                this.state = 2360;
	                this.argumentList();
	            }

	            this.state = 2363;
	            this.match(Java8Parser.RPAREN);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	methodInvocation_lf_primary() {
	    let localctx = new MethodInvocation_lf_primaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 394, Java8Parser.RULE_methodInvocation_lf_primary);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2367;
	        this.match(Java8Parser.DOT);
	        this.state = 2369;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===68) {
	            this.state = 2368;
	            this.typeArguments();
	        }

	        this.state = 2371;
	        this.match(Java8Parser.Identifier);
	        this.state = 2372;
	        this.match(Java8Parser.LPAREN);
	        this.state = 2374;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 2819637544) !== 0) || ((((_la - 37)) & ~0x1f) === 0 && ((1 << (_la - 37)) & 2082889) !== 0) || ((((_la - 69)) & ~0x1f) === 0 && ((1 << (_la - 69)) & 15363) !== 0) || _la===102 || _la===103) {
	            this.state = 2373;
	            this.argumentList();
	        }

	        this.state = 2376;
	        this.match(Java8Parser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	methodInvocation_lfno_primary() {
	    let localctx = new MethodInvocation_lfno_primaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 396, Java8Parser.RULE_methodInvocation_lfno_primary);
	    var _la = 0;
	    try {
	        this.state = 2434;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,272,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2378;
	            this.methodName();
	            this.state = 2379;
	            this.match(Java8Parser.LPAREN);
	            this.state = 2381;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 2819637544) !== 0) || ((((_la - 37)) & ~0x1f) === 0 && ((1 << (_la - 37)) & 2082889) !== 0) || ((((_la - 69)) & ~0x1f) === 0 && ((1 << (_la - 69)) & 15363) !== 0) || _la===102 || _la===103) {
	                this.state = 2380;
	                this.argumentList();
	            }

	            this.state = 2383;
	            this.match(Java8Parser.RPAREN);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2385;
	            this.typeName();
	            this.state = 2386;
	            this.match(Java8Parser.DOT);
	            this.state = 2388;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===68) {
	                this.state = 2387;
	                this.typeArguments();
	            }

	            this.state = 2390;
	            this.match(Java8Parser.Identifier);
	            this.state = 2391;
	            this.match(Java8Parser.LPAREN);
	            this.state = 2393;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 2819637544) !== 0) || ((((_la - 37)) & ~0x1f) === 0 && ((1 << (_la - 37)) & 2082889) !== 0) || ((((_la - 69)) & ~0x1f) === 0 && ((1 << (_la - 69)) & 15363) !== 0) || _la===102 || _la===103) {
	                this.state = 2392;
	                this.argumentList();
	            }

	            this.state = 2395;
	            this.match(Java8Parser.RPAREN);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2397;
	            this.expressionName();
	            this.state = 2398;
	            this.match(Java8Parser.DOT);
	            this.state = 2400;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===68) {
	                this.state = 2399;
	                this.typeArguments();
	            }

	            this.state = 2402;
	            this.match(Java8Parser.Identifier);
	            this.state = 2403;
	            this.match(Java8Parser.LPAREN);
	            this.state = 2405;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 2819637544) !== 0) || ((((_la - 37)) & ~0x1f) === 0 && ((1 << (_la - 37)) & 2082889) !== 0) || ((((_la - 69)) & ~0x1f) === 0 && ((1 << (_la - 69)) & 15363) !== 0) || _la===102 || _la===103) {
	                this.state = 2404;
	                this.argumentList();
	            }

	            this.state = 2407;
	            this.match(Java8Parser.RPAREN);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2409;
	            this.match(Java8Parser.SUPER);
	            this.state = 2410;
	            this.match(Java8Parser.DOT);
	            this.state = 2412;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===68) {
	                this.state = 2411;
	                this.typeArguments();
	            }

	            this.state = 2414;
	            this.match(Java8Parser.Identifier);
	            this.state = 2415;
	            this.match(Java8Parser.LPAREN);
	            this.state = 2417;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 2819637544) !== 0) || ((((_la - 37)) & ~0x1f) === 0 && ((1 << (_la - 37)) & 2082889) !== 0) || ((((_la - 69)) & ~0x1f) === 0 && ((1 << (_la - 69)) & 15363) !== 0) || _la===102 || _la===103) {
	                this.state = 2416;
	                this.argumentList();
	            }

	            this.state = 2419;
	            this.match(Java8Parser.RPAREN);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 2420;
	            this.typeName();
	            this.state = 2421;
	            this.match(Java8Parser.DOT);
	            this.state = 2422;
	            this.match(Java8Parser.SUPER);
	            this.state = 2423;
	            this.match(Java8Parser.DOT);
	            this.state = 2425;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===68) {
	                this.state = 2424;
	                this.typeArguments();
	            }

	            this.state = 2427;
	            this.match(Java8Parser.Identifier);
	            this.state = 2428;
	            this.match(Java8Parser.LPAREN);
	            this.state = 2430;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 2819637544) !== 0) || ((((_la - 37)) & ~0x1f) === 0 && ((1 << (_la - 37)) & 2082889) !== 0) || ((((_la - 69)) & ~0x1f) === 0 && ((1 << (_la - 69)) & 15363) !== 0) || _la===102 || _la===103) {
	                this.state = 2429;
	                this.argumentList();
	            }

	            this.state = 2432;
	            this.match(Java8Parser.RPAREN);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	argumentList() {
	    let localctx = new ArgumentListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 398, Java8Parser.RULE_argumentList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2436;
	        this.expression();
	        this.state = 2441;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===64) {
	            this.state = 2437;
	            this.match(Java8Parser.COMMA);
	            this.state = 2438;
	            this.expression();
	            this.state = 2443;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	methodReference() {
	    let localctx = new MethodReferenceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 400, Java8Parser.RULE_methodReference);
	    var _la = 0;
	    try {
	        this.state = 2491;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,280,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2444;
	            this.expressionName();
	            this.state = 2445;
	            this.match(Java8Parser.COLONCOLON);
	            this.state = 2447;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===68) {
	                this.state = 2446;
	                this.typeArguments();
	            }

	            this.state = 2449;
	            this.match(Java8Parser.Identifier);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2451;
	            this.referenceType();
	            this.state = 2452;
	            this.match(Java8Parser.COLONCOLON);
	            this.state = 2454;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===68) {
	                this.state = 2453;
	                this.typeArguments();
	            }

	            this.state = 2456;
	            this.match(Java8Parser.Identifier);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2458;
	            this.primary();
	            this.state = 2459;
	            this.match(Java8Parser.COLONCOLON);
	            this.state = 2461;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===68) {
	                this.state = 2460;
	                this.typeArguments();
	            }

	            this.state = 2463;
	            this.match(Java8Parser.Identifier);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2465;
	            this.match(Java8Parser.SUPER);
	            this.state = 2466;
	            this.match(Java8Parser.COLONCOLON);
	            this.state = 2468;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===68) {
	                this.state = 2467;
	                this.typeArguments();
	            }

	            this.state = 2470;
	            this.match(Java8Parser.Identifier);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 2471;
	            this.typeName();
	            this.state = 2472;
	            this.match(Java8Parser.DOT);
	            this.state = 2473;
	            this.match(Java8Parser.SUPER);
	            this.state = 2474;
	            this.match(Java8Parser.COLONCOLON);
	            this.state = 2476;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===68) {
	                this.state = 2475;
	                this.typeArguments();
	            }

	            this.state = 2478;
	            this.match(Java8Parser.Identifier);
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 2480;
	            this.classType();
	            this.state = 2481;
	            this.match(Java8Parser.COLONCOLON);
	            this.state = 2483;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===68) {
	                this.state = 2482;
	                this.typeArguments();
	            }

	            this.state = 2485;
	            this.match(Java8Parser.NEW);
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 2487;
	            this.arrayType();
	            this.state = 2488;
	            this.match(Java8Parser.COLONCOLON);
	            this.state = 2489;
	            this.match(Java8Parser.NEW);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	methodReference_lf_primary() {
	    let localctx = new MethodReference_lf_primaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 402, Java8Parser.RULE_methodReference_lf_primary);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2493;
	        this.match(Java8Parser.COLONCOLON);
	        this.state = 2495;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===68) {
	            this.state = 2494;
	            this.typeArguments();
	        }

	        this.state = 2497;
	        this.match(Java8Parser.Identifier);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	methodReference_lfno_primary() {
	    let localctx = new MethodReference_lfno_primaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 404, Java8Parser.RULE_methodReference_lfno_primary);
	    var _la = 0;
	    try {
	        this.state = 2539;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,287,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2499;
	            this.expressionName();
	            this.state = 2500;
	            this.match(Java8Parser.COLONCOLON);
	            this.state = 2502;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===68) {
	                this.state = 2501;
	                this.typeArguments();
	            }

	            this.state = 2504;
	            this.match(Java8Parser.Identifier);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2506;
	            this.referenceType();
	            this.state = 2507;
	            this.match(Java8Parser.COLONCOLON);
	            this.state = 2509;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===68) {
	                this.state = 2508;
	                this.typeArguments();
	            }

	            this.state = 2511;
	            this.match(Java8Parser.Identifier);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2513;
	            this.match(Java8Parser.SUPER);
	            this.state = 2514;
	            this.match(Java8Parser.COLONCOLON);
	            this.state = 2516;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===68) {
	                this.state = 2515;
	                this.typeArguments();
	            }

	            this.state = 2518;
	            this.match(Java8Parser.Identifier);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2519;
	            this.typeName();
	            this.state = 2520;
	            this.match(Java8Parser.DOT);
	            this.state = 2521;
	            this.match(Java8Parser.SUPER);
	            this.state = 2522;
	            this.match(Java8Parser.COLONCOLON);
	            this.state = 2524;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===68) {
	                this.state = 2523;
	                this.typeArguments();
	            }

	            this.state = 2526;
	            this.match(Java8Parser.Identifier);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 2528;
	            this.classType();
	            this.state = 2529;
	            this.match(Java8Parser.COLONCOLON);
	            this.state = 2531;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===68) {
	                this.state = 2530;
	                this.typeArguments();
	            }

	            this.state = 2533;
	            this.match(Java8Parser.NEW);
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 2535;
	            this.arrayType();
	            this.state = 2536;
	            this.match(Java8Parser.COLONCOLON);
	            this.state = 2537;
	            this.match(Java8Parser.NEW);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	arrayCreationExpression() {
	    let localctx = new ArrayCreationExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 406, Java8Parser.RULE_arrayCreationExpression);
	    try {
	        this.state = 2563;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,290,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2541;
	            this.match(Java8Parser.NEW);
	            this.state = 2542;
	            this.primitiveType();
	            this.state = 2543;
	            this.dimExprs();
	            this.state = 2545;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,288,this._ctx);
	            if(la_===1) {
	                this.state = 2544;
	                this.dims();

	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2547;
	            this.match(Java8Parser.NEW);
	            this.state = 2548;
	            this.classOrInterfaceType();
	            this.state = 2549;
	            this.dimExprs();
	            this.state = 2551;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,289,this._ctx);
	            if(la_===1) {
	                this.state = 2550;
	                this.dims();

	            }
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2553;
	            this.match(Java8Parser.NEW);
	            this.state = 2554;
	            this.primitiveType();
	            this.state = 2555;
	            this.dims();
	            this.state = 2556;
	            this.arrayInitializer();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2558;
	            this.match(Java8Parser.NEW);
	            this.state = 2559;
	            this.classOrInterfaceType();
	            this.state = 2560;
	            this.dims();
	            this.state = 2561;
	            this.arrayInitializer();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dimExprs() {
	    let localctx = new DimExprsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 408, Java8Parser.RULE_dimExprs);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2565;
	        this.dimExpr();
	        this.state = 2569;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,291,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 2566;
	                this.dimExpr(); 
	            }
	            this.state = 2571;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,291,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dimExpr() {
	    let localctx = new DimExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 410, Java8Parser.RULE_dimExpr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2575;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===103) {
	            this.state = 2572;
	            this.annotation();
	            this.state = 2577;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 2578;
	        this.match(Java8Parser.LBRACK);
	        this.state = 2579;
	        this.expression();
	        this.state = 2580;
	        this.match(Java8Parser.RBRACK);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constantExpression() {
	    let localctx = new ConstantExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 412, Java8Parser.RULE_constantExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2582;
	        this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expression() {
	    let localctx = new ExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 414, Java8Parser.RULE_expression);
	    try {
	        this.state = 2586;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,293,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2584;
	            this.lambdaExpression();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2585;
	            this.assignmentExpression();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lambdaExpression() {
	    let localctx = new LambdaExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 416, Java8Parser.RULE_lambdaExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2588;
	        this.lambdaParameters();
	        this.state = 2589;
	        this.match(Java8Parser.ARROW);
	        this.state = 2590;
	        this.lambdaBody();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lambdaParameters() {
	    let localctx = new LambdaParametersContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 418, Java8Parser.RULE_lambdaParameters);
	    var _la = 0;
	    try {
	        this.state = 2602;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,295,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2592;
	            this.match(Java8Parser.Identifier);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2593;
	            this.match(Java8Parser.LPAREN);
	            this.state = 2595;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 672416040) !== 0) || _la===37 || _la===102 || _la===103) {
	                this.state = 2594;
	                this.formalParameterList();
	            }

	            this.state = 2597;
	            this.match(Java8Parser.RPAREN);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2598;
	            this.match(Java8Parser.LPAREN);
	            this.state = 2599;
	            this.inferredFormalParameterList();
	            this.state = 2600;
	            this.match(Java8Parser.RPAREN);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	inferredFormalParameterList() {
	    let localctx = new InferredFormalParameterListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 420, Java8Parser.RULE_inferredFormalParameterList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2604;
	        this.match(Java8Parser.Identifier);
	        this.state = 2609;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===64) {
	            this.state = 2605;
	            this.match(Java8Parser.COMMA);
	            this.state = 2606;
	            this.match(Java8Parser.Identifier);
	            this.state = 2611;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lambdaBody() {
	    let localctx = new LambdaBodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 422, Java8Parser.RULE_lambdaBody);
	    try {
	        this.state = 2614;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 3:
	        case 5:
	        case 8:
	        case 14:
	        case 20:
	        case 27:
	        case 29:
	        case 31:
	        case 37:
	        case 40:
	        case 43:
	        case 48:
	        case 51:
	        case 52:
	        case 53:
	        case 54:
	        case 55:
	        case 56:
	        case 57:
	        case 69:
	        case 70:
	        case 79:
	        case 80:
	        case 81:
	        case 82:
	        case 102:
	        case 103:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2612;
	            this.expression();
	            break;
	        case 59:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2613;
	            this.block();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	assignmentExpression() {
	    let localctx = new AssignmentExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 424, Java8Parser.RULE_assignmentExpression);
	    try {
	        this.state = 2618;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,298,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2616;
	            this.conditionalExpression();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2617;
	            this.assignment();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	assignment() {
	    let localctx = new AssignmentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 426, Java8Parser.RULE_assignment);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2620;
	        this.leftHandSide();
	        this.state = 2621;
	        this.assignmentOperator();
	        this.state = 2622;
	        this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	leftHandSide() {
	    let localctx = new LeftHandSideContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 428, Java8Parser.RULE_leftHandSide);
	    try {
	        this.state = 2627;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,299,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2624;
	            this.expressionName();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2625;
	            this.fieldAccess();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2626;
	            this.arrayAccess();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	assignmentOperator() {
	    let localctx = new AssignmentOperatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 430, Java8Parser.RULE_assignmentOperator);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2629;
	        _la = this._input.LA(1);
	        if(!(((((_la - 66)) & ~0x1f) === 0 && ((1 << (_la - 66)) & 4261412865) !== 0) || ((((_la - 98)) & ~0x1f) === 0 && ((1 << (_la - 98)) & 15) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	conditionalExpression() {
	    let localctx = new ConditionalExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 432, Java8Parser.RULE_conditionalExpression);
	    try {
	        this.state = 2638;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,300,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2631;
	            this.conditionalOrExpression(0);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2632;
	            this.conditionalOrExpression(0);
	            this.state = 2633;
	            this.match(Java8Parser.QUESTION);
	            this.state = 2634;
	            this.expression();
	            this.state = 2635;
	            this.match(Java8Parser.COLON);
	            this.state = 2636;
	            this.conditionalExpression();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	conditionalOrExpression(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new ConditionalOrExpressionContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 434;
	    this.enterRecursionRule(localctx, 434, Java8Parser.RULE_conditionalOrExpression, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2641;
	        this.conditionalAndExpression(0);
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 2648;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,301,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new ConditionalOrExpressionContext(this, _parentctx, _parentState);
	                this.pushNewRecursionContext(localctx, _startState, Java8Parser.RULE_conditionalOrExpression);
	                this.state = 2643;
	                if (!( this.precpred(this._ctx, 1))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                }
	                this.state = 2644;
	                this.match(Java8Parser.OR);
	                this.state = 2645;
	                this.conditionalAndExpression(0); 
	            }
	            this.state = 2650;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,301,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}


	conditionalAndExpression(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new ConditionalAndExpressionContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 436;
	    this.enterRecursionRule(localctx, 436, Java8Parser.RULE_conditionalAndExpression, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2652;
	        this.inclusiveOrExpression(0);
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 2659;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,302,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new ConditionalAndExpressionContext(this, _parentctx, _parentState);
	                this.pushNewRecursionContext(localctx, _startState, Java8Parser.RULE_conditionalAndExpression);
	                this.state = 2654;
	                if (!( this.precpred(this._ctx, 1))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                }
	                this.state = 2655;
	                this.match(Java8Parser.AND);
	                this.state = 2656;
	                this.inclusiveOrExpression(0); 
	            }
	            this.state = 2661;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,302,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}


	inclusiveOrExpression(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new InclusiveOrExpressionContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 438;
	    this.enterRecursionRule(localctx, 438, Java8Parser.RULE_inclusiveOrExpression, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2663;
	        this.exclusiveOrExpression(0);
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 2670;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,303,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new InclusiveOrExpressionContext(this, _parentctx, _parentState);
	                this.pushNewRecursionContext(localctx, _startState, Java8Parser.RULE_inclusiveOrExpression);
	                this.state = 2665;
	                if (!( this.precpred(this._ctx, 1))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                }
	                this.state = 2666;
	                this.match(Java8Parser.BITOR);
	                this.state = 2667;
	                this.exclusiveOrExpression(0); 
	            }
	            this.state = 2672;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,303,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}


	exclusiveOrExpression(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new ExclusiveOrExpressionContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 440;
	    this.enterRecursionRule(localctx, 440, Java8Parser.RULE_exclusiveOrExpression, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2674;
	        this.andExpression(0);
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 2681;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,304,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new ExclusiveOrExpressionContext(this, _parentctx, _parentState);
	                this.pushNewRecursionContext(localctx, _startState, Java8Parser.RULE_exclusiveOrExpression);
	                this.state = 2676;
	                if (!( this.precpred(this._ctx, 1))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                }
	                this.state = 2677;
	                this.match(Java8Parser.CARET);
	                this.state = 2678;
	                this.andExpression(0); 
	            }
	            this.state = 2683;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,304,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}


	andExpression(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new AndExpressionContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 442;
	    this.enterRecursionRule(localctx, 442, Java8Parser.RULE_andExpression, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2685;
	        this.equalityExpression(0);
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 2692;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,305,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new AndExpressionContext(this, _parentctx, _parentState);
	                this.pushNewRecursionContext(localctx, _startState, Java8Parser.RULE_andExpression);
	                this.state = 2687;
	                if (!( this.precpred(this._ctx, 1))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                }
	                this.state = 2688;
	                this.match(Java8Parser.BITAND);
	                this.state = 2689;
	                this.equalityExpression(0); 
	            }
	            this.state = 2694;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,305,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}


	equalityExpression(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new EqualityExpressionContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 444;
	    this.enterRecursionRule(localctx, 444, Java8Parser.RULE_equalityExpression, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2696;
	        this.relationalExpression(0);
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 2706;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,307,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                this.state = 2704;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,306,this._ctx);
	                switch(la_) {
	                case 1:
	                    localctx = new EqualityExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, Java8Parser.RULE_equalityExpression);
	                    this.state = 2698;
	                    if (!( this.precpred(this._ctx, 2))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
	                    }
	                    this.state = 2699;
	                    this.match(Java8Parser.EQUAL);
	                    this.state = 2700;
	                    this.relationalExpression(0);
	                    break;

	                case 2:
	                    localctx = new EqualityExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, Java8Parser.RULE_equalityExpression);
	                    this.state = 2701;
	                    if (!( this.precpred(this._ctx, 1))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                    }
	                    this.state = 2702;
	                    this.match(Java8Parser.NOTEQUAL);
	                    this.state = 2703;
	                    this.relationalExpression(0);
	                    break;

	                } 
	            }
	            this.state = 2708;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,307,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}


	relationalExpression(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new RelationalExpressionContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 446;
	    this.enterRecursionRule(localctx, 446, Java8Parser.RULE_relationalExpression, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2710;
	        this.shiftExpression(0);
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 2729;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,309,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                this.state = 2727;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,308,this._ctx);
	                switch(la_) {
	                case 1:
	                    localctx = new RelationalExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, Java8Parser.RULE_relationalExpression);
	                    this.state = 2712;
	                    if (!( this.precpred(this._ctx, 5))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 5)");
	                    }
	                    this.state = 2713;
	                    this.match(Java8Parser.LT);
	                    this.state = 2714;
	                    this.shiftExpression(0);
	                    break;

	                case 2:
	                    localctx = new RelationalExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, Java8Parser.RULE_relationalExpression);
	                    this.state = 2715;
	                    if (!( this.precpred(this._ctx, 4))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 4)");
	                    }
	                    this.state = 2716;
	                    this.match(Java8Parser.GT);
	                    this.state = 2717;
	                    this.shiftExpression(0);
	                    break;

	                case 3:
	                    localctx = new RelationalExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, Java8Parser.RULE_relationalExpression);
	                    this.state = 2718;
	                    if (!( this.precpred(this._ctx, 3))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
	                    }
	                    this.state = 2719;
	                    this.match(Java8Parser.LE);
	                    this.state = 2720;
	                    this.shiftExpression(0);
	                    break;

	                case 4:
	                    localctx = new RelationalExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, Java8Parser.RULE_relationalExpression);
	                    this.state = 2721;
	                    if (!( this.precpred(this._ctx, 2))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
	                    }
	                    this.state = 2722;
	                    this.match(Java8Parser.GE);
	                    this.state = 2723;
	                    this.shiftExpression(0);
	                    break;

	                case 5:
	                    localctx = new RelationalExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, Java8Parser.RULE_relationalExpression);
	                    this.state = 2724;
	                    if (!( this.precpred(this._ctx, 1))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                    }
	                    this.state = 2725;
	                    this.match(Java8Parser.INSTANCEOF);
	                    this.state = 2726;
	                    this.referenceType();
	                    break;

	                } 
	            }
	            this.state = 2731;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,309,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}


	shiftExpression(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new ShiftExpressionContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 448;
	    this.enterRecursionRule(localctx, 448, Java8Parser.RULE_shiftExpression, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2733;
	        this.additiveExpression(0);
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 2750;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,311,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                this.state = 2748;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,310,this._ctx);
	                switch(la_) {
	                case 1:
	                    localctx = new ShiftExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, Java8Parser.RULE_shiftExpression);
	                    this.state = 2735;
	                    if (!( this.precpred(this._ctx, 3))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
	                    }
	                    this.state = 2736;
	                    this.match(Java8Parser.LT);
	                    this.state = 2737;
	                    this.match(Java8Parser.LT);
	                    this.state = 2738;
	                    this.additiveExpression(0);
	                    break;

	                case 2:
	                    localctx = new ShiftExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, Java8Parser.RULE_shiftExpression);
	                    this.state = 2739;
	                    if (!( this.precpred(this._ctx, 2))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
	                    }
	                    this.state = 2740;
	                    this.match(Java8Parser.GT);
	                    this.state = 2741;
	                    this.match(Java8Parser.GT);
	                    this.state = 2742;
	                    this.additiveExpression(0);
	                    break;

	                case 3:
	                    localctx = new ShiftExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, Java8Parser.RULE_shiftExpression);
	                    this.state = 2743;
	                    if (!( this.precpred(this._ctx, 1))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                    }
	                    this.state = 2744;
	                    this.match(Java8Parser.GT);
	                    this.state = 2745;
	                    this.match(Java8Parser.GT);
	                    this.state = 2746;
	                    this.match(Java8Parser.GT);
	                    this.state = 2747;
	                    this.additiveExpression(0);
	                    break;

	                } 
	            }
	            this.state = 2752;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,311,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}


	additiveExpression(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new AdditiveExpressionContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 450;
	    this.enterRecursionRule(localctx, 450, Java8Parser.RULE_additiveExpression, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2754;
	        this.multiplicativeExpression(0);
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 2764;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,313,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                this.state = 2762;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,312,this._ctx);
	                switch(la_) {
	                case 1:
	                    localctx = new AdditiveExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, Java8Parser.RULE_additiveExpression);
	                    this.state = 2756;
	                    if (!( this.precpred(this._ctx, 2))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
	                    }
	                    this.state = 2757;
	                    this.match(Java8Parser.ADD);
	                    this.state = 2758;
	                    this.multiplicativeExpression(0);
	                    break;

	                case 2:
	                    localctx = new AdditiveExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, Java8Parser.RULE_additiveExpression);
	                    this.state = 2759;
	                    if (!( this.precpred(this._ctx, 1))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                    }
	                    this.state = 2760;
	                    this.match(Java8Parser.SUB);
	                    this.state = 2761;
	                    this.multiplicativeExpression(0);
	                    break;

	                } 
	            }
	            this.state = 2766;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,313,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}


	multiplicativeExpression(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new MultiplicativeExpressionContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 452;
	    this.enterRecursionRule(localctx, 452, Java8Parser.RULE_multiplicativeExpression, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2768;
	        this.unaryExpression();
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 2781;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,315,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                this.state = 2779;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,314,this._ctx);
	                switch(la_) {
	                case 1:
	                    localctx = new MultiplicativeExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, Java8Parser.RULE_multiplicativeExpression);
	                    this.state = 2770;
	                    if (!( this.precpred(this._ctx, 3))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
	                    }
	                    this.state = 2771;
	                    this.match(Java8Parser.MUL);
	                    this.state = 2772;
	                    this.unaryExpression();
	                    break;

	                case 2:
	                    localctx = new MultiplicativeExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, Java8Parser.RULE_multiplicativeExpression);
	                    this.state = 2773;
	                    if (!( this.precpred(this._ctx, 2))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
	                    }
	                    this.state = 2774;
	                    this.match(Java8Parser.DIV);
	                    this.state = 2775;
	                    this.unaryExpression();
	                    break;

	                case 3:
	                    localctx = new MultiplicativeExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, Java8Parser.RULE_multiplicativeExpression);
	                    this.state = 2776;
	                    if (!( this.precpred(this._ctx, 1))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                    }
	                    this.state = 2777;
	                    this.match(Java8Parser.MOD);
	                    this.state = 2778;
	                    this.unaryExpression();
	                    break;

	                } 
	            }
	            this.state = 2783;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,315,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	unaryExpression() {
	    let localctx = new UnaryExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 454, Java8Parser.RULE_unaryExpression);
	    try {
	        this.state = 2791;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 79:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2784;
	            this.preIncrementExpression();
	            break;
	        case 80:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2785;
	            this.preDecrementExpression();
	            break;
	        case 81:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2786;
	            this.match(Java8Parser.ADD);
	            this.state = 2787;
	            this.unaryExpression();
	            break;
	        case 82:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2788;
	            this.match(Java8Parser.SUB);
	            this.state = 2789;
	            this.unaryExpression();
	            break;
	        case 3:
	        case 5:
	        case 8:
	        case 14:
	        case 20:
	        case 27:
	        case 29:
	        case 31:
	        case 37:
	        case 40:
	        case 43:
	        case 48:
	        case 51:
	        case 52:
	        case 53:
	        case 54:
	        case 55:
	        case 56:
	        case 57:
	        case 69:
	        case 70:
	        case 102:
	        case 103:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 2790;
	            this.unaryExpressionNotPlusMinus();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	preIncrementExpression() {
	    let localctx = new PreIncrementExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 456, Java8Parser.RULE_preIncrementExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2793;
	        this.match(Java8Parser.INC);
	        this.state = 2794;
	        this.unaryExpression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	preDecrementExpression() {
	    let localctx = new PreDecrementExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 458, Java8Parser.RULE_preDecrementExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2796;
	        this.match(Java8Parser.DEC);
	        this.state = 2797;
	        this.unaryExpression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unaryExpressionNotPlusMinus() {
	    let localctx = new UnaryExpressionNotPlusMinusContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 460, Java8Parser.RULE_unaryExpressionNotPlusMinus);
	    try {
	        this.state = 2805;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,317,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2799;
	            this.postfixExpression();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2800;
	            this.match(Java8Parser.TILDE);
	            this.state = 2801;
	            this.unaryExpression();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2802;
	            this.match(Java8Parser.BANG);
	            this.state = 2803;
	            this.unaryExpression();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2804;
	            this.castExpression();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	postfixExpression() {
	    let localctx = new PostfixExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 462, Java8Parser.RULE_postfixExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2809;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,318,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 2807;
	            this.primary();
	            break;

	        case 2:
	            this.state = 2808;
	            this.expressionName();
	            break;

	        }
	        this.state = 2815;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,320,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 2813;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case 79:
	                    this.state = 2811;
	                    this.postIncrementExpression_lf_postfixExpression();
	                    break;
	                case 80:
	                    this.state = 2812;
	                    this.postDecrementExpression_lf_postfixExpression();
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                } 
	            }
	            this.state = 2817;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,320,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	postIncrementExpression() {
	    let localctx = new PostIncrementExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 464, Java8Parser.RULE_postIncrementExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2818;
	        this.postfixExpression();
	        this.state = 2819;
	        this.match(Java8Parser.INC);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	postIncrementExpression_lf_postfixExpression() {
	    let localctx = new PostIncrementExpression_lf_postfixExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 466, Java8Parser.RULE_postIncrementExpression_lf_postfixExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2821;
	        this.match(Java8Parser.INC);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	postDecrementExpression() {
	    let localctx = new PostDecrementExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 468, Java8Parser.RULE_postDecrementExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2823;
	        this.postfixExpression();
	        this.state = 2824;
	        this.match(Java8Parser.DEC);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	postDecrementExpression_lf_postfixExpression() {
	    let localctx = new PostDecrementExpression_lf_postfixExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 470, Java8Parser.RULE_postDecrementExpression_lf_postfixExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2826;
	        this.match(Java8Parser.DEC);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	castExpression() {
	    let localctx = new CastExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 472, Java8Parser.RULE_castExpression);
	    var _la = 0;
	    try {
	        this.state = 2855;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,323,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2828;
	            this.match(Java8Parser.LPAREN);
	            this.state = 2829;
	            this.primitiveType();
	            this.state = 2830;
	            this.match(Java8Parser.RPAREN);
	            this.state = 2831;
	            this.unaryExpression();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2833;
	            this.match(Java8Parser.LPAREN);
	            this.state = 2834;
	            this.referenceType();
	            this.state = 2838;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===85) {
	                this.state = 2835;
	                this.additionalBound();
	                this.state = 2840;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 2841;
	            this.match(Java8Parser.RPAREN);
	            this.state = 2842;
	            this.unaryExpressionNotPlusMinus();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2844;
	            this.match(Java8Parser.LPAREN);
	            this.state = 2845;
	            this.referenceType();
	            this.state = 2849;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===85) {
	                this.state = 2846;
	                this.additionalBound();
	                this.state = 2851;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 2852;
	            this.match(Java8Parser.RPAREN);
	            this.state = 2853;
	            this.lambdaExpression();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


}

Java8Parser.EOF = antlr4.Token.EOF;
Java8Parser.ABSTRACT = 1;
Java8Parser.ASSERT = 2;
Java8Parser.BOOLEAN = 3;
Java8Parser.BREAK = 4;
Java8Parser.BYTE = 5;
Java8Parser.CASE = 6;
Java8Parser.CATCH = 7;
Java8Parser.CHAR = 8;
Java8Parser.CLASS = 9;
Java8Parser.CONST = 10;
Java8Parser.CONTINUE = 11;
Java8Parser.DEFAULT = 12;
Java8Parser.DO = 13;
Java8Parser.DOUBLE = 14;
Java8Parser.ELSE = 15;
Java8Parser.ENUM = 16;
Java8Parser.EXTENDS = 17;
Java8Parser.FINAL = 18;
Java8Parser.FINALLY = 19;
Java8Parser.FLOAT = 20;
Java8Parser.FOR = 21;
Java8Parser.IF = 22;
Java8Parser.GOTO = 23;
Java8Parser.IMPLEMENTS = 24;
Java8Parser.IMPORT = 25;
Java8Parser.INSTANCEOF = 26;
Java8Parser.INT = 27;
Java8Parser.INTERFACE = 28;
Java8Parser.LONG = 29;
Java8Parser.NATIVE = 30;
Java8Parser.NEW = 31;
Java8Parser.PACKAGE = 32;
Java8Parser.PRIVATE = 33;
Java8Parser.PROTECTED = 34;
Java8Parser.PUBLIC = 35;
Java8Parser.RETURN = 36;
Java8Parser.SHORT = 37;
Java8Parser.STATIC = 38;
Java8Parser.STRICTFP = 39;
Java8Parser.SUPER = 40;
Java8Parser.SWITCH = 41;
Java8Parser.SYNCHRONIZED = 42;
Java8Parser.THIS = 43;
Java8Parser.THROW = 44;
Java8Parser.THROWS = 45;
Java8Parser.TRANSIENT = 46;
Java8Parser.TRY = 47;
Java8Parser.VOID = 48;
Java8Parser.VOLATILE = 49;
Java8Parser.WHILE = 50;
Java8Parser.IntegerLiteral = 51;
Java8Parser.FloatingPointLiteral = 52;
Java8Parser.BooleanLiteral = 53;
Java8Parser.CharacterLiteral = 54;
Java8Parser.StringLiteral = 55;
Java8Parser.NullLiteral = 56;
Java8Parser.LPAREN = 57;
Java8Parser.RPAREN = 58;
Java8Parser.LBRACE = 59;
Java8Parser.RBRACE = 60;
Java8Parser.LBRACK = 61;
Java8Parser.RBRACK = 62;
Java8Parser.SEMI = 63;
Java8Parser.COMMA = 64;
Java8Parser.DOT = 65;
Java8Parser.ASSIGN = 66;
Java8Parser.GT = 67;
Java8Parser.LT = 68;
Java8Parser.BANG = 69;
Java8Parser.TILDE = 70;
Java8Parser.QUESTION = 71;
Java8Parser.COLON = 72;
Java8Parser.EQUAL = 73;
Java8Parser.LE = 74;
Java8Parser.GE = 75;
Java8Parser.NOTEQUAL = 76;
Java8Parser.AND = 77;
Java8Parser.OR = 78;
Java8Parser.INC = 79;
Java8Parser.DEC = 80;
Java8Parser.ADD = 81;
Java8Parser.SUB = 82;
Java8Parser.MUL = 83;
Java8Parser.DIV = 84;
Java8Parser.BITAND = 85;
Java8Parser.BITOR = 86;
Java8Parser.CARET = 87;
Java8Parser.MOD = 88;
Java8Parser.ARROW = 89;
Java8Parser.COLONCOLON = 90;
Java8Parser.ADD_ASSIGN = 91;
Java8Parser.SUB_ASSIGN = 92;
Java8Parser.MUL_ASSIGN = 93;
Java8Parser.DIV_ASSIGN = 94;
Java8Parser.AND_ASSIGN = 95;
Java8Parser.OR_ASSIGN = 96;
Java8Parser.XOR_ASSIGN = 97;
Java8Parser.MOD_ASSIGN = 98;
Java8Parser.LSHIFT_ASSIGN = 99;
Java8Parser.RSHIFT_ASSIGN = 100;
Java8Parser.URSHIFT_ASSIGN = 101;
Java8Parser.Identifier = 102;
Java8Parser.AT = 103;
Java8Parser.ELLIPSIS = 104;
Java8Parser.WS = 105;
Java8Parser.COMMENT = 106;
Java8Parser.LINE_COMMENT = 107;

Java8Parser.RULE_literal = 0;
Java8Parser.RULE_type = 1;
Java8Parser.RULE_primitiveType = 2;
Java8Parser.RULE_numericType = 3;
Java8Parser.RULE_integralType = 4;
Java8Parser.RULE_floatingPointType = 5;
Java8Parser.RULE_referenceType = 6;
Java8Parser.RULE_classOrInterfaceType = 7;
Java8Parser.RULE_classType = 8;
Java8Parser.RULE_classType_lf_classOrInterfaceType = 9;
Java8Parser.RULE_classType_lfno_classOrInterfaceType = 10;
Java8Parser.RULE_interfaceType = 11;
Java8Parser.RULE_interfaceType_lf_classOrInterfaceType = 12;
Java8Parser.RULE_interfaceType_lfno_classOrInterfaceType = 13;
Java8Parser.RULE_typeVariable = 14;
Java8Parser.RULE_arrayType = 15;
Java8Parser.RULE_dims = 16;
Java8Parser.RULE_typeParameter = 17;
Java8Parser.RULE_typeParameterModifier = 18;
Java8Parser.RULE_typeBound = 19;
Java8Parser.RULE_additionalBound = 20;
Java8Parser.RULE_typeArguments = 21;
Java8Parser.RULE_typeArgumentList = 22;
Java8Parser.RULE_typeArgument = 23;
Java8Parser.RULE_wildcard = 24;
Java8Parser.RULE_wildcardBounds = 25;
Java8Parser.RULE_packageName = 26;
Java8Parser.RULE_typeName = 27;
Java8Parser.RULE_packageOrTypeName = 28;
Java8Parser.RULE_expressionName = 29;
Java8Parser.RULE_methodName = 30;
Java8Parser.RULE_ambiguousName = 31;
Java8Parser.RULE_compilationUnit = 32;
Java8Parser.RULE_packageDeclaration = 33;
Java8Parser.RULE_packageModifier = 34;
Java8Parser.RULE_importDeclaration = 35;
Java8Parser.RULE_singleTypeImportDeclaration = 36;
Java8Parser.RULE_typeImportOnDemandDeclaration = 37;
Java8Parser.RULE_singleStaticImportDeclaration = 38;
Java8Parser.RULE_staticImportOnDemandDeclaration = 39;
Java8Parser.RULE_typeDeclaration = 40;
Java8Parser.RULE_classDeclaration = 41;
Java8Parser.RULE_normalClassDeclaration = 42;
Java8Parser.RULE_classModifier = 43;
Java8Parser.RULE_typeParameters = 44;
Java8Parser.RULE_typeParameterList = 45;
Java8Parser.RULE_superclass = 46;
Java8Parser.RULE_superinterfaces = 47;
Java8Parser.RULE_interfaceTypeList = 48;
Java8Parser.RULE_classBody = 49;
Java8Parser.RULE_classBodyDeclaration = 50;
Java8Parser.RULE_classMemberDeclaration = 51;
Java8Parser.RULE_fieldDeclaration = 52;
Java8Parser.RULE_fieldModifier = 53;
Java8Parser.RULE_variableDeclaratorList = 54;
Java8Parser.RULE_variableDeclarator = 55;
Java8Parser.RULE_variableDeclaratorId = 56;
Java8Parser.RULE_variableInitializer = 57;
Java8Parser.RULE_unannType = 58;
Java8Parser.RULE_unannPrimitiveType = 59;
Java8Parser.RULE_unannReferenceType = 60;
Java8Parser.RULE_unannClassOrInterfaceType = 61;
Java8Parser.RULE_unannClassType = 62;
Java8Parser.RULE_unannClassType_lf_unannClassOrInterfaceType = 63;
Java8Parser.RULE_unannClassType_lfno_unannClassOrInterfaceType = 64;
Java8Parser.RULE_unannInterfaceType = 65;
Java8Parser.RULE_unannInterfaceType_lf_unannClassOrInterfaceType = 66;
Java8Parser.RULE_unannInterfaceType_lfno_unannClassOrInterfaceType = 67;
Java8Parser.RULE_unannTypeVariable = 68;
Java8Parser.RULE_unannArrayType = 69;
Java8Parser.RULE_methodDeclaration = 70;
Java8Parser.RULE_methodModifier = 71;
Java8Parser.RULE_methodHeader = 72;
Java8Parser.RULE_result = 73;
Java8Parser.RULE_methodDeclarator = 74;
Java8Parser.RULE_formalParameterList = 75;
Java8Parser.RULE_formalParameters = 76;
Java8Parser.RULE_formalParameter = 77;
Java8Parser.RULE_variableModifier = 78;
Java8Parser.RULE_lastFormalParameter = 79;
Java8Parser.RULE_receiverParameter = 80;
Java8Parser.RULE_throws_ = 81;
Java8Parser.RULE_exceptionTypeList = 82;
Java8Parser.RULE_exceptionType = 83;
Java8Parser.RULE_methodBody = 84;
Java8Parser.RULE_instanceInitializer = 85;
Java8Parser.RULE_staticInitializer = 86;
Java8Parser.RULE_constructorDeclaration = 87;
Java8Parser.RULE_constructorModifier = 88;
Java8Parser.RULE_constructorDeclarator = 89;
Java8Parser.RULE_simpleTypeName = 90;
Java8Parser.RULE_constructorBody = 91;
Java8Parser.RULE_explicitConstructorInvocation = 92;
Java8Parser.RULE_enumDeclaration = 93;
Java8Parser.RULE_enumBody = 94;
Java8Parser.RULE_enumConstantList = 95;
Java8Parser.RULE_enumConstant = 96;
Java8Parser.RULE_enumConstantModifier = 97;
Java8Parser.RULE_enumBodyDeclarations = 98;
Java8Parser.RULE_interfaceDeclaration = 99;
Java8Parser.RULE_normalInterfaceDeclaration = 100;
Java8Parser.RULE_interfaceModifier = 101;
Java8Parser.RULE_extendsInterfaces = 102;
Java8Parser.RULE_interfaceBody = 103;
Java8Parser.RULE_interfaceMemberDeclaration = 104;
Java8Parser.RULE_constantDeclaration = 105;
Java8Parser.RULE_constantModifier = 106;
Java8Parser.RULE_interfaceMethodDeclaration = 107;
Java8Parser.RULE_interfaceMethodModifier = 108;
Java8Parser.RULE_annotationTypeDeclaration = 109;
Java8Parser.RULE_annotationTypeBody = 110;
Java8Parser.RULE_annotationTypeMemberDeclaration = 111;
Java8Parser.RULE_annotationTypeElementDeclaration = 112;
Java8Parser.RULE_annotationTypeElementModifier = 113;
Java8Parser.RULE_defaultValue = 114;
Java8Parser.RULE_annotation = 115;
Java8Parser.RULE_normalAnnotation = 116;
Java8Parser.RULE_elementValuePairList = 117;
Java8Parser.RULE_elementValuePair = 118;
Java8Parser.RULE_elementValue = 119;
Java8Parser.RULE_elementValueArrayInitializer = 120;
Java8Parser.RULE_elementValueList = 121;
Java8Parser.RULE_markerAnnotation = 122;
Java8Parser.RULE_singleElementAnnotation = 123;
Java8Parser.RULE_arrayInitializer = 124;
Java8Parser.RULE_variableInitializerList = 125;
Java8Parser.RULE_block = 126;
Java8Parser.RULE_blockStatements = 127;
Java8Parser.RULE_blockStatement = 128;
Java8Parser.RULE_localVariableDeclarationStatement = 129;
Java8Parser.RULE_localVariableDeclaration = 130;
Java8Parser.RULE_statement = 131;
Java8Parser.RULE_statementNoShortIf = 132;
Java8Parser.RULE_statementWithoutTrailingSubstatement = 133;
Java8Parser.RULE_emptyStatement = 134;
Java8Parser.RULE_labeledStatement = 135;
Java8Parser.RULE_labeledStatementNoShortIf = 136;
Java8Parser.RULE_expressionStatement = 137;
Java8Parser.RULE_statementExpression = 138;
Java8Parser.RULE_ifThenStatement = 139;
Java8Parser.RULE_ifThenElseStatement = 140;
Java8Parser.RULE_ifThenElseStatementNoShortIf = 141;
Java8Parser.RULE_assertStatement = 142;
Java8Parser.RULE_switchStatement = 143;
Java8Parser.RULE_switchBlock = 144;
Java8Parser.RULE_switchBlockStatementGroup = 145;
Java8Parser.RULE_switchLabels = 146;
Java8Parser.RULE_switchLabel = 147;
Java8Parser.RULE_enumConstantName = 148;
Java8Parser.RULE_whileStatement = 149;
Java8Parser.RULE_whileStatementNoShortIf = 150;
Java8Parser.RULE_doStatement = 151;
Java8Parser.RULE_forStatement = 152;
Java8Parser.RULE_forStatementNoShortIf = 153;
Java8Parser.RULE_basicForStatement = 154;
Java8Parser.RULE_basicForStatementNoShortIf = 155;
Java8Parser.RULE_forInit = 156;
Java8Parser.RULE_forUpdate = 157;
Java8Parser.RULE_statementExpressionList = 158;
Java8Parser.RULE_enhancedForStatement = 159;
Java8Parser.RULE_enhancedForStatementNoShortIf = 160;
Java8Parser.RULE_breakStatement = 161;
Java8Parser.RULE_continueStatement = 162;
Java8Parser.RULE_returnStatement = 163;
Java8Parser.RULE_throwStatement = 164;
Java8Parser.RULE_synchronizedStatement = 165;
Java8Parser.RULE_tryStatement = 166;
Java8Parser.RULE_catches = 167;
Java8Parser.RULE_catchClause = 168;
Java8Parser.RULE_catchFormalParameter = 169;
Java8Parser.RULE_catchType = 170;
Java8Parser.RULE_finally_ = 171;
Java8Parser.RULE_tryWithResourcesStatement = 172;
Java8Parser.RULE_resourceSpecification = 173;
Java8Parser.RULE_resourceList = 174;
Java8Parser.RULE_resource = 175;
Java8Parser.RULE_primary = 176;
Java8Parser.RULE_primaryNoNewArray = 177;
Java8Parser.RULE_primaryNoNewArray_lf_arrayAccess = 178;
Java8Parser.RULE_primaryNoNewArray_lfno_arrayAccess = 179;
Java8Parser.RULE_primaryNoNewArray_lf_primary = 180;
Java8Parser.RULE_primaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary = 181;
Java8Parser.RULE_primaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary = 182;
Java8Parser.RULE_primaryNoNewArray_lfno_primary = 183;
Java8Parser.RULE_primaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary = 184;
Java8Parser.RULE_primaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary = 185;
Java8Parser.RULE_classInstanceCreationExpression = 186;
Java8Parser.RULE_classInstanceCreationExpression_lf_primary = 187;
Java8Parser.RULE_classInstanceCreationExpression_lfno_primary = 188;
Java8Parser.RULE_typeArgumentsOrDiamond = 189;
Java8Parser.RULE_fieldAccess = 190;
Java8Parser.RULE_fieldAccess_lf_primary = 191;
Java8Parser.RULE_fieldAccess_lfno_primary = 192;
Java8Parser.RULE_arrayAccess = 193;
Java8Parser.RULE_arrayAccess_lf_primary = 194;
Java8Parser.RULE_arrayAccess_lfno_primary = 195;
Java8Parser.RULE_methodInvocation = 196;
Java8Parser.RULE_methodInvocation_lf_primary = 197;
Java8Parser.RULE_methodInvocation_lfno_primary = 198;
Java8Parser.RULE_argumentList = 199;
Java8Parser.RULE_methodReference = 200;
Java8Parser.RULE_methodReference_lf_primary = 201;
Java8Parser.RULE_methodReference_lfno_primary = 202;
Java8Parser.RULE_arrayCreationExpression = 203;
Java8Parser.RULE_dimExprs = 204;
Java8Parser.RULE_dimExpr = 205;
Java8Parser.RULE_constantExpression = 206;
Java8Parser.RULE_expression = 207;
Java8Parser.RULE_lambdaExpression = 208;
Java8Parser.RULE_lambdaParameters = 209;
Java8Parser.RULE_inferredFormalParameterList = 210;
Java8Parser.RULE_lambdaBody = 211;
Java8Parser.RULE_assignmentExpression = 212;
Java8Parser.RULE_assignment = 213;
Java8Parser.RULE_leftHandSide = 214;
Java8Parser.RULE_assignmentOperator = 215;
Java8Parser.RULE_conditionalExpression = 216;
Java8Parser.RULE_conditionalOrExpression = 217;
Java8Parser.RULE_conditionalAndExpression = 218;
Java8Parser.RULE_inclusiveOrExpression = 219;
Java8Parser.RULE_exclusiveOrExpression = 220;
Java8Parser.RULE_andExpression = 221;
Java8Parser.RULE_equalityExpression = 222;
Java8Parser.RULE_relationalExpression = 223;
Java8Parser.RULE_shiftExpression = 224;
Java8Parser.RULE_additiveExpression = 225;
Java8Parser.RULE_multiplicativeExpression = 226;
Java8Parser.RULE_unaryExpression = 227;
Java8Parser.RULE_preIncrementExpression = 228;
Java8Parser.RULE_preDecrementExpression = 229;
Java8Parser.RULE_unaryExpressionNotPlusMinus = 230;
Java8Parser.RULE_postfixExpression = 231;
Java8Parser.RULE_postIncrementExpression = 232;
Java8Parser.RULE_postIncrementExpression_lf_postfixExpression = 233;
Java8Parser.RULE_postDecrementExpression = 234;
Java8Parser.RULE_postDecrementExpression_lf_postfixExpression = 235;
Java8Parser.RULE_castExpression = 236;

class LiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_literal;
    }

	IntegerLiteral() {
	    return this.getToken(Java8Parser.IntegerLiteral, 0);
	};

	FloatingPointLiteral() {
	    return this.getToken(Java8Parser.FloatingPointLiteral, 0);
	};

	BooleanLiteral() {
	    return this.getToken(Java8Parser.BooleanLiteral, 0);
	};

	CharacterLiteral() {
	    return this.getToken(Java8Parser.CharacterLiteral, 0);
	};

	StringLiteral() {
	    return this.getToken(Java8Parser.StringLiteral, 0);
	};

	NullLiteral() {
	    return this.getToken(Java8Parser.NullLiteral, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitLiteral(this);
		}
	}


}



class TypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_type;
    }

	primitiveType() {
	    return this.getTypedRuleContext(PrimitiveTypeContext,0);
	};

	referenceType() {
	    return this.getTypedRuleContext(ReferenceTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitType(this);
		}
	}


}



class PrimitiveTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_primitiveType;
    }

	numericType() {
	    return this.getTypedRuleContext(NumericTypeContext,0);
	};

	annotation = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationContext);
	    } else {
	        return this.getTypedRuleContext(AnnotationContext,i);
	    }
	};

	BOOLEAN() {
	    return this.getToken(Java8Parser.BOOLEAN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterPrimitiveType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitPrimitiveType(this);
		}
	}


}



class NumericTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_numericType;
    }

	integralType() {
	    return this.getTypedRuleContext(IntegralTypeContext,0);
	};

	floatingPointType() {
	    return this.getTypedRuleContext(FloatingPointTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterNumericType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitNumericType(this);
		}
	}


}



class IntegralTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_integralType;
    }

	BYTE() {
	    return this.getToken(Java8Parser.BYTE, 0);
	};

	SHORT() {
	    return this.getToken(Java8Parser.SHORT, 0);
	};

	INT() {
	    return this.getToken(Java8Parser.INT, 0);
	};

	LONG() {
	    return this.getToken(Java8Parser.LONG, 0);
	};

	CHAR() {
	    return this.getToken(Java8Parser.CHAR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterIntegralType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitIntegralType(this);
		}
	}


}



class FloatingPointTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_floatingPointType;
    }

	FLOAT() {
	    return this.getToken(Java8Parser.FLOAT, 0);
	};

	DOUBLE() {
	    return this.getToken(Java8Parser.DOUBLE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterFloatingPointType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitFloatingPointType(this);
		}
	}


}



class ReferenceTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_referenceType;
    }

	classOrInterfaceType() {
	    return this.getTypedRuleContext(ClassOrInterfaceTypeContext,0);
	};

	typeVariable() {
	    return this.getTypedRuleContext(TypeVariableContext,0);
	};

	arrayType() {
	    return this.getTypedRuleContext(ArrayTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterReferenceType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitReferenceType(this);
		}
	}


}



class ClassOrInterfaceTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_classOrInterfaceType;
    }

	classType_lfno_classOrInterfaceType() {
	    return this.getTypedRuleContext(ClassType_lfno_classOrInterfaceTypeContext,0);
	};

	interfaceType_lfno_classOrInterfaceType() {
	    return this.getTypedRuleContext(InterfaceType_lfno_classOrInterfaceTypeContext,0);
	};

	classType_lf_classOrInterfaceType = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ClassType_lf_classOrInterfaceTypeContext);
	    } else {
	        return this.getTypedRuleContext(ClassType_lf_classOrInterfaceTypeContext,i);
	    }
	};

	interfaceType_lf_classOrInterfaceType = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(InterfaceType_lf_classOrInterfaceTypeContext);
	    } else {
	        return this.getTypedRuleContext(InterfaceType_lf_classOrInterfaceTypeContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterClassOrInterfaceType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitClassOrInterfaceType(this);
		}
	}


}



class ClassTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_classType;
    }

	Identifier() {
	    return this.getToken(Java8Parser.Identifier, 0);
	};

	annotation = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationContext);
	    } else {
	        return this.getTypedRuleContext(AnnotationContext,i);
	    }
	};

	typeArguments() {
	    return this.getTypedRuleContext(TypeArgumentsContext,0);
	};

	classOrInterfaceType() {
	    return this.getTypedRuleContext(ClassOrInterfaceTypeContext,0);
	};

	DOT() {
	    return this.getToken(Java8Parser.DOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterClassType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitClassType(this);
		}
	}


}



class ClassType_lf_classOrInterfaceTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_classType_lf_classOrInterfaceType;
    }

	DOT() {
	    return this.getToken(Java8Parser.DOT, 0);
	};

	Identifier() {
	    return this.getToken(Java8Parser.Identifier, 0);
	};

	annotation = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationContext);
	    } else {
	        return this.getTypedRuleContext(AnnotationContext,i);
	    }
	};

	typeArguments() {
	    return this.getTypedRuleContext(TypeArgumentsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterClassType_lf_classOrInterfaceType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitClassType_lf_classOrInterfaceType(this);
		}
	}


}



class ClassType_lfno_classOrInterfaceTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_classType_lfno_classOrInterfaceType;
    }

	Identifier() {
	    return this.getToken(Java8Parser.Identifier, 0);
	};

	annotation = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationContext);
	    } else {
	        return this.getTypedRuleContext(AnnotationContext,i);
	    }
	};

	typeArguments() {
	    return this.getTypedRuleContext(TypeArgumentsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterClassType_lfno_classOrInterfaceType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitClassType_lfno_classOrInterfaceType(this);
		}
	}


}



class InterfaceTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_interfaceType;
    }

	classType() {
	    return this.getTypedRuleContext(ClassTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterInterfaceType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitInterfaceType(this);
		}
	}


}



class InterfaceType_lf_classOrInterfaceTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_interfaceType_lf_classOrInterfaceType;
    }

	classType_lf_classOrInterfaceType() {
	    return this.getTypedRuleContext(ClassType_lf_classOrInterfaceTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterInterfaceType_lf_classOrInterfaceType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitInterfaceType_lf_classOrInterfaceType(this);
		}
	}


}



class InterfaceType_lfno_classOrInterfaceTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_interfaceType_lfno_classOrInterfaceType;
    }

	classType_lfno_classOrInterfaceType() {
	    return this.getTypedRuleContext(ClassType_lfno_classOrInterfaceTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterInterfaceType_lfno_classOrInterfaceType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitInterfaceType_lfno_classOrInterfaceType(this);
		}
	}


}



class TypeVariableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_typeVariable;
    }

	Identifier() {
	    return this.getToken(Java8Parser.Identifier, 0);
	};

	annotation = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationContext);
	    } else {
	        return this.getTypedRuleContext(AnnotationContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterTypeVariable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitTypeVariable(this);
		}
	}


}



class ArrayTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_arrayType;
    }

	primitiveType() {
	    return this.getTypedRuleContext(PrimitiveTypeContext,0);
	};

	dims() {
	    return this.getTypedRuleContext(DimsContext,0);
	};

	classOrInterfaceType() {
	    return this.getTypedRuleContext(ClassOrInterfaceTypeContext,0);
	};

	typeVariable() {
	    return this.getTypedRuleContext(TypeVariableContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterArrayType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitArrayType(this);
		}
	}


}



class DimsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_dims;
    }

	LBRACK = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Java8Parser.LBRACK);
	    } else {
	        return this.getToken(Java8Parser.LBRACK, i);
	    }
	};


	RBRACK = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Java8Parser.RBRACK);
	    } else {
	        return this.getToken(Java8Parser.RBRACK, i);
	    }
	};


	annotation = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationContext);
	    } else {
	        return this.getTypedRuleContext(AnnotationContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterDims(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitDims(this);
		}
	}


}



class TypeParameterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_typeParameter;
    }

	Identifier() {
	    return this.getToken(Java8Parser.Identifier, 0);
	};

	typeParameterModifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TypeParameterModifierContext);
	    } else {
	        return this.getTypedRuleContext(TypeParameterModifierContext,i);
	    }
	};

	typeBound() {
	    return this.getTypedRuleContext(TypeBoundContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterTypeParameter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitTypeParameter(this);
		}
	}


}



class TypeParameterModifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_typeParameterModifier;
    }

	annotation() {
	    return this.getTypedRuleContext(AnnotationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterTypeParameterModifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitTypeParameterModifier(this);
		}
	}


}



class TypeBoundContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_typeBound;
    }

	EXTENDS() {
	    return this.getToken(Java8Parser.EXTENDS, 0);
	};

	typeVariable() {
	    return this.getTypedRuleContext(TypeVariableContext,0);
	};

	classOrInterfaceType() {
	    return this.getTypedRuleContext(ClassOrInterfaceTypeContext,0);
	};

	additionalBound = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AdditionalBoundContext);
	    } else {
	        return this.getTypedRuleContext(AdditionalBoundContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterTypeBound(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitTypeBound(this);
		}
	}


}



class AdditionalBoundContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_additionalBound;
    }

	BITAND() {
	    return this.getToken(Java8Parser.BITAND, 0);
	};

	interfaceType() {
	    return this.getTypedRuleContext(InterfaceTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterAdditionalBound(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitAdditionalBound(this);
		}
	}


}



class TypeArgumentsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_typeArguments;
    }

	LT() {
	    return this.getToken(Java8Parser.LT, 0);
	};

	typeArgumentList() {
	    return this.getTypedRuleContext(TypeArgumentListContext,0);
	};

	GT() {
	    return this.getToken(Java8Parser.GT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterTypeArguments(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitTypeArguments(this);
		}
	}


}



class TypeArgumentListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_typeArgumentList;
    }

	typeArgument = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TypeArgumentContext);
	    } else {
	        return this.getTypedRuleContext(TypeArgumentContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Java8Parser.COMMA);
	    } else {
	        return this.getToken(Java8Parser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterTypeArgumentList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitTypeArgumentList(this);
		}
	}


}



class TypeArgumentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_typeArgument;
    }

	referenceType() {
	    return this.getTypedRuleContext(ReferenceTypeContext,0);
	};

	wildcard() {
	    return this.getTypedRuleContext(WildcardContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterTypeArgument(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitTypeArgument(this);
		}
	}


}



class WildcardContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_wildcard;
    }

	QUESTION() {
	    return this.getToken(Java8Parser.QUESTION, 0);
	};

	annotation = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationContext);
	    } else {
	        return this.getTypedRuleContext(AnnotationContext,i);
	    }
	};

	wildcardBounds() {
	    return this.getTypedRuleContext(WildcardBoundsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterWildcard(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitWildcard(this);
		}
	}


}



class WildcardBoundsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_wildcardBounds;
    }

	EXTENDS() {
	    return this.getToken(Java8Parser.EXTENDS, 0);
	};

	referenceType() {
	    return this.getTypedRuleContext(ReferenceTypeContext,0);
	};

	SUPER() {
	    return this.getToken(Java8Parser.SUPER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterWildcardBounds(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitWildcardBounds(this);
		}
	}


}



class PackageNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_packageName;
    }

	Identifier() {
	    return this.getToken(Java8Parser.Identifier, 0);
	};

	packageName() {
	    return this.getTypedRuleContext(PackageNameContext,0);
	};

	DOT() {
	    return this.getToken(Java8Parser.DOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterPackageName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitPackageName(this);
		}
	}


}



class TypeNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_typeName;
    }

	Identifier() {
	    return this.getToken(Java8Parser.Identifier, 0);
	};

	packageOrTypeName() {
	    return this.getTypedRuleContext(PackageOrTypeNameContext,0);
	};

	DOT() {
	    return this.getToken(Java8Parser.DOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterTypeName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitTypeName(this);
		}
	}


}



class PackageOrTypeNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_packageOrTypeName;
    }

	Identifier() {
	    return this.getToken(Java8Parser.Identifier, 0);
	};

	packageOrTypeName() {
	    return this.getTypedRuleContext(PackageOrTypeNameContext,0);
	};

	DOT() {
	    return this.getToken(Java8Parser.DOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterPackageOrTypeName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitPackageOrTypeName(this);
		}
	}


}



class ExpressionNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_expressionName;
    }

	Identifier() {
	    return this.getToken(Java8Parser.Identifier, 0);
	};

	ambiguousName() {
	    return this.getTypedRuleContext(AmbiguousNameContext,0);
	};

	DOT() {
	    return this.getToken(Java8Parser.DOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterExpressionName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitExpressionName(this);
		}
	}


}



class MethodNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_methodName;
    }

	Identifier() {
	    return this.getToken(Java8Parser.Identifier, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterMethodName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitMethodName(this);
		}
	}


}



class AmbiguousNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_ambiguousName;
    }

	Identifier() {
	    return this.getToken(Java8Parser.Identifier, 0);
	};

	ambiguousName() {
	    return this.getTypedRuleContext(AmbiguousNameContext,0);
	};

	DOT() {
	    return this.getToken(Java8Parser.DOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterAmbiguousName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitAmbiguousName(this);
		}
	}


}



class CompilationUnitContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_compilationUnit;
    }

	EOF() {
	    return this.getToken(Java8Parser.EOF, 0);
	};

	packageDeclaration() {
	    return this.getTypedRuleContext(PackageDeclarationContext,0);
	};

	importDeclaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ImportDeclarationContext);
	    } else {
	        return this.getTypedRuleContext(ImportDeclarationContext,i);
	    }
	};

	typeDeclaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TypeDeclarationContext);
	    } else {
	        return this.getTypedRuleContext(TypeDeclarationContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterCompilationUnit(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitCompilationUnit(this);
		}
	}


}



class PackageDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_packageDeclaration;
    }

	PACKAGE() {
	    return this.getToken(Java8Parser.PACKAGE, 0);
	};

	Identifier = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Java8Parser.Identifier);
	    } else {
	        return this.getToken(Java8Parser.Identifier, i);
	    }
	};


	SEMI() {
	    return this.getToken(Java8Parser.SEMI, 0);
	};

	packageModifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PackageModifierContext);
	    } else {
	        return this.getTypedRuleContext(PackageModifierContext,i);
	    }
	};

	DOT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Java8Parser.DOT);
	    } else {
	        return this.getToken(Java8Parser.DOT, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterPackageDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitPackageDeclaration(this);
		}
	}


}



class PackageModifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_packageModifier;
    }

	annotation() {
	    return this.getTypedRuleContext(AnnotationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterPackageModifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitPackageModifier(this);
		}
	}


}



class ImportDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_importDeclaration;
    }

	singleTypeImportDeclaration() {
	    return this.getTypedRuleContext(SingleTypeImportDeclarationContext,0);
	};

	typeImportOnDemandDeclaration() {
	    return this.getTypedRuleContext(TypeImportOnDemandDeclarationContext,0);
	};

	singleStaticImportDeclaration() {
	    return this.getTypedRuleContext(SingleStaticImportDeclarationContext,0);
	};

	staticImportOnDemandDeclaration() {
	    return this.getTypedRuleContext(StaticImportOnDemandDeclarationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterImportDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitImportDeclaration(this);
		}
	}


}



class SingleTypeImportDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_singleTypeImportDeclaration;
    }

	IMPORT() {
	    return this.getToken(Java8Parser.IMPORT, 0);
	};

	typeName() {
	    return this.getTypedRuleContext(TypeNameContext,0);
	};

	SEMI() {
	    return this.getToken(Java8Parser.SEMI, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterSingleTypeImportDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitSingleTypeImportDeclaration(this);
		}
	}


}



class TypeImportOnDemandDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_typeImportOnDemandDeclaration;
    }

	IMPORT() {
	    return this.getToken(Java8Parser.IMPORT, 0);
	};

	packageOrTypeName() {
	    return this.getTypedRuleContext(PackageOrTypeNameContext,0);
	};

	DOT() {
	    return this.getToken(Java8Parser.DOT, 0);
	};

	MUL() {
	    return this.getToken(Java8Parser.MUL, 0);
	};

	SEMI() {
	    return this.getToken(Java8Parser.SEMI, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterTypeImportOnDemandDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitTypeImportOnDemandDeclaration(this);
		}
	}


}



class SingleStaticImportDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_singleStaticImportDeclaration;
    }

	IMPORT() {
	    return this.getToken(Java8Parser.IMPORT, 0);
	};

	STATIC() {
	    return this.getToken(Java8Parser.STATIC, 0);
	};

	typeName() {
	    return this.getTypedRuleContext(TypeNameContext,0);
	};

	DOT() {
	    return this.getToken(Java8Parser.DOT, 0);
	};

	Identifier() {
	    return this.getToken(Java8Parser.Identifier, 0);
	};

	SEMI() {
	    return this.getToken(Java8Parser.SEMI, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterSingleStaticImportDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitSingleStaticImportDeclaration(this);
		}
	}


}



class StaticImportOnDemandDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_staticImportOnDemandDeclaration;
    }

	IMPORT() {
	    return this.getToken(Java8Parser.IMPORT, 0);
	};

	STATIC() {
	    return this.getToken(Java8Parser.STATIC, 0);
	};

	typeName() {
	    return this.getTypedRuleContext(TypeNameContext,0);
	};

	DOT() {
	    return this.getToken(Java8Parser.DOT, 0);
	};

	MUL() {
	    return this.getToken(Java8Parser.MUL, 0);
	};

	SEMI() {
	    return this.getToken(Java8Parser.SEMI, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterStaticImportOnDemandDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitStaticImportOnDemandDeclaration(this);
		}
	}


}



class TypeDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_typeDeclaration;
    }

	classDeclaration() {
	    return this.getTypedRuleContext(ClassDeclarationContext,0);
	};

	interfaceDeclaration() {
	    return this.getTypedRuleContext(InterfaceDeclarationContext,0);
	};

	SEMI() {
	    return this.getToken(Java8Parser.SEMI, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterTypeDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitTypeDeclaration(this);
		}
	}


}



class ClassDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_classDeclaration;
    }

	normalClassDeclaration() {
	    return this.getTypedRuleContext(NormalClassDeclarationContext,0);
	};

	enumDeclaration() {
	    return this.getTypedRuleContext(EnumDeclarationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterClassDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitClassDeclaration(this);
		}
	}


}



class NormalClassDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_normalClassDeclaration;
    }

	CLASS() {
	    return this.getToken(Java8Parser.CLASS, 0);
	};

	Identifier() {
	    return this.getToken(Java8Parser.Identifier, 0);
	};

	classBody() {
	    return this.getTypedRuleContext(ClassBodyContext,0);
	};

	classModifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ClassModifierContext);
	    } else {
	        return this.getTypedRuleContext(ClassModifierContext,i);
	    }
	};

	typeParameters() {
	    return this.getTypedRuleContext(TypeParametersContext,0);
	};

	superclass() {
	    return this.getTypedRuleContext(SuperclassContext,0);
	};

	superinterfaces() {
	    return this.getTypedRuleContext(SuperinterfacesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterNormalClassDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitNormalClassDeclaration(this);
		}
	}


}



class ClassModifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_classModifier;
    }

	annotation() {
	    return this.getTypedRuleContext(AnnotationContext,0);
	};

	PUBLIC() {
	    return this.getToken(Java8Parser.PUBLIC, 0);
	};

	PROTECTED() {
	    return this.getToken(Java8Parser.PROTECTED, 0);
	};

	PRIVATE() {
	    return this.getToken(Java8Parser.PRIVATE, 0);
	};

	ABSTRACT() {
	    return this.getToken(Java8Parser.ABSTRACT, 0);
	};

	STATIC() {
	    return this.getToken(Java8Parser.STATIC, 0);
	};

	FINAL() {
	    return this.getToken(Java8Parser.FINAL, 0);
	};

	STRICTFP() {
	    return this.getToken(Java8Parser.STRICTFP, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterClassModifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitClassModifier(this);
		}
	}


}



class TypeParametersContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_typeParameters;
    }

	LT() {
	    return this.getToken(Java8Parser.LT, 0);
	};

	typeParameterList() {
	    return this.getTypedRuleContext(TypeParameterListContext,0);
	};

	GT() {
	    return this.getToken(Java8Parser.GT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterTypeParameters(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitTypeParameters(this);
		}
	}


}



class TypeParameterListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_typeParameterList;
    }

	typeParameter = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TypeParameterContext);
	    } else {
	        return this.getTypedRuleContext(TypeParameterContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Java8Parser.COMMA);
	    } else {
	        return this.getToken(Java8Parser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterTypeParameterList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitTypeParameterList(this);
		}
	}


}



class SuperclassContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_superclass;
    }

	EXTENDS() {
	    return this.getToken(Java8Parser.EXTENDS, 0);
	};

	classType() {
	    return this.getTypedRuleContext(ClassTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterSuperclass(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitSuperclass(this);
		}
	}


}



class SuperinterfacesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_superinterfaces;
    }

	IMPLEMENTS() {
	    return this.getToken(Java8Parser.IMPLEMENTS, 0);
	};

	interfaceTypeList() {
	    return this.getTypedRuleContext(InterfaceTypeListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterSuperinterfaces(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitSuperinterfaces(this);
		}
	}


}



class InterfaceTypeListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_interfaceTypeList;
    }

	interfaceType = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(InterfaceTypeContext);
	    } else {
	        return this.getTypedRuleContext(InterfaceTypeContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Java8Parser.COMMA);
	    } else {
	        return this.getToken(Java8Parser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterInterfaceTypeList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitInterfaceTypeList(this);
		}
	}


}



class ClassBodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_classBody;
    }

	LBRACE() {
	    return this.getToken(Java8Parser.LBRACE, 0);
	};

	RBRACE() {
	    return this.getToken(Java8Parser.RBRACE, 0);
	};

	classBodyDeclaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ClassBodyDeclarationContext);
	    } else {
	        return this.getTypedRuleContext(ClassBodyDeclarationContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterClassBody(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitClassBody(this);
		}
	}


}



class ClassBodyDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_classBodyDeclaration;
    }

	classMemberDeclaration() {
	    return this.getTypedRuleContext(ClassMemberDeclarationContext,0);
	};

	instanceInitializer() {
	    return this.getTypedRuleContext(InstanceInitializerContext,0);
	};

	staticInitializer() {
	    return this.getTypedRuleContext(StaticInitializerContext,0);
	};

	constructorDeclaration() {
	    return this.getTypedRuleContext(ConstructorDeclarationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterClassBodyDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitClassBodyDeclaration(this);
		}
	}


}



class ClassMemberDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_classMemberDeclaration;
    }

	fieldDeclaration() {
	    return this.getTypedRuleContext(FieldDeclarationContext,0);
	};

	methodDeclaration() {
	    return this.getTypedRuleContext(MethodDeclarationContext,0);
	};

	classDeclaration() {
	    return this.getTypedRuleContext(ClassDeclarationContext,0);
	};

	interfaceDeclaration() {
	    return this.getTypedRuleContext(InterfaceDeclarationContext,0);
	};

	SEMI() {
	    return this.getToken(Java8Parser.SEMI, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterClassMemberDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitClassMemberDeclaration(this);
		}
	}


}



class FieldDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_fieldDeclaration;
    }

	unannType() {
	    return this.getTypedRuleContext(UnannTypeContext,0);
	};

	variableDeclaratorList() {
	    return this.getTypedRuleContext(VariableDeclaratorListContext,0);
	};

	SEMI() {
	    return this.getToken(Java8Parser.SEMI, 0);
	};

	fieldModifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FieldModifierContext);
	    } else {
	        return this.getTypedRuleContext(FieldModifierContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterFieldDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitFieldDeclaration(this);
		}
	}


}



class FieldModifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_fieldModifier;
    }

	annotation() {
	    return this.getTypedRuleContext(AnnotationContext,0);
	};

	PUBLIC() {
	    return this.getToken(Java8Parser.PUBLIC, 0);
	};

	PROTECTED() {
	    return this.getToken(Java8Parser.PROTECTED, 0);
	};

	PRIVATE() {
	    return this.getToken(Java8Parser.PRIVATE, 0);
	};

	STATIC() {
	    return this.getToken(Java8Parser.STATIC, 0);
	};

	FINAL() {
	    return this.getToken(Java8Parser.FINAL, 0);
	};

	TRANSIENT() {
	    return this.getToken(Java8Parser.TRANSIENT, 0);
	};

	VOLATILE() {
	    return this.getToken(Java8Parser.VOLATILE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterFieldModifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitFieldModifier(this);
		}
	}


}



class VariableDeclaratorListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_variableDeclaratorList;
    }

	variableDeclarator = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VariableDeclaratorContext);
	    } else {
	        return this.getTypedRuleContext(VariableDeclaratorContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Java8Parser.COMMA);
	    } else {
	        return this.getToken(Java8Parser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterVariableDeclaratorList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitVariableDeclaratorList(this);
		}
	}


}



class VariableDeclaratorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_variableDeclarator;
    }

	variableDeclaratorId() {
	    return this.getTypedRuleContext(VariableDeclaratorIdContext,0);
	};

	ASSIGN() {
	    return this.getToken(Java8Parser.ASSIGN, 0);
	};

	variableInitializer() {
	    return this.getTypedRuleContext(VariableInitializerContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterVariableDeclarator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitVariableDeclarator(this);
		}
	}


}



class VariableDeclaratorIdContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_variableDeclaratorId;
    }

	Identifier() {
	    return this.getToken(Java8Parser.Identifier, 0);
	};

	dims() {
	    return this.getTypedRuleContext(DimsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterVariableDeclaratorId(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitVariableDeclaratorId(this);
		}
	}


}



class VariableInitializerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_variableInitializer;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	arrayInitializer() {
	    return this.getTypedRuleContext(ArrayInitializerContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterVariableInitializer(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitVariableInitializer(this);
		}
	}


}



class UnannTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_unannType;
    }

	unannPrimitiveType() {
	    return this.getTypedRuleContext(UnannPrimitiveTypeContext,0);
	};

	unannReferenceType() {
	    return this.getTypedRuleContext(UnannReferenceTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterUnannType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitUnannType(this);
		}
	}


}



class UnannPrimitiveTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_unannPrimitiveType;
    }

	numericType() {
	    return this.getTypedRuleContext(NumericTypeContext,0);
	};

	BOOLEAN() {
	    return this.getToken(Java8Parser.BOOLEAN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterUnannPrimitiveType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitUnannPrimitiveType(this);
		}
	}


}



class UnannReferenceTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_unannReferenceType;
    }

	unannClassOrInterfaceType() {
	    return this.getTypedRuleContext(UnannClassOrInterfaceTypeContext,0);
	};

	unannTypeVariable() {
	    return this.getTypedRuleContext(UnannTypeVariableContext,0);
	};

	unannArrayType() {
	    return this.getTypedRuleContext(UnannArrayTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterUnannReferenceType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitUnannReferenceType(this);
		}
	}


}



class UnannClassOrInterfaceTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_unannClassOrInterfaceType;
    }

	unannClassType_lfno_unannClassOrInterfaceType() {
	    return this.getTypedRuleContext(UnannClassType_lfno_unannClassOrInterfaceTypeContext,0);
	};

	unannInterfaceType_lfno_unannClassOrInterfaceType() {
	    return this.getTypedRuleContext(UnannInterfaceType_lfno_unannClassOrInterfaceTypeContext,0);
	};

	unannClassType_lf_unannClassOrInterfaceType = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UnannClassType_lf_unannClassOrInterfaceTypeContext);
	    } else {
	        return this.getTypedRuleContext(UnannClassType_lf_unannClassOrInterfaceTypeContext,i);
	    }
	};

	unannInterfaceType_lf_unannClassOrInterfaceType = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UnannInterfaceType_lf_unannClassOrInterfaceTypeContext);
	    } else {
	        return this.getTypedRuleContext(UnannInterfaceType_lf_unannClassOrInterfaceTypeContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterUnannClassOrInterfaceType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitUnannClassOrInterfaceType(this);
		}
	}


}



class UnannClassTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_unannClassType;
    }

	Identifier() {
	    return this.getToken(Java8Parser.Identifier, 0);
	};

	typeArguments() {
	    return this.getTypedRuleContext(TypeArgumentsContext,0);
	};

	unannClassOrInterfaceType() {
	    return this.getTypedRuleContext(UnannClassOrInterfaceTypeContext,0);
	};

	DOT() {
	    return this.getToken(Java8Parser.DOT, 0);
	};

	annotation = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationContext);
	    } else {
	        return this.getTypedRuleContext(AnnotationContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterUnannClassType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitUnannClassType(this);
		}
	}


}



class UnannClassType_lf_unannClassOrInterfaceTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_unannClassType_lf_unannClassOrInterfaceType;
    }

	DOT() {
	    return this.getToken(Java8Parser.DOT, 0);
	};

	Identifier() {
	    return this.getToken(Java8Parser.Identifier, 0);
	};

	annotation = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationContext);
	    } else {
	        return this.getTypedRuleContext(AnnotationContext,i);
	    }
	};

	typeArguments() {
	    return this.getTypedRuleContext(TypeArgumentsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterUnannClassType_lf_unannClassOrInterfaceType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitUnannClassType_lf_unannClassOrInterfaceType(this);
		}
	}


}



class UnannClassType_lfno_unannClassOrInterfaceTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_unannClassType_lfno_unannClassOrInterfaceType;
    }

	Identifier() {
	    return this.getToken(Java8Parser.Identifier, 0);
	};

	typeArguments() {
	    return this.getTypedRuleContext(TypeArgumentsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterUnannClassType_lfno_unannClassOrInterfaceType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitUnannClassType_lfno_unannClassOrInterfaceType(this);
		}
	}


}



class UnannInterfaceTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_unannInterfaceType;
    }

	unannClassType() {
	    return this.getTypedRuleContext(UnannClassTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterUnannInterfaceType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitUnannInterfaceType(this);
		}
	}


}



class UnannInterfaceType_lf_unannClassOrInterfaceTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_unannInterfaceType_lf_unannClassOrInterfaceType;
    }

	unannClassType_lf_unannClassOrInterfaceType() {
	    return this.getTypedRuleContext(UnannClassType_lf_unannClassOrInterfaceTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterUnannInterfaceType_lf_unannClassOrInterfaceType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitUnannInterfaceType_lf_unannClassOrInterfaceType(this);
		}
	}


}



class UnannInterfaceType_lfno_unannClassOrInterfaceTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_unannInterfaceType_lfno_unannClassOrInterfaceType;
    }

	unannClassType_lfno_unannClassOrInterfaceType() {
	    return this.getTypedRuleContext(UnannClassType_lfno_unannClassOrInterfaceTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterUnannInterfaceType_lfno_unannClassOrInterfaceType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitUnannInterfaceType_lfno_unannClassOrInterfaceType(this);
		}
	}


}



class UnannTypeVariableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_unannTypeVariable;
    }

	Identifier() {
	    return this.getToken(Java8Parser.Identifier, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterUnannTypeVariable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitUnannTypeVariable(this);
		}
	}


}



class UnannArrayTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_unannArrayType;
    }

	unannPrimitiveType() {
	    return this.getTypedRuleContext(UnannPrimitiveTypeContext,0);
	};

	dims() {
	    return this.getTypedRuleContext(DimsContext,0);
	};

	unannClassOrInterfaceType() {
	    return this.getTypedRuleContext(UnannClassOrInterfaceTypeContext,0);
	};

	unannTypeVariable() {
	    return this.getTypedRuleContext(UnannTypeVariableContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterUnannArrayType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitUnannArrayType(this);
		}
	}


}



class MethodDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_methodDeclaration;
    }

	methodHeader() {
	    return this.getTypedRuleContext(MethodHeaderContext,0);
	};

	methodBody() {
	    return this.getTypedRuleContext(MethodBodyContext,0);
	};

	methodModifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(MethodModifierContext);
	    } else {
	        return this.getTypedRuleContext(MethodModifierContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterMethodDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitMethodDeclaration(this);
		}
	}


}



class MethodModifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_methodModifier;
    }

	annotation() {
	    return this.getTypedRuleContext(AnnotationContext,0);
	};

	PUBLIC() {
	    return this.getToken(Java8Parser.PUBLIC, 0);
	};

	PROTECTED() {
	    return this.getToken(Java8Parser.PROTECTED, 0);
	};

	PRIVATE() {
	    return this.getToken(Java8Parser.PRIVATE, 0);
	};

	ABSTRACT() {
	    return this.getToken(Java8Parser.ABSTRACT, 0);
	};

	STATIC() {
	    return this.getToken(Java8Parser.STATIC, 0);
	};

	FINAL() {
	    return this.getToken(Java8Parser.FINAL, 0);
	};

	SYNCHRONIZED() {
	    return this.getToken(Java8Parser.SYNCHRONIZED, 0);
	};

	NATIVE() {
	    return this.getToken(Java8Parser.NATIVE, 0);
	};

	STRICTFP() {
	    return this.getToken(Java8Parser.STRICTFP, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterMethodModifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitMethodModifier(this);
		}
	}


}



class MethodHeaderContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_methodHeader;
    }

	result() {
	    return this.getTypedRuleContext(ResultContext,0);
	};

	methodDeclarator() {
	    return this.getTypedRuleContext(MethodDeclaratorContext,0);
	};

	throws_() {
	    return this.getTypedRuleContext(Throws_Context,0);
	};

	typeParameters() {
	    return this.getTypedRuleContext(TypeParametersContext,0);
	};

	annotation = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationContext);
	    } else {
	        return this.getTypedRuleContext(AnnotationContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterMethodHeader(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitMethodHeader(this);
		}
	}


}



class ResultContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_result;
    }

	unannType() {
	    return this.getTypedRuleContext(UnannTypeContext,0);
	};

	VOID() {
	    return this.getToken(Java8Parser.VOID, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterResult(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitResult(this);
		}
	}


}



class MethodDeclaratorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_methodDeclarator;
    }

	Identifier() {
	    return this.getToken(Java8Parser.Identifier, 0);
	};

	LPAREN() {
	    return this.getToken(Java8Parser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(Java8Parser.RPAREN, 0);
	};

	formalParameterList() {
	    return this.getTypedRuleContext(FormalParameterListContext,0);
	};

	dims() {
	    return this.getTypedRuleContext(DimsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterMethodDeclarator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitMethodDeclarator(this);
		}
	}


}



class FormalParameterListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_formalParameterList;
    }

	formalParameters() {
	    return this.getTypedRuleContext(FormalParametersContext,0);
	};

	COMMA() {
	    return this.getToken(Java8Parser.COMMA, 0);
	};

	lastFormalParameter() {
	    return this.getTypedRuleContext(LastFormalParameterContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterFormalParameterList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitFormalParameterList(this);
		}
	}


}



class FormalParametersContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_formalParameters;
    }

	formalParameter = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FormalParameterContext);
	    } else {
	        return this.getTypedRuleContext(FormalParameterContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Java8Parser.COMMA);
	    } else {
	        return this.getToken(Java8Parser.COMMA, i);
	    }
	};


	receiverParameter() {
	    return this.getTypedRuleContext(ReceiverParameterContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterFormalParameters(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitFormalParameters(this);
		}
	}


}



class FormalParameterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_formalParameter;
    }

	unannType() {
	    return this.getTypedRuleContext(UnannTypeContext,0);
	};

	variableDeclaratorId() {
	    return this.getTypedRuleContext(VariableDeclaratorIdContext,0);
	};

	variableModifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VariableModifierContext);
	    } else {
	        return this.getTypedRuleContext(VariableModifierContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterFormalParameter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitFormalParameter(this);
		}
	}


}



class VariableModifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_variableModifier;
    }

	annotation() {
	    return this.getTypedRuleContext(AnnotationContext,0);
	};

	FINAL() {
	    return this.getToken(Java8Parser.FINAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterVariableModifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitVariableModifier(this);
		}
	}


}



class LastFormalParameterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_lastFormalParameter;
    }

	unannType() {
	    return this.getTypedRuleContext(UnannTypeContext,0);
	};

	ELLIPSIS() {
	    return this.getToken(Java8Parser.ELLIPSIS, 0);
	};

	variableDeclaratorId() {
	    return this.getTypedRuleContext(VariableDeclaratorIdContext,0);
	};

	variableModifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VariableModifierContext);
	    } else {
	        return this.getTypedRuleContext(VariableModifierContext,i);
	    }
	};

	annotation = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationContext);
	    } else {
	        return this.getTypedRuleContext(AnnotationContext,i);
	    }
	};

	formalParameter() {
	    return this.getTypedRuleContext(FormalParameterContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterLastFormalParameter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitLastFormalParameter(this);
		}
	}


}



class ReceiverParameterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_receiverParameter;
    }

	unannType() {
	    return this.getTypedRuleContext(UnannTypeContext,0);
	};

	THIS() {
	    return this.getToken(Java8Parser.THIS, 0);
	};

	annotation = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationContext);
	    } else {
	        return this.getTypedRuleContext(AnnotationContext,i);
	    }
	};

	Identifier() {
	    return this.getToken(Java8Parser.Identifier, 0);
	};

	DOT() {
	    return this.getToken(Java8Parser.DOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterReceiverParameter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitReceiverParameter(this);
		}
	}


}



class Throws_Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_throws_;
    }

	THROWS() {
	    return this.getToken(Java8Parser.THROWS, 0);
	};

	exceptionTypeList() {
	    return this.getTypedRuleContext(ExceptionTypeListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterThrows_(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitThrows_(this);
		}
	}


}



class ExceptionTypeListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_exceptionTypeList;
    }

	exceptionType = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExceptionTypeContext);
	    } else {
	        return this.getTypedRuleContext(ExceptionTypeContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Java8Parser.COMMA);
	    } else {
	        return this.getToken(Java8Parser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterExceptionTypeList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitExceptionTypeList(this);
		}
	}


}



class ExceptionTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_exceptionType;
    }

	classType() {
	    return this.getTypedRuleContext(ClassTypeContext,0);
	};

	typeVariable() {
	    return this.getTypedRuleContext(TypeVariableContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterExceptionType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitExceptionType(this);
		}
	}


}



class MethodBodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_methodBody;
    }

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	SEMI() {
	    return this.getToken(Java8Parser.SEMI, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterMethodBody(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitMethodBody(this);
		}
	}


}



class InstanceInitializerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_instanceInitializer;
    }

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterInstanceInitializer(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitInstanceInitializer(this);
		}
	}


}



class StaticInitializerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_staticInitializer;
    }

	STATIC() {
	    return this.getToken(Java8Parser.STATIC, 0);
	};

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterStaticInitializer(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitStaticInitializer(this);
		}
	}


}



class ConstructorDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_constructorDeclaration;
    }

	constructorDeclarator() {
	    return this.getTypedRuleContext(ConstructorDeclaratorContext,0);
	};

	constructorBody() {
	    return this.getTypedRuleContext(ConstructorBodyContext,0);
	};

	constructorModifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ConstructorModifierContext);
	    } else {
	        return this.getTypedRuleContext(ConstructorModifierContext,i);
	    }
	};

	throws_() {
	    return this.getTypedRuleContext(Throws_Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterConstructorDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitConstructorDeclaration(this);
		}
	}


}



class ConstructorModifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_constructorModifier;
    }

	annotation() {
	    return this.getTypedRuleContext(AnnotationContext,0);
	};

	PUBLIC() {
	    return this.getToken(Java8Parser.PUBLIC, 0);
	};

	PROTECTED() {
	    return this.getToken(Java8Parser.PROTECTED, 0);
	};

	PRIVATE() {
	    return this.getToken(Java8Parser.PRIVATE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterConstructorModifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitConstructorModifier(this);
		}
	}


}



class ConstructorDeclaratorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_constructorDeclarator;
    }

	simpleTypeName() {
	    return this.getTypedRuleContext(SimpleTypeNameContext,0);
	};

	LPAREN() {
	    return this.getToken(Java8Parser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(Java8Parser.RPAREN, 0);
	};

	typeParameters() {
	    return this.getTypedRuleContext(TypeParametersContext,0);
	};

	formalParameterList() {
	    return this.getTypedRuleContext(FormalParameterListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterConstructorDeclarator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitConstructorDeclarator(this);
		}
	}


}



class SimpleTypeNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_simpleTypeName;
    }

	Identifier() {
	    return this.getToken(Java8Parser.Identifier, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterSimpleTypeName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitSimpleTypeName(this);
		}
	}


}



class ConstructorBodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_constructorBody;
    }

	LBRACE() {
	    return this.getToken(Java8Parser.LBRACE, 0);
	};

	RBRACE() {
	    return this.getToken(Java8Parser.RBRACE, 0);
	};

	explicitConstructorInvocation() {
	    return this.getTypedRuleContext(ExplicitConstructorInvocationContext,0);
	};

	blockStatements() {
	    return this.getTypedRuleContext(BlockStatementsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterConstructorBody(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitConstructorBody(this);
		}
	}


}



class ExplicitConstructorInvocationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_explicitConstructorInvocation;
    }

	THIS() {
	    return this.getToken(Java8Parser.THIS, 0);
	};

	LPAREN() {
	    return this.getToken(Java8Parser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(Java8Parser.RPAREN, 0);
	};

	SEMI() {
	    return this.getToken(Java8Parser.SEMI, 0);
	};

	typeArguments() {
	    return this.getTypedRuleContext(TypeArgumentsContext,0);
	};

	argumentList() {
	    return this.getTypedRuleContext(ArgumentListContext,0);
	};

	SUPER() {
	    return this.getToken(Java8Parser.SUPER, 0);
	};

	expressionName() {
	    return this.getTypedRuleContext(ExpressionNameContext,0);
	};

	DOT() {
	    return this.getToken(Java8Parser.DOT, 0);
	};

	primary() {
	    return this.getTypedRuleContext(PrimaryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterExplicitConstructorInvocation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitExplicitConstructorInvocation(this);
		}
	}


}



class EnumDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_enumDeclaration;
    }

	ENUM() {
	    return this.getToken(Java8Parser.ENUM, 0);
	};

	Identifier() {
	    return this.getToken(Java8Parser.Identifier, 0);
	};

	enumBody() {
	    return this.getTypedRuleContext(EnumBodyContext,0);
	};

	classModifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ClassModifierContext);
	    } else {
	        return this.getTypedRuleContext(ClassModifierContext,i);
	    }
	};

	superinterfaces() {
	    return this.getTypedRuleContext(SuperinterfacesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterEnumDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitEnumDeclaration(this);
		}
	}


}



class EnumBodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_enumBody;
    }

	LBRACE() {
	    return this.getToken(Java8Parser.LBRACE, 0);
	};

	RBRACE() {
	    return this.getToken(Java8Parser.RBRACE, 0);
	};

	enumConstantList() {
	    return this.getTypedRuleContext(EnumConstantListContext,0);
	};

	COMMA() {
	    return this.getToken(Java8Parser.COMMA, 0);
	};

	enumBodyDeclarations() {
	    return this.getTypedRuleContext(EnumBodyDeclarationsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterEnumBody(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitEnumBody(this);
		}
	}


}



class EnumConstantListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_enumConstantList;
    }

	enumConstant = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(EnumConstantContext);
	    } else {
	        return this.getTypedRuleContext(EnumConstantContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Java8Parser.COMMA);
	    } else {
	        return this.getToken(Java8Parser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterEnumConstantList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitEnumConstantList(this);
		}
	}


}



class EnumConstantContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_enumConstant;
    }

	Identifier() {
	    return this.getToken(Java8Parser.Identifier, 0);
	};

	enumConstantModifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(EnumConstantModifierContext);
	    } else {
	        return this.getTypedRuleContext(EnumConstantModifierContext,i);
	    }
	};

	LPAREN() {
	    return this.getToken(Java8Parser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(Java8Parser.RPAREN, 0);
	};

	classBody() {
	    return this.getTypedRuleContext(ClassBodyContext,0);
	};

	argumentList() {
	    return this.getTypedRuleContext(ArgumentListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterEnumConstant(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitEnumConstant(this);
		}
	}


}



class EnumConstantModifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_enumConstantModifier;
    }

	annotation() {
	    return this.getTypedRuleContext(AnnotationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterEnumConstantModifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitEnumConstantModifier(this);
		}
	}


}



class EnumBodyDeclarationsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_enumBodyDeclarations;
    }

	SEMI() {
	    return this.getToken(Java8Parser.SEMI, 0);
	};

	classBodyDeclaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ClassBodyDeclarationContext);
	    } else {
	        return this.getTypedRuleContext(ClassBodyDeclarationContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterEnumBodyDeclarations(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitEnumBodyDeclarations(this);
		}
	}


}



class InterfaceDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_interfaceDeclaration;
    }

	normalInterfaceDeclaration() {
	    return this.getTypedRuleContext(NormalInterfaceDeclarationContext,0);
	};

	annotationTypeDeclaration() {
	    return this.getTypedRuleContext(AnnotationTypeDeclarationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterInterfaceDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitInterfaceDeclaration(this);
		}
	}


}



class NormalInterfaceDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_normalInterfaceDeclaration;
    }

	INTERFACE() {
	    return this.getToken(Java8Parser.INTERFACE, 0);
	};

	Identifier() {
	    return this.getToken(Java8Parser.Identifier, 0);
	};

	interfaceBody() {
	    return this.getTypedRuleContext(InterfaceBodyContext,0);
	};

	interfaceModifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(InterfaceModifierContext);
	    } else {
	        return this.getTypedRuleContext(InterfaceModifierContext,i);
	    }
	};

	typeParameters() {
	    return this.getTypedRuleContext(TypeParametersContext,0);
	};

	extendsInterfaces() {
	    return this.getTypedRuleContext(ExtendsInterfacesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterNormalInterfaceDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitNormalInterfaceDeclaration(this);
		}
	}


}



class InterfaceModifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_interfaceModifier;
    }

	annotation() {
	    return this.getTypedRuleContext(AnnotationContext,0);
	};

	PUBLIC() {
	    return this.getToken(Java8Parser.PUBLIC, 0);
	};

	PROTECTED() {
	    return this.getToken(Java8Parser.PROTECTED, 0);
	};

	PRIVATE() {
	    return this.getToken(Java8Parser.PRIVATE, 0);
	};

	ABSTRACT() {
	    return this.getToken(Java8Parser.ABSTRACT, 0);
	};

	STATIC() {
	    return this.getToken(Java8Parser.STATIC, 0);
	};

	STRICTFP() {
	    return this.getToken(Java8Parser.STRICTFP, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterInterfaceModifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitInterfaceModifier(this);
		}
	}


}



class ExtendsInterfacesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_extendsInterfaces;
    }

	EXTENDS() {
	    return this.getToken(Java8Parser.EXTENDS, 0);
	};

	interfaceTypeList() {
	    return this.getTypedRuleContext(InterfaceTypeListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterExtendsInterfaces(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitExtendsInterfaces(this);
		}
	}


}



class InterfaceBodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_interfaceBody;
    }

	LBRACE() {
	    return this.getToken(Java8Parser.LBRACE, 0);
	};

	RBRACE() {
	    return this.getToken(Java8Parser.RBRACE, 0);
	};

	interfaceMemberDeclaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(InterfaceMemberDeclarationContext);
	    } else {
	        return this.getTypedRuleContext(InterfaceMemberDeclarationContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterInterfaceBody(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitInterfaceBody(this);
		}
	}


}



class InterfaceMemberDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_interfaceMemberDeclaration;
    }

	constantDeclaration() {
	    return this.getTypedRuleContext(ConstantDeclarationContext,0);
	};

	interfaceMethodDeclaration() {
	    return this.getTypedRuleContext(InterfaceMethodDeclarationContext,0);
	};

	classDeclaration() {
	    return this.getTypedRuleContext(ClassDeclarationContext,0);
	};

	interfaceDeclaration() {
	    return this.getTypedRuleContext(InterfaceDeclarationContext,0);
	};

	SEMI() {
	    return this.getToken(Java8Parser.SEMI, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterInterfaceMemberDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitInterfaceMemberDeclaration(this);
		}
	}


}



class ConstantDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_constantDeclaration;
    }

	unannType() {
	    return this.getTypedRuleContext(UnannTypeContext,0);
	};

	variableDeclaratorList() {
	    return this.getTypedRuleContext(VariableDeclaratorListContext,0);
	};

	SEMI() {
	    return this.getToken(Java8Parser.SEMI, 0);
	};

	constantModifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ConstantModifierContext);
	    } else {
	        return this.getTypedRuleContext(ConstantModifierContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterConstantDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitConstantDeclaration(this);
		}
	}


}



class ConstantModifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_constantModifier;
    }

	annotation() {
	    return this.getTypedRuleContext(AnnotationContext,0);
	};

	PUBLIC() {
	    return this.getToken(Java8Parser.PUBLIC, 0);
	};

	STATIC() {
	    return this.getToken(Java8Parser.STATIC, 0);
	};

	FINAL() {
	    return this.getToken(Java8Parser.FINAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterConstantModifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitConstantModifier(this);
		}
	}


}



class InterfaceMethodDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_interfaceMethodDeclaration;
    }

	methodHeader() {
	    return this.getTypedRuleContext(MethodHeaderContext,0);
	};

	methodBody() {
	    return this.getTypedRuleContext(MethodBodyContext,0);
	};

	interfaceMethodModifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(InterfaceMethodModifierContext);
	    } else {
	        return this.getTypedRuleContext(InterfaceMethodModifierContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterInterfaceMethodDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitInterfaceMethodDeclaration(this);
		}
	}


}



class InterfaceMethodModifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_interfaceMethodModifier;
    }

	annotation() {
	    return this.getTypedRuleContext(AnnotationContext,0);
	};

	PUBLIC() {
	    return this.getToken(Java8Parser.PUBLIC, 0);
	};

	ABSTRACT() {
	    return this.getToken(Java8Parser.ABSTRACT, 0);
	};

	DEFAULT() {
	    return this.getToken(Java8Parser.DEFAULT, 0);
	};

	STATIC() {
	    return this.getToken(Java8Parser.STATIC, 0);
	};

	STRICTFP() {
	    return this.getToken(Java8Parser.STRICTFP, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterInterfaceMethodModifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitInterfaceMethodModifier(this);
		}
	}


}



class AnnotationTypeDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_annotationTypeDeclaration;
    }

	AT() {
	    return this.getToken(Java8Parser.AT, 0);
	};

	INTERFACE() {
	    return this.getToken(Java8Parser.INTERFACE, 0);
	};

	Identifier() {
	    return this.getToken(Java8Parser.Identifier, 0);
	};

	annotationTypeBody() {
	    return this.getTypedRuleContext(AnnotationTypeBodyContext,0);
	};

	interfaceModifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(InterfaceModifierContext);
	    } else {
	        return this.getTypedRuleContext(InterfaceModifierContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterAnnotationTypeDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitAnnotationTypeDeclaration(this);
		}
	}


}



class AnnotationTypeBodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_annotationTypeBody;
    }

	LBRACE() {
	    return this.getToken(Java8Parser.LBRACE, 0);
	};

	RBRACE() {
	    return this.getToken(Java8Parser.RBRACE, 0);
	};

	annotationTypeMemberDeclaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationTypeMemberDeclarationContext);
	    } else {
	        return this.getTypedRuleContext(AnnotationTypeMemberDeclarationContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterAnnotationTypeBody(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitAnnotationTypeBody(this);
		}
	}


}



class AnnotationTypeMemberDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_annotationTypeMemberDeclaration;
    }

	annotationTypeElementDeclaration() {
	    return this.getTypedRuleContext(AnnotationTypeElementDeclarationContext,0);
	};

	constantDeclaration() {
	    return this.getTypedRuleContext(ConstantDeclarationContext,0);
	};

	classDeclaration() {
	    return this.getTypedRuleContext(ClassDeclarationContext,0);
	};

	interfaceDeclaration() {
	    return this.getTypedRuleContext(InterfaceDeclarationContext,0);
	};

	SEMI() {
	    return this.getToken(Java8Parser.SEMI, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterAnnotationTypeMemberDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitAnnotationTypeMemberDeclaration(this);
		}
	}


}



class AnnotationTypeElementDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_annotationTypeElementDeclaration;
    }

	unannType() {
	    return this.getTypedRuleContext(UnannTypeContext,0);
	};

	Identifier() {
	    return this.getToken(Java8Parser.Identifier, 0);
	};

	LPAREN() {
	    return this.getToken(Java8Parser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(Java8Parser.RPAREN, 0);
	};

	SEMI() {
	    return this.getToken(Java8Parser.SEMI, 0);
	};

	annotationTypeElementModifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationTypeElementModifierContext);
	    } else {
	        return this.getTypedRuleContext(AnnotationTypeElementModifierContext,i);
	    }
	};

	dims() {
	    return this.getTypedRuleContext(DimsContext,0);
	};

	defaultValue() {
	    return this.getTypedRuleContext(DefaultValueContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterAnnotationTypeElementDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitAnnotationTypeElementDeclaration(this);
		}
	}


}



class AnnotationTypeElementModifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_annotationTypeElementModifier;
    }

	annotation() {
	    return this.getTypedRuleContext(AnnotationContext,0);
	};

	PUBLIC() {
	    return this.getToken(Java8Parser.PUBLIC, 0);
	};

	ABSTRACT() {
	    return this.getToken(Java8Parser.ABSTRACT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterAnnotationTypeElementModifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitAnnotationTypeElementModifier(this);
		}
	}


}



class DefaultValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_defaultValue;
    }

	DEFAULT() {
	    return this.getToken(Java8Parser.DEFAULT, 0);
	};

	elementValue() {
	    return this.getTypedRuleContext(ElementValueContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterDefaultValue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitDefaultValue(this);
		}
	}


}



class AnnotationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_annotation;
    }

	normalAnnotation() {
	    return this.getTypedRuleContext(NormalAnnotationContext,0);
	};

	markerAnnotation() {
	    return this.getTypedRuleContext(MarkerAnnotationContext,0);
	};

	singleElementAnnotation() {
	    return this.getTypedRuleContext(SingleElementAnnotationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterAnnotation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitAnnotation(this);
		}
	}


}



class NormalAnnotationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_normalAnnotation;
    }

	AT() {
	    return this.getToken(Java8Parser.AT, 0);
	};

	typeName() {
	    return this.getTypedRuleContext(TypeNameContext,0);
	};

	LPAREN() {
	    return this.getToken(Java8Parser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(Java8Parser.RPAREN, 0);
	};

	elementValuePairList() {
	    return this.getTypedRuleContext(ElementValuePairListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterNormalAnnotation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitNormalAnnotation(this);
		}
	}


}



class ElementValuePairListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_elementValuePairList;
    }

	elementValuePair = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ElementValuePairContext);
	    } else {
	        return this.getTypedRuleContext(ElementValuePairContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Java8Parser.COMMA);
	    } else {
	        return this.getToken(Java8Parser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterElementValuePairList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitElementValuePairList(this);
		}
	}


}



class ElementValuePairContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_elementValuePair;
    }

	Identifier() {
	    return this.getToken(Java8Parser.Identifier, 0);
	};

	ASSIGN() {
	    return this.getToken(Java8Parser.ASSIGN, 0);
	};

	elementValue() {
	    return this.getTypedRuleContext(ElementValueContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterElementValuePair(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitElementValuePair(this);
		}
	}


}



class ElementValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_elementValue;
    }

	conditionalExpression() {
	    return this.getTypedRuleContext(ConditionalExpressionContext,0);
	};

	elementValueArrayInitializer() {
	    return this.getTypedRuleContext(ElementValueArrayInitializerContext,0);
	};

	annotation() {
	    return this.getTypedRuleContext(AnnotationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterElementValue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitElementValue(this);
		}
	}


}



class ElementValueArrayInitializerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_elementValueArrayInitializer;
    }

	LBRACE() {
	    return this.getToken(Java8Parser.LBRACE, 0);
	};

	RBRACE() {
	    return this.getToken(Java8Parser.RBRACE, 0);
	};

	elementValueList() {
	    return this.getTypedRuleContext(ElementValueListContext,0);
	};

	COMMA() {
	    return this.getToken(Java8Parser.COMMA, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterElementValueArrayInitializer(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitElementValueArrayInitializer(this);
		}
	}


}



class ElementValueListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_elementValueList;
    }

	elementValue = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ElementValueContext);
	    } else {
	        return this.getTypedRuleContext(ElementValueContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Java8Parser.COMMA);
	    } else {
	        return this.getToken(Java8Parser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterElementValueList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitElementValueList(this);
		}
	}


}



class MarkerAnnotationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_markerAnnotation;
    }

	AT() {
	    return this.getToken(Java8Parser.AT, 0);
	};

	typeName() {
	    return this.getTypedRuleContext(TypeNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterMarkerAnnotation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitMarkerAnnotation(this);
		}
	}


}



class SingleElementAnnotationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_singleElementAnnotation;
    }

	AT() {
	    return this.getToken(Java8Parser.AT, 0);
	};

	typeName() {
	    return this.getTypedRuleContext(TypeNameContext,0);
	};

	LPAREN() {
	    return this.getToken(Java8Parser.LPAREN, 0);
	};

	elementValue() {
	    return this.getTypedRuleContext(ElementValueContext,0);
	};

	RPAREN() {
	    return this.getToken(Java8Parser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterSingleElementAnnotation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitSingleElementAnnotation(this);
		}
	}


}



class ArrayInitializerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_arrayInitializer;
    }

	LBRACE() {
	    return this.getToken(Java8Parser.LBRACE, 0);
	};

	RBRACE() {
	    return this.getToken(Java8Parser.RBRACE, 0);
	};

	variableInitializerList() {
	    return this.getTypedRuleContext(VariableInitializerListContext,0);
	};

	COMMA() {
	    return this.getToken(Java8Parser.COMMA, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterArrayInitializer(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitArrayInitializer(this);
		}
	}


}



class VariableInitializerListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_variableInitializerList;
    }

	variableInitializer = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VariableInitializerContext);
	    } else {
	        return this.getTypedRuleContext(VariableInitializerContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Java8Parser.COMMA);
	    } else {
	        return this.getToken(Java8Parser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterVariableInitializerList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitVariableInitializerList(this);
		}
	}


}



class BlockContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_block;
    }

	LBRACE() {
	    return this.getToken(Java8Parser.LBRACE, 0);
	};

	RBRACE() {
	    return this.getToken(Java8Parser.RBRACE, 0);
	};

	blockStatements() {
	    return this.getTypedRuleContext(BlockStatementsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterBlock(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitBlock(this);
		}
	}


}



class BlockStatementsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_blockStatements;
    }

	blockStatement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(BlockStatementContext);
	    } else {
	        return this.getTypedRuleContext(BlockStatementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterBlockStatements(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitBlockStatements(this);
		}
	}


}



class BlockStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_blockStatement;
    }

	localVariableDeclarationStatement() {
	    return this.getTypedRuleContext(LocalVariableDeclarationStatementContext,0);
	};

	classDeclaration() {
	    return this.getTypedRuleContext(ClassDeclarationContext,0);
	};

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterBlockStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitBlockStatement(this);
		}
	}


}



class LocalVariableDeclarationStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_localVariableDeclarationStatement;
    }

	localVariableDeclaration() {
	    return this.getTypedRuleContext(LocalVariableDeclarationContext,0);
	};

	SEMI() {
	    return this.getToken(Java8Parser.SEMI, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterLocalVariableDeclarationStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitLocalVariableDeclarationStatement(this);
		}
	}


}



class LocalVariableDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_localVariableDeclaration;
    }

	unannType() {
	    return this.getTypedRuleContext(UnannTypeContext,0);
	};

	variableDeclaratorList() {
	    return this.getTypedRuleContext(VariableDeclaratorListContext,0);
	};

	variableModifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VariableModifierContext);
	    } else {
	        return this.getTypedRuleContext(VariableModifierContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterLocalVariableDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitLocalVariableDeclaration(this);
		}
	}


}



class StatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_statement;
    }

	statementWithoutTrailingSubstatement() {
	    return this.getTypedRuleContext(StatementWithoutTrailingSubstatementContext,0);
	};

	labeledStatement() {
	    return this.getTypedRuleContext(LabeledStatementContext,0);
	};

	ifThenStatement() {
	    return this.getTypedRuleContext(IfThenStatementContext,0);
	};

	ifThenElseStatement() {
	    return this.getTypedRuleContext(IfThenElseStatementContext,0);
	};

	whileStatement() {
	    return this.getTypedRuleContext(WhileStatementContext,0);
	};

	forStatement() {
	    return this.getTypedRuleContext(ForStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitStatement(this);
		}
	}


}



class StatementNoShortIfContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_statementNoShortIf;
    }

	statementWithoutTrailingSubstatement() {
	    return this.getTypedRuleContext(StatementWithoutTrailingSubstatementContext,0);
	};

	labeledStatementNoShortIf() {
	    return this.getTypedRuleContext(LabeledStatementNoShortIfContext,0);
	};

	ifThenElseStatementNoShortIf() {
	    return this.getTypedRuleContext(IfThenElseStatementNoShortIfContext,0);
	};

	whileStatementNoShortIf() {
	    return this.getTypedRuleContext(WhileStatementNoShortIfContext,0);
	};

	forStatementNoShortIf() {
	    return this.getTypedRuleContext(ForStatementNoShortIfContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterStatementNoShortIf(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitStatementNoShortIf(this);
		}
	}


}



class StatementWithoutTrailingSubstatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_statementWithoutTrailingSubstatement;
    }

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	emptyStatement() {
	    return this.getTypedRuleContext(EmptyStatementContext,0);
	};

	expressionStatement() {
	    return this.getTypedRuleContext(ExpressionStatementContext,0);
	};

	assertStatement() {
	    return this.getTypedRuleContext(AssertStatementContext,0);
	};

	switchStatement() {
	    return this.getTypedRuleContext(SwitchStatementContext,0);
	};

	doStatement() {
	    return this.getTypedRuleContext(DoStatementContext,0);
	};

	breakStatement() {
	    return this.getTypedRuleContext(BreakStatementContext,0);
	};

	continueStatement() {
	    return this.getTypedRuleContext(ContinueStatementContext,0);
	};

	returnStatement() {
	    return this.getTypedRuleContext(ReturnStatementContext,0);
	};

	synchronizedStatement() {
	    return this.getTypedRuleContext(SynchronizedStatementContext,0);
	};

	throwStatement() {
	    return this.getTypedRuleContext(ThrowStatementContext,0);
	};

	tryStatement() {
	    return this.getTypedRuleContext(TryStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterStatementWithoutTrailingSubstatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitStatementWithoutTrailingSubstatement(this);
		}
	}


}



class EmptyStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_emptyStatement;
    }

	SEMI() {
	    return this.getToken(Java8Parser.SEMI, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterEmptyStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitEmptyStatement(this);
		}
	}


}



class LabeledStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_labeledStatement;
    }

	Identifier() {
	    return this.getToken(Java8Parser.Identifier, 0);
	};

	COLON() {
	    return this.getToken(Java8Parser.COLON, 0);
	};

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterLabeledStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitLabeledStatement(this);
		}
	}


}



class LabeledStatementNoShortIfContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_labeledStatementNoShortIf;
    }

	Identifier() {
	    return this.getToken(Java8Parser.Identifier, 0);
	};

	COLON() {
	    return this.getToken(Java8Parser.COLON, 0);
	};

	statementNoShortIf() {
	    return this.getTypedRuleContext(StatementNoShortIfContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterLabeledStatementNoShortIf(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitLabeledStatementNoShortIf(this);
		}
	}


}



class ExpressionStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_expressionStatement;
    }

	statementExpression() {
	    return this.getTypedRuleContext(StatementExpressionContext,0);
	};

	SEMI() {
	    return this.getToken(Java8Parser.SEMI, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterExpressionStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitExpressionStatement(this);
		}
	}


}



class StatementExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_statementExpression;
    }

	assignment() {
	    return this.getTypedRuleContext(AssignmentContext,0);
	};

	preIncrementExpression() {
	    return this.getTypedRuleContext(PreIncrementExpressionContext,0);
	};

	preDecrementExpression() {
	    return this.getTypedRuleContext(PreDecrementExpressionContext,0);
	};

	postIncrementExpression() {
	    return this.getTypedRuleContext(PostIncrementExpressionContext,0);
	};

	postDecrementExpression() {
	    return this.getTypedRuleContext(PostDecrementExpressionContext,0);
	};

	methodInvocation() {
	    return this.getTypedRuleContext(MethodInvocationContext,0);
	};

	classInstanceCreationExpression() {
	    return this.getTypedRuleContext(ClassInstanceCreationExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterStatementExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitStatementExpression(this);
		}
	}


}



class IfThenStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_ifThenStatement;
    }

	IF() {
	    return this.getToken(Java8Parser.IF, 0);
	};

	LPAREN() {
	    return this.getToken(Java8Parser.LPAREN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RPAREN() {
	    return this.getToken(Java8Parser.RPAREN, 0);
	};

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterIfThenStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitIfThenStatement(this);
		}
	}


}



class IfThenElseStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_ifThenElseStatement;
    }

	IF() {
	    return this.getToken(Java8Parser.IF, 0);
	};

	LPAREN() {
	    return this.getToken(Java8Parser.LPAREN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RPAREN() {
	    return this.getToken(Java8Parser.RPAREN, 0);
	};

	statementNoShortIf() {
	    return this.getTypedRuleContext(StatementNoShortIfContext,0);
	};

	ELSE() {
	    return this.getToken(Java8Parser.ELSE, 0);
	};

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterIfThenElseStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitIfThenElseStatement(this);
		}
	}


}



class IfThenElseStatementNoShortIfContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_ifThenElseStatementNoShortIf;
    }

	IF() {
	    return this.getToken(Java8Parser.IF, 0);
	};

	LPAREN() {
	    return this.getToken(Java8Parser.LPAREN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RPAREN() {
	    return this.getToken(Java8Parser.RPAREN, 0);
	};

	statementNoShortIf = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StatementNoShortIfContext);
	    } else {
	        return this.getTypedRuleContext(StatementNoShortIfContext,i);
	    }
	};

	ELSE() {
	    return this.getToken(Java8Parser.ELSE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterIfThenElseStatementNoShortIf(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitIfThenElseStatementNoShortIf(this);
		}
	}


}



class AssertStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_assertStatement;
    }

	ASSERT() {
	    return this.getToken(Java8Parser.ASSERT, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	SEMI() {
	    return this.getToken(Java8Parser.SEMI, 0);
	};

	COLON() {
	    return this.getToken(Java8Parser.COLON, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterAssertStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitAssertStatement(this);
		}
	}


}



class SwitchStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_switchStatement;
    }

	SWITCH() {
	    return this.getToken(Java8Parser.SWITCH, 0);
	};

	LPAREN() {
	    return this.getToken(Java8Parser.LPAREN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RPAREN() {
	    return this.getToken(Java8Parser.RPAREN, 0);
	};

	switchBlock() {
	    return this.getTypedRuleContext(SwitchBlockContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterSwitchStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitSwitchStatement(this);
		}
	}


}



class SwitchBlockContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_switchBlock;
    }

	LBRACE() {
	    return this.getToken(Java8Parser.LBRACE, 0);
	};

	RBRACE() {
	    return this.getToken(Java8Parser.RBRACE, 0);
	};

	switchBlockStatementGroup = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SwitchBlockStatementGroupContext);
	    } else {
	        return this.getTypedRuleContext(SwitchBlockStatementGroupContext,i);
	    }
	};

	switchLabel = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SwitchLabelContext);
	    } else {
	        return this.getTypedRuleContext(SwitchLabelContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterSwitchBlock(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitSwitchBlock(this);
		}
	}


}



class SwitchBlockStatementGroupContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_switchBlockStatementGroup;
    }

	switchLabels() {
	    return this.getTypedRuleContext(SwitchLabelsContext,0);
	};

	blockStatements() {
	    return this.getTypedRuleContext(BlockStatementsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterSwitchBlockStatementGroup(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitSwitchBlockStatementGroup(this);
		}
	}


}



class SwitchLabelsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_switchLabels;
    }

	switchLabel = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SwitchLabelContext);
	    } else {
	        return this.getTypedRuleContext(SwitchLabelContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterSwitchLabels(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitSwitchLabels(this);
		}
	}


}



class SwitchLabelContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_switchLabel;
    }

	CASE() {
	    return this.getToken(Java8Parser.CASE, 0);
	};

	constantExpression() {
	    return this.getTypedRuleContext(ConstantExpressionContext,0);
	};

	COLON() {
	    return this.getToken(Java8Parser.COLON, 0);
	};

	enumConstantName() {
	    return this.getTypedRuleContext(EnumConstantNameContext,0);
	};

	DEFAULT() {
	    return this.getToken(Java8Parser.DEFAULT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterSwitchLabel(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitSwitchLabel(this);
		}
	}


}



class EnumConstantNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_enumConstantName;
    }

	Identifier() {
	    return this.getToken(Java8Parser.Identifier, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterEnumConstantName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitEnumConstantName(this);
		}
	}


}



class WhileStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_whileStatement;
    }

	WHILE() {
	    return this.getToken(Java8Parser.WHILE, 0);
	};

	LPAREN() {
	    return this.getToken(Java8Parser.LPAREN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RPAREN() {
	    return this.getToken(Java8Parser.RPAREN, 0);
	};

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterWhileStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitWhileStatement(this);
		}
	}


}



class WhileStatementNoShortIfContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_whileStatementNoShortIf;
    }

	WHILE() {
	    return this.getToken(Java8Parser.WHILE, 0);
	};

	LPAREN() {
	    return this.getToken(Java8Parser.LPAREN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RPAREN() {
	    return this.getToken(Java8Parser.RPAREN, 0);
	};

	statementNoShortIf() {
	    return this.getTypedRuleContext(StatementNoShortIfContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterWhileStatementNoShortIf(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitWhileStatementNoShortIf(this);
		}
	}


}



class DoStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_doStatement;
    }

	DO() {
	    return this.getToken(Java8Parser.DO, 0);
	};

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	WHILE() {
	    return this.getToken(Java8Parser.WHILE, 0);
	};

	LPAREN() {
	    return this.getToken(Java8Parser.LPAREN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RPAREN() {
	    return this.getToken(Java8Parser.RPAREN, 0);
	};

	SEMI() {
	    return this.getToken(Java8Parser.SEMI, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterDoStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitDoStatement(this);
		}
	}


}



class ForStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_forStatement;
    }

	basicForStatement() {
	    return this.getTypedRuleContext(BasicForStatementContext,0);
	};

	enhancedForStatement() {
	    return this.getTypedRuleContext(EnhancedForStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterForStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitForStatement(this);
		}
	}


}



class ForStatementNoShortIfContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_forStatementNoShortIf;
    }

	basicForStatementNoShortIf() {
	    return this.getTypedRuleContext(BasicForStatementNoShortIfContext,0);
	};

	enhancedForStatementNoShortIf() {
	    return this.getTypedRuleContext(EnhancedForStatementNoShortIfContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterForStatementNoShortIf(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitForStatementNoShortIf(this);
		}
	}


}



class BasicForStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_basicForStatement;
    }

	FOR() {
	    return this.getToken(Java8Parser.FOR, 0);
	};

	LPAREN() {
	    return this.getToken(Java8Parser.LPAREN, 0);
	};

	SEMI = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Java8Parser.SEMI);
	    } else {
	        return this.getToken(Java8Parser.SEMI, i);
	    }
	};


	RPAREN() {
	    return this.getToken(Java8Parser.RPAREN, 0);
	};

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	forInit() {
	    return this.getTypedRuleContext(ForInitContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	forUpdate() {
	    return this.getTypedRuleContext(ForUpdateContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterBasicForStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitBasicForStatement(this);
		}
	}


}



class BasicForStatementNoShortIfContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_basicForStatementNoShortIf;
    }

	FOR() {
	    return this.getToken(Java8Parser.FOR, 0);
	};

	LPAREN() {
	    return this.getToken(Java8Parser.LPAREN, 0);
	};

	SEMI = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Java8Parser.SEMI);
	    } else {
	        return this.getToken(Java8Parser.SEMI, i);
	    }
	};


	RPAREN() {
	    return this.getToken(Java8Parser.RPAREN, 0);
	};

	statementNoShortIf() {
	    return this.getTypedRuleContext(StatementNoShortIfContext,0);
	};

	forInit() {
	    return this.getTypedRuleContext(ForInitContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	forUpdate() {
	    return this.getTypedRuleContext(ForUpdateContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterBasicForStatementNoShortIf(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitBasicForStatementNoShortIf(this);
		}
	}


}



class ForInitContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_forInit;
    }

	statementExpressionList() {
	    return this.getTypedRuleContext(StatementExpressionListContext,0);
	};

	localVariableDeclaration() {
	    return this.getTypedRuleContext(LocalVariableDeclarationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterForInit(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitForInit(this);
		}
	}


}



class ForUpdateContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_forUpdate;
    }

	statementExpressionList() {
	    return this.getTypedRuleContext(StatementExpressionListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterForUpdate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitForUpdate(this);
		}
	}


}



class StatementExpressionListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_statementExpressionList;
    }

	statementExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StatementExpressionContext);
	    } else {
	        return this.getTypedRuleContext(StatementExpressionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Java8Parser.COMMA);
	    } else {
	        return this.getToken(Java8Parser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterStatementExpressionList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitStatementExpressionList(this);
		}
	}


}



class EnhancedForStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_enhancedForStatement;
    }

	FOR() {
	    return this.getToken(Java8Parser.FOR, 0);
	};

	LPAREN() {
	    return this.getToken(Java8Parser.LPAREN, 0);
	};

	unannType() {
	    return this.getTypedRuleContext(UnannTypeContext,0);
	};

	variableDeclaratorId() {
	    return this.getTypedRuleContext(VariableDeclaratorIdContext,0);
	};

	COLON() {
	    return this.getToken(Java8Parser.COLON, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RPAREN() {
	    return this.getToken(Java8Parser.RPAREN, 0);
	};

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	variableModifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VariableModifierContext);
	    } else {
	        return this.getTypedRuleContext(VariableModifierContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterEnhancedForStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitEnhancedForStatement(this);
		}
	}


}



class EnhancedForStatementNoShortIfContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_enhancedForStatementNoShortIf;
    }

	FOR() {
	    return this.getToken(Java8Parser.FOR, 0);
	};

	LPAREN() {
	    return this.getToken(Java8Parser.LPAREN, 0);
	};

	unannType() {
	    return this.getTypedRuleContext(UnannTypeContext,0);
	};

	variableDeclaratorId() {
	    return this.getTypedRuleContext(VariableDeclaratorIdContext,0);
	};

	COLON() {
	    return this.getToken(Java8Parser.COLON, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RPAREN() {
	    return this.getToken(Java8Parser.RPAREN, 0);
	};

	statementNoShortIf() {
	    return this.getTypedRuleContext(StatementNoShortIfContext,0);
	};

	variableModifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VariableModifierContext);
	    } else {
	        return this.getTypedRuleContext(VariableModifierContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterEnhancedForStatementNoShortIf(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitEnhancedForStatementNoShortIf(this);
		}
	}


}



class BreakStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_breakStatement;
    }

	BREAK() {
	    return this.getToken(Java8Parser.BREAK, 0);
	};

	SEMI() {
	    return this.getToken(Java8Parser.SEMI, 0);
	};

	Identifier() {
	    return this.getToken(Java8Parser.Identifier, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterBreakStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitBreakStatement(this);
		}
	}


}



class ContinueStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_continueStatement;
    }

	CONTINUE() {
	    return this.getToken(Java8Parser.CONTINUE, 0);
	};

	SEMI() {
	    return this.getToken(Java8Parser.SEMI, 0);
	};

	Identifier() {
	    return this.getToken(Java8Parser.Identifier, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterContinueStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitContinueStatement(this);
		}
	}


}



class ReturnStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_returnStatement;
    }

	RETURN() {
	    return this.getToken(Java8Parser.RETURN, 0);
	};

	SEMI() {
	    return this.getToken(Java8Parser.SEMI, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterReturnStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitReturnStatement(this);
		}
	}


}



class ThrowStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_throwStatement;
    }

	THROW() {
	    return this.getToken(Java8Parser.THROW, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	SEMI() {
	    return this.getToken(Java8Parser.SEMI, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterThrowStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitThrowStatement(this);
		}
	}


}



class SynchronizedStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_synchronizedStatement;
    }

	SYNCHRONIZED() {
	    return this.getToken(Java8Parser.SYNCHRONIZED, 0);
	};

	LPAREN() {
	    return this.getToken(Java8Parser.LPAREN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RPAREN() {
	    return this.getToken(Java8Parser.RPAREN, 0);
	};

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterSynchronizedStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitSynchronizedStatement(this);
		}
	}


}



class TryStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_tryStatement;
    }

	TRY() {
	    return this.getToken(Java8Parser.TRY, 0);
	};

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	catches() {
	    return this.getTypedRuleContext(CatchesContext,0);
	};

	finally_() {
	    return this.getTypedRuleContext(Finally_Context,0);
	};

	tryWithResourcesStatement() {
	    return this.getTypedRuleContext(TryWithResourcesStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterTryStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitTryStatement(this);
		}
	}


}



class CatchesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_catches;
    }

	catchClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CatchClauseContext);
	    } else {
	        return this.getTypedRuleContext(CatchClauseContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterCatches(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitCatches(this);
		}
	}


}



class CatchClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_catchClause;
    }

	CATCH() {
	    return this.getToken(Java8Parser.CATCH, 0);
	};

	LPAREN() {
	    return this.getToken(Java8Parser.LPAREN, 0);
	};

	catchFormalParameter() {
	    return this.getTypedRuleContext(CatchFormalParameterContext,0);
	};

	RPAREN() {
	    return this.getToken(Java8Parser.RPAREN, 0);
	};

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterCatchClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitCatchClause(this);
		}
	}


}



class CatchFormalParameterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_catchFormalParameter;
    }

	catchType() {
	    return this.getTypedRuleContext(CatchTypeContext,0);
	};

	variableDeclaratorId() {
	    return this.getTypedRuleContext(VariableDeclaratorIdContext,0);
	};

	variableModifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VariableModifierContext);
	    } else {
	        return this.getTypedRuleContext(VariableModifierContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterCatchFormalParameter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitCatchFormalParameter(this);
		}
	}


}



class CatchTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_catchType;
    }

	unannClassType() {
	    return this.getTypedRuleContext(UnannClassTypeContext,0);
	};

	BITOR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Java8Parser.BITOR);
	    } else {
	        return this.getToken(Java8Parser.BITOR, i);
	    }
	};


	classType = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ClassTypeContext);
	    } else {
	        return this.getTypedRuleContext(ClassTypeContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterCatchType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitCatchType(this);
		}
	}


}



class Finally_Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_finally_;
    }

	FINALLY() {
	    return this.getToken(Java8Parser.FINALLY, 0);
	};

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterFinally_(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitFinally_(this);
		}
	}


}



class TryWithResourcesStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_tryWithResourcesStatement;
    }

	TRY() {
	    return this.getToken(Java8Parser.TRY, 0);
	};

	resourceSpecification() {
	    return this.getTypedRuleContext(ResourceSpecificationContext,0);
	};

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	catches() {
	    return this.getTypedRuleContext(CatchesContext,0);
	};

	finally_() {
	    return this.getTypedRuleContext(Finally_Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterTryWithResourcesStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitTryWithResourcesStatement(this);
		}
	}


}



class ResourceSpecificationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_resourceSpecification;
    }

	LPAREN() {
	    return this.getToken(Java8Parser.LPAREN, 0);
	};

	resourceList() {
	    return this.getTypedRuleContext(ResourceListContext,0);
	};

	RPAREN() {
	    return this.getToken(Java8Parser.RPAREN, 0);
	};

	SEMI() {
	    return this.getToken(Java8Parser.SEMI, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterResourceSpecification(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitResourceSpecification(this);
		}
	}


}



class ResourceListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_resourceList;
    }

	resource = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ResourceContext);
	    } else {
	        return this.getTypedRuleContext(ResourceContext,i);
	    }
	};

	SEMI = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Java8Parser.SEMI);
	    } else {
	        return this.getToken(Java8Parser.SEMI, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterResourceList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitResourceList(this);
		}
	}


}



class ResourceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_resource;
    }

	unannType() {
	    return this.getTypedRuleContext(UnannTypeContext,0);
	};

	variableDeclaratorId() {
	    return this.getTypedRuleContext(VariableDeclaratorIdContext,0);
	};

	ASSIGN() {
	    return this.getToken(Java8Parser.ASSIGN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	variableModifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VariableModifierContext);
	    } else {
	        return this.getTypedRuleContext(VariableModifierContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterResource(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitResource(this);
		}
	}


}



class PrimaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_primary;
    }

	primaryNoNewArray_lfno_primary() {
	    return this.getTypedRuleContext(PrimaryNoNewArray_lfno_primaryContext,0);
	};

	arrayCreationExpression() {
	    return this.getTypedRuleContext(ArrayCreationExpressionContext,0);
	};

	primaryNoNewArray_lf_primary = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PrimaryNoNewArray_lf_primaryContext);
	    } else {
	        return this.getTypedRuleContext(PrimaryNoNewArray_lf_primaryContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterPrimary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitPrimary(this);
		}
	}


}



class PrimaryNoNewArrayContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_primaryNoNewArray;
    }

	literal() {
	    return this.getTypedRuleContext(LiteralContext,0);
	};

	typeName() {
	    return this.getTypedRuleContext(TypeNameContext,0);
	};

	DOT() {
	    return this.getToken(Java8Parser.DOT, 0);
	};

	CLASS() {
	    return this.getToken(Java8Parser.CLASS, 0);
	};

	LBRACK = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Java8Parser.LBRACK);
	    } else {
	        return this.getToken(Java8Parser.LBRACK, i);
	    }
	};


	RBRACK = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Java8Parser.RBRACK);
	    } else {
	        return this.getToken(Java8Parser.RBRACK, i);
	    }
	};


	VOID() {
	    return this.getToken(Java8Parser.VOID, 0);
	};

	THIS() {
	    return this.getToken(Java8Parser.THIS, 0);
	};

	LPAREN() {
	    return this.getToken(Java8Parser.LPAREN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RPAREN() {
	    return this.getToken(Java8Parser.RPAREN, 0);
	};

	classInstanceCreationExpression() {
	    return this.getTypedRuleContext(ClassInstanceCreationExpressionContext,0);
	};

	fieldAccess() {
	    return this.getTypedRuleContext(FieldAccessContext,0);
	};

	arrayAccess() {
	    return this.getTypedRuleContext(ArrayAccessContext,0);
	};

	methodInvocation() {
	    return this.getTypedRuleContext(MethodInvocationContext,0);
	};

	methodReference() {
	    return this.getTypedRuleContext(MethodReferenceContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterPrimaryNoNewArray(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitPrimaryNoNewArray(this);
		}
	}


}



class PrimaryNoNewArray_lf_arrayAccessContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_primaryNoNewArray_lf_arrayAccess;
    }


	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterPrimaryNoNewArray_lf_arrayAccess(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitPrimaryNoNewArray_lf_arrayAccess(this);
		}
	}


}



class PrimaryNoNewArray_lfno_arrayAccessContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_primaryNoNewArray_lfno_arrayAccess;
    }

	literal() {
	    return this.getTypedRuleContext(LiteralContext,0);
	};

	typeName() {
	    return this.getTypedRuleContext(TypeNameContext,0);
	};

	DOT() {
	    return this.getToken(Java8Parser.DOT, 0);
	};

	CLASS() {
	    return this.getToken(Java8Parser.CLASS, 0);
	};

	LBRACK = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Java8Parser.LBRACK);
	    } else {
	        return this.getToken(Java8Parser.LBRACK, i);
	    }
	};


	RBRACK = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Java8Parser.RBRACK);
	    } else {
	        return this.getToken(Java8Parser.RBRACK, i);
	    }
	};


	VOID() {
	    return this.getToken(Java8Parser.VOID, 0);
	};

	THIS() {
	    return this.getToken(Java8Parser.THIS, 0);
	};

	LPAREN() {
	    return this.getToken(Java8Parser.LPAREN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RPAREN() {
	    return this.getToken(Java8Parser.RPAREN, 0);
	};

	classInstanceCreationExpression() {
	    return this.getTypedRuleContext(ClassInstanceCreationExpressionContext,0);
	};

	fieldAccess() {
	    return this.getTypedRuleContext(FieldAccessContext,0);
	};

	methodInvocation() {
	    return this.getTypedRuleContext(MethodInvocationContext,0);
	};

	methodReference() {
	    return this.getTypedRuleContext(MethodReferenceContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterPrimaryNoNewArray_lfno_arrayAccess(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitPrimaryNoNewArray_lfno_arrayAccess(this);
		}
	}


}



class PrimaryNoNewArray_lf_primaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_primaryNoNewArray_lf_primary;
    }

	classInstanceCreationExpression_lf_primary() {
	    return this.getTypedRuleContext(ClassInstanceCreationExpression_lf_primaryContext,0);
	};

	fieldAccess_lf_primary() {
	    return this.getTypedRuleContext(FieldAccess_lf_primaryContext,0);
	};

	arrayAccess_lf_primary() {
	    return this.getTypedRuleContext(ArrayAccess_lf_primaryContext,0);
	};

	methodInvocation_lf_primary() {
	    return this.getTypedRuleContext(MethodInvocation_lf_primaryContext,0);
	};

	methodReference_lf_primary() {
	    return this.getTypedRuleContext(MethodReference_lf_primaryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterPrimaryNoNewArray_lf_primary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitPrimaryNoNewArray_lf_primary(this);
		}
	}


}



class PrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_primaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary;
    }


	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterPrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitPrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary(this);
		}
	}


}



class PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_primaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary;
    }

	classInstanceCreationExpression_lf_primary() {
	    return this.getTypedRuleContext(ClassInstanceCreationExpression_lf_primaryContext,0);
	};

	fieldAccess_lf_primary() {
	    return this.getTypedRuleContext(FieldAccess_lf_primaryContext,0);
	};

	methodInvocation_lf_primary() {
	    return this.getTypedRuleContext(MethodInvocation_lf_primaryContext,0);
	};

	methodReference_lf_primary() {
	    return this.getTypedRuleContext(MethodReference_lf_primaryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterPrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitPrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary(this);
		}
	}


}



class PrimaryNoNewArray_lfno_primaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_primaryNoNewArray_lfno_primary;
    }

	literal() {
	    return this.getTypedRuleContext(LiteralContext,0);
	};

	typeName() {
	    return this.getTypedRuleContext(TypeNameContext,0);
	};

	DOT() {
	    return this.getToken(Java8Parser.DOT, 0);
	};

	CLASS() {
	    return this.getToken(Java8Parser.CLASS, 0);
	};

	LBRACK = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Java8Parser.LBRACK);
	    } else {
	        return this.getToken(Java8Parser.LBRACK, i);
	    }
	};


	RBRACK = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Java8Parser.RBRACK);
	    } else {
	        return this.getToken(Java8Parser.RBRACK, i);
	    }
	};


	unannPrimitiveType() {
	    return this.getTypedRuleContext(UnannPrimitiveTypeContext,0);
	};

	VOID() {
	    return this.getToken(Java8Parser.VOID, 0);
	};

	THIS() {
	    return this.getToken(Java8Parser.THIS, 0);
	};

	LPAREN() {
	    return this.getToken(Java8Parser.LPAREN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RPAREN() {
	    return this.getToken(Java8Parser.RPAREN, 0);
	};

	classInstanceCreationExpression_lfno_primary() {
	    return this.getTypedRuleContext(ClassInstanceCreationExpression_lfno_primaryContext,0);
	};

	fieldAccess_lfno_primary() {
	    return this.getTypedRuleContext(FieldAccess_lfno_primaryContext,0);
	};

	arrayAccess_lfno_primary() {
	    return this.getTypedRuleContext(ArrayAccess_lfno_primaryContext,0);
	};

	methodInvocation_lfno_primary() {
	    return this.getTypedRuleContext(MethodInvocation_lfno_primaryContext,0);
	};

	methodReference_lfno_primary() {
	    return this.getTypedRuleContext(MethodReference_lfno_primaryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterPrimaryNoNewArray_lfno_primary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitPrimaryNoNewArray_lfno_primary(this);
		}
	}


}



class PrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_primaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary;
    }


	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterPrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitPrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary(this);
		}
	}


}



class PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_primaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary;
    }

	literal() {
	    return this.getTypedRuleContext(LiteralContext,0);
	};

	typeName() {
	    return this.getTypedRuleContext(TypeNameContext,0);
	};

	DOT() {
	    return this.getToken(Java8Parser.DOT, 0);
	};

	CLASS() {
	    return this.getToken(Java8Parser.CLASS, 0);
	};

	LBRACK = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Java8Parser.LBRACK);
	    } else {
	        return this.getToken(Java8Parser.LBRACK, i);
	    }
	};


	RBRACK = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Java8Parser.RBRACK);
	    } else {
	        return this.getToken(Java8Parser.RBRACK, i);
	    }
	};


	unannPrimitiveType() {
	    return this.getTypedRuleContext(UnannPrimitiveTypeContext,0);
	};

	VOID() {
	    return this.getToken(Java8Parser.VOID, 0);
	};

	THIS() {
	    return this.getToken(Java8Parser.THIS, 0);
	};

	LPAREN() {
	    return this.getToken(Java8Parser.LPAREN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RPAREN() {
	    return this.getToken(Java8Parser.RPAREN, 0);
	};

	classInstanceCreationExpression_lfno_primary() {
	    return this.getTypedRuleContext(ClassInstanceCreationExpression_lfno_primaryContext,0);
	};

	fieldAccess_lfno_primary() {
	    return this.getTypedRuleContext(FieldAccess_lfno_primaryContext,0);
	};

	methodInvocation_lfno_primary() {
	    return this.getTypedRuleContext(MethodInvocation_lfno_primaryContext,0);
	};

	methodReference_lfno_primary() {
	    return this.getTypedRuleContext(MethodReference_lfno_primaryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterPrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitPrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary(this);
		}
	}


}



class ClassInstanceCreationExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_classInstanceCreationExpression;
    }

	NEW() {
	    return this.getToken(Java8Parser.NEW, 0);
	};

	Identifier = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Java8Parser.Identifier);
	    } else {
	        return this.getToken(Java8Parser.Identifier, i);
	    }
	};


	LPAREN() {
	    return this.getToken(Java8Parser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(Java8Parser.RPAREN, 0);
	};

	typeArguments() {
	    return this.getTypedRuleContext(TypeArgumentsContext,0);
	};

	annotation = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationContext);
	    } else {
	        return this.getTypedRuleContext(AnnotationContext,i);
	    }
	};

	DOT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Java8Parser.DOT);
	    } else {
	        return this.getToken(Java8Parser.DOT, i);
	    }
	};


	typeArgumentsOrDiamond() {
	    return this.getTypedRuleContext(TypeArgumentsOrDiamondContext,0);
	};

	argumentList() {
	    return this.getTypedRuleContext(ArgumentListContext,0);
	};

	classBody() {
	    return this.getTypedRuleContext(ClassBodyContext,0);
	};

	expressionName() {
	    return this.getTypedRuleContext(ExpressionNameContext,0);
	};

	primary() {
	    return this.getTypedRuleContext(PrimaryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterClassInstanceCreationExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitClassInstanceCreationExpression(this);
		}
	}


}



class ClassInstanceCreationExpression_lf_primaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_classInstanceCreationExpression_lf_primary;
    }

	DOT() {
	    return this.getToken(Java8Parser.DOT, 0);
	};

	NEW() {
	    return this.getToken(Java8Parser.NEW, 0);
	};

	Identifier() {
	    return this.getToken(Java8Parser.Identifier, 0);
	};

	LPAREN() {
	    return this.getToken(Java8Parser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(Java8Parser.RPAREN, 0);
	};

	typeArguments() {
	    return this.getTypedRuleContext(TypeArgumentsContext,0);
	};

	annotation = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationContext);
	    } else {
	        return this.getTypedRuleContext(AnnotationContext,i);
	    }
	};

	typeArgumentsOrDiamond() {
	    return this.getTypedRuleContext(TypeArgumentsOrDiamondContext,0);
	};

	argumentList() {
	    return this.getTypedRuleContext(ArgumentListContext,0);
	};

	classBody() {
	    return this.getTypedRuleContext(ClassBodyContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterClassInstanceCreationExpression_lf_primary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitClassInstanceCreationExpression_lf_primary(this);
		}
	}


}



class ClassInstanceCreationExpression_lfno_primaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_classInstanceCreationExpression_lfno_primary;
    }

	NEW() {
	    return this.getToken(Java8Parser.NEW, 0);
	};

	Identifier = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Java8Parser.Identifier);
	    } else {
	        return this.getToken(Java8Parser.Identifier, i);
	    }
	};


	LPAREN() {
	    return this.getToken(Java8Parser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(Java8Parser.RPAREN, 0);
	};

	typeArguments() {
	    return this.getTypedRuleContext(TypeArgumentsContext,0);
	};

	annotation = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationContext);
	    } else {
	        return this.getTypedRuleContext(AnnotationContext,i);
	    }
	};

	DOT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Java8Parser.DOT);
	    } else {
	        return this.getToken(Java8Parser.DOT, i);
	    }
	};


	typeArgumentsOrDiamond() {
	    return this.getTypedRuleContext(TypeArgumentsOrDiamondContext,0);
	};

	argumentList() {
	    return this.getTypedRuleContext(ArgumentListContext,0);
	};

	classBody() {
	    return this.getTypedRuleContext(ClassBodyContext,0);
	};

	expressionName() {
	    return this.getTypedRuleContext(ExpressionNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterClassInstanceCreationExpression_lfno_primary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitClassInstanceCreationExpression_lfno_primary(this);
		}
	}


}



class TypeArgumentsOrDiamondContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_typeArgumentsOrDiamond;
    }

	typeArguments() {
	    return this.getTypedRuleContext(TypeArgumentsContext,0);
	};

	LT() {
	    return this.getToken(Java8Parser.LT, 0);
	};

	GT() {
	    return this.getToken(Java8Parser.GT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterTypeArgumentsOrDiamond(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitTypeArgumentsOrDiamond(this);
		}
	}


}



class FieldAccessContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_fieldAccess;
    }

	primary() {
	    return this.getTypedRuleContext(PrimaryContext,0);
	};

	DOT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Java8Parser.DOT);
	    } else {
	        return this.getToken(Java8Parser.DOT, i);
	    }
	};


	Identifier() {
	    return this.getToken(Java8Parser.Identifier, 0);
	};

	SUPER() {
	    return this.getToken(Java8Parser.SUPER, 0);
	};

	typeName() {
	    return this.getTypedRuleContext(TypeNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterFieldAccess(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitFieldAccess(this);
		}
	}


}



class FieldAccess_lf_primaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_fieldAccess_lf_primary;
    }

	DOT() {
	    return this.getToken(Java8Parser.DOT, 0);
	};

	Identifier() {
	    return this.getToken(Java8Parser.Identifier, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterFieldAccess_lf_primary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitFieldAccess_lf_primary(this);
		}
	}


}



class FieldAccess_lfno_primaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_fieldAccess_lfno_primary;
    }

	SUPER() {
	    return this.getToken(Java8Parser.SUPER, 0);
	};

	DOT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Java8Parser.DOT);
	    } else {
	        return this.getToken(Java8Parser.DOT, i);
	    }
	};


	Identifier() {
	    return this.getToken(Java8Parser.Identifier, 0);
	};

	typeName() {
	    return this.getTypedRuleContext(TypeNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterFieldAccess_lfno_primary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitFieldAccess_lfno_primary(this);
		}
	}


}



class ArrayAccessContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_arrayAccess;
    }

	expressionName() {
	    return this.getTypedRuleContext(ExpressionNameContext,0);
	};

	LBRACK = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Java8Parser.LBRACK);
	    } else {
	        return this.getToken(Java8Parser.LBRACK, i);
	    }
	};


	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	RBRACK = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Java8Parser.RBRACK);
	    } else {
	        return this.getToken(Java8Parser.RBRACK, i);
	    }
	};


	primaryNoNewArray_lfno_arrayAccess() {
	    return this.getTypedRuleContext(PrimaryNoNewArray_lfno_arrayAccessContext,0);
	};

	primaryNoNewArray_lf_arrayAccess = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PrimaryNoNewArray_lf_arrayAccessContext);
	    } else {
	        return this.getTypedRuleContext(PrimaryNoNewArray_lf_arrayAccessContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterArrayAccess(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitArrayAccess(this);
		}
	}


}



class ArrayAccess_lf_primaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_arrayAccess_lf_primary;
    }

	primaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary() {
	    return this.getTypedRuleContext(PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primaryContext,0);
	};

	LBRACK = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Java8Parser.LBRACK);
	    } else {
	        return this.getToken(Java8Parser.LBRACK, i);
	    }
	};


	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	RBRACK = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Java8Parser.RBRACK);
	    } else {
	        return this.getToken(Java8Parser.RBRACK, i);
	    }
	};


	primaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primaryContext);
	    } else {
	        return this.getTypedRuleContext(PrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primaryContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterArrayAccess_lf_primary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitArrayAccess_lf_primary(this);
		}
	}


}



class ArrayAccess_lfno_primaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_arrayAccess_lfno_primary;
    }

	expressionName() {
	    return this.getTypedRuleContext(ExpressionNameContext,0);
	};

	LBRACK = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Java8Parser.LBRACK);
	    } else {
	        return this.getToken(Java8Parser.LBRACK, i);
	    }
	};


	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	RBRACK = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Java8Parser.RBRACK);
	    } else {
	        return this.getToken(Java8Parser.RBRACK, i);
	    }
	};


	primaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary() {
	    return this.getTypedRuleContext(PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext,0);
	};

	primaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primaryContext);
	    } else {
	        return this.getTypedRuleContext(PrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primaryContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterArrayAccess_lfno_primary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitArrayAccess_lfno_primary(this);
		}
	}


}



class MethodInvocationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_methodInvocation;
    }

	methodName() {
	    return this.getTypedRuleContext(MethodNameContext,0);
	};

	LPAREN() {
	    return this.getToken(Java8Parser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(Java8Parser.RPAREN, 0);
	};

	argumentList() {
	    return this.getTypedRuleContext(ArgumentListContext,0);
	};

	typeName() {
	    return this.getTypedRuleContext(TypeNameContext,0);
	};

	DOT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Java8Parser.DOT);
	    } else {
	        return this.getToken(Java8Parser.DOT, i);
	    }
	};


	Identifier() {
	    return this.getToken(Java8Parser.Identifier, 0);
	};

	typeArguments() {
	    return this.getTypedRuleContext(TypeArgumentsContext,0);
	};

	expressionName() {
	    return this.getTypedRuleContext(ExpressionNameContext,0);
	};

	primary() {
	    return this.getTypedRuleContext(PrimaryContext,0);
	};

	SUPER() {
	    return this.getToken(Java8Parser.SUPER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterMethodInvocation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitMethodInvocation(this);
		}
	}


}



class MethodInvocation_lf_primaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_methodInvocation_lf_primary;
    }

	DOT() {
	    return this.getToken(Java8Parser.DOT, 0);
	};

	Identifier() {
	    return this.getToken(Java8Parser.Identifier, 0);
	};

	LPAREN() {
	    return this.getToken(Java8Parser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(Java8Parser.RPAREN, 0);
	};

	typeArguments() {
	    return this.getTypedRuleContext(TypeArgumentsContext,0);
	};

	argumentList() {
	    return this.getTypedRuleContext(ArgumentListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterMethodInvocation_lf_primary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitMethodInvocation_lf_primary(this);
		}
	}


}



class MethodInvocation_lfno_primaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_methodInvocation_lfno_primary;
    }

	methodName() {
	    return this.getTypedRuleContext(MethodNameContext,0);
	};

	LPAREN() {
	    return this.getToken(Java8Parser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(Java8Parser.RPAREN, 0);
	};

	argumentList() {
	    return this.getTypedRuleContext(ArgumentListContext,0);
	};

	typeName() {
	    return this.getTypedRuleContext(TypeNameContext,0);
	};

	DOT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Java8Parser.DOT);
	    } else {
	        return this.getToken(Java8Parser.DOT, i);
	    }
	};


	Identifier() {
	    return this.getToken(Java8Parser.Identifier, 0);
	};

	typeArguments() {
	    return this.getTypedRuleContext(TypeArgumentsContext,0);
	};

	expressionName() {
	    return this.getTypedRuleContext(ExpressionNameContext,0);
	};

	SUPER() {
	    return this.getToken(Java8Parser.SUPER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterMethodInvocation_lfno_primary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitMethodInvocation_lfno_primary(this);
		}
	}


}



class ArgumentListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_argumentList;
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Java8Parser.COMMA);
	    } else {
	        return this.getToken(Java8Parser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterArgumentList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitArgumentList(this);
		}
	}


}



class MethodReferenceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_methodReference;
    }

	expressionName() {
	    return this.getTypedRuleContext(ExpressionNameContext,0);
	};

	COLONCOLON() {
	    return this.getToken(Java8Parser.COLONCOLON, 0);
	};

	Identifier() {
	    return this.getToken(Java8Parser.Identifier, 0);
	};

	typeArguments() {
	    return this.getTypedRuleContext(TypeArgumentsContext,0);
	};

	referenceType() {
	    return this.getTypedRuleContext(ReferenceTypeContext,0);
	};

	primary() {
	    return this.getTypedRuleContext(PrimaryContext,0);
	};

	SUPER() {
	    return this.getToken(Java8Parser.SUPER, 0);
	};

	typeName() {
	    return this.getTypedRuleContext(TypeNameContext,0);
	};

	DOT() {
	    return this.getToken(Java8Parser.DOT, 0);
	};

	classType() {
	    return this.getTypedRuleContext(ClassTypeContext,0);
	};

	NEW() {
	    return this.getToken(Java8Parser.NEW, 0);
	};

	arrayType() {
	    return this.getTypedRuleContext(ArrayTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterMethodReference(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitMethodReference(this);
		}
	}


}



class MethodReference_lf_primaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_methodReference_lf_primary;
    }

	COLONCOLON() {
	    return this.getToken(Java8Parser.COLONCOLON, 0);
	};

	Identifier() {
	    return this.getToken(Java8Parser.Identifier, 0);
	};

	typeArguments() {
	    return this.getTypedRuleContext(TypeArgumentsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterMethodReference_lf_primary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitMethodReference_lf_primary(this);
		}
	}


}



class MethodReference_lfno_primaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_methodReference_lfno_primary;
    }

	expressionName() {
	    return this.getTypedRuleContext(ExpressionNameContext,0);
	};

	COLONCOLON() {
	    return this.getToken(Java8Parser.COLONCOLON, 0);
	};

	Identifier() {
	    return this.getToken(Java8Parser.Identifier, 0);
	};

	typeArguments() {
	    return this.getTypedRuleContext(TypeArgumentsContext,0);
	};

	referenceType() {
	    return this.getTypedRuleContext(ReferenceTypeContext,0);
	};

	SUPER() {
	    return this.getToken(Java8Parser.SUPER, 0);
	};

	typeName() {
	    return this.getTypedRuleContext(TypeNameContext,0);
	};

	DOT() {
	    return this.getToken(Java8Parser.DOT, 0);
	};

	classType() {
	    return this.getTypedRuleContext(ClassTypeContext,0);
	};

	NEW() {
	    return this.getToken(Java8Parser.NEW, 0);
	};

	arrayType() {
	    return this.getTypedRuleContext(ArrayTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterMethodReference_lfno_primary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitMethodReference_lfno_primary(this);
		}
	}


}



class ArrayCreationExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_arrayCreationExpression;
    }

	NEW() {
	    return this.getToken(Java8Parser.NEW, 0);
	};

	primitiveType() {
	    return this.getTypedRuleContext(PrimitiveTypeContext,0);
	};

	dimExprs() {
	    return this.getTypedRuleContext(DimExprsContext,0);
	};

	dims() {
	    return this.getTypedRuleContext(DimsContext,0);
	};

	classOrInterfaceType() {
	    return this.getTypedRuleContext(ClassOrInterfaceTypeContext,0);
	};

	arrayInitializer() {
	    return this.getTypedRuleContext(ArrayInitializerContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterArrayCreationExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitArrayCreationExpression(this);
		}
	}


}



class DimExprsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_dimExprs;
    }

	dimExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DimExprContext);
	    } else {
	        return this.getTypedRuleContext(DimExprContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterDimExprs(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitDimExprs(this);
		}
	}


}



class DimExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_dimExpr;
    }

	LBRACK() {
	    return this.getToken(Java8Parser.LBRACK, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RBRACK() {
	    return this.getToken(Java8Parser.RBRACK, 0);
	};

	annotation = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationContext);
	    } else {
	        return this.getTypedRuleContext(AnnotationContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterDimExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitDimExpr(this);
		}
	}


}



class ConstantExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_constantExpression;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterConstantExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitConstantExpression(this);
		}
	}


}



class ExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_expression;
    }

	lambdaExpression() {
	    return this.getTypedRuleContext(LambdaExpressionContext,0);
	};

	assignmentExpression() {
	    return this.getTypedRuleContext(AssignmentExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitExpression(this);
		}
	}


}



class LambdaExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_lambdaExpression;
    }

	lambdaParameters() {
	    return this.getTypedRuleContext(LambdaParametersContext,0);
	};

	ARROW() {
	    return this.getToken(Java8Parser.ARROW, 0);
	};

	lambdaBody() {
	    return this.getTypedRuleContext(LambdaBodyContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterLambdaExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitLambdaExpression(this);
		}
	}


}



class LambdaParametersContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_lambdaParameters;
    }

	Identifier() {
	    return this.getToken(Java8Parser.Identifier, 0);
	};

	LPAREN() {
	    return this.getToken(Java8Parser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(Java8Parser.RPAREN, 0);
	};

	formalParameterList() {
	    return this.getTypedRuleContext(FormalParameterListContext,0);
	};

	inferredFormalParameterList() {
	    return this.getTypedRuleContext(InferredFormalParameterListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterLambdaParameters(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitLambdaParameters(this);
		}
	}


}



class InferredFormalParameterListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_inferredFormalParameterList;
    }

	Identifier = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Java8Parser.Identifier);
	    } else {
	        return this.getToken(Java8Parser.Identifier, i);
	    }
	};


	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Java8Parser.COMMA);
	    } else {
	        return this.getToken(Java8Parser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterInferredFormalParameterList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitInferredFormalParameterList(this);
		}
	}


}



class LambdaBodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_lambdaBody;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterLambdaBody(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitLambdaBody(this);
		}
	}


}



class AssignmentExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_assignmentExpression;
    }

	conditionalExpression() {
	    return this.getTypedRuleContext(ConditionalExpressionContext,0);
	};

	assignment() {
	    return this.getTypedRuleContext(AssignmentContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterAssignmentExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitAssignmentExpression(this);
		}
	}


}



class AssignmentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_assignment;
    }

	leftHandSide() {
	    return this.getTypedRuleContext(LeftHandSideContext,0);
	};

	assignmentOperator() {
	    return this.getTypedRuleContext(AssignmentOperatorContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterAssignment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitAssignment(this);
		}
	}


}



class LeftHandSideContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_leftHandSide;
    }

	expressionName() {
	    return this.getTypedRuleContext(ExpressionNameContext,0);
	};

	fieldAccess() {
	    return this.getTypedRuleContext(FieldAccessContext,0);
	};

	arrayAccess() {
	    return this.getTypedRuleContext(ArrayAccessContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterLeftHandSide(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitLeftHandSide(this);
		}
	}


}



class AssignmentOperatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_assignmentOperator;
    }

	ASSIGN() {
	    return this.getToken(Java8Parser.ASSIGN, 0);
	};

	MUL_ASSIGN() {
	    return this.getToken(Java8Parser.MUL_ASSIGN, 0);
	};

	DIV_ASSIGN() {
	    return this.getToken(Java8Parser.DIV_ASSIGN, 0);
	};

	MOD_ASSIGN() {
	    return this.getToken(Java8Parser.MOD_ASSIGN, 0);
	};

	ADD_ASSIGN() {
	    return this.getToken(Java8Parser.ADD_ASSIGN, 0);
	};

	SUB_ASSIGN() {
	    return this.getToken(Java8Parser.SUB_ASSIGN, 0);
	};

	LSHIFT_ASSIGN() {
	    return this.getToken(Java8Parser.LSHIFT_ASSIGN, 0);
	};

	RSHIFT_ASSIGN() {
	    return this.getToken(Java8Parser.RSHIFT_ASSIGN, 0);
	};

	URSHIFT_ASSIGN() {
	    return this.getToken(Java8Parser.URSHIFT_ASSIGN, 0);
	};

	AND_ASSIGN() {
	    return this.getToken(Java8Parser.AND_ASSIGN, 0);
	};

	XOR_ASSIGN() {
	    return this.getToken(Java8Parser.XOR_ASSIGN, 0);
	};

	OR_ASSIGN() {
	    return this.getToken(Java8Parser.OR_ASSIGN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterAssignmentOperator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitAssignmentOperator(this);
		}
	}


}



class ConditionalExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_conditionalExpression;
    }

	conditionalOrExpression() {
	    return this.getTypedRuleContext(ConditionalOrExpressionContext,0);
	};

	QUESTION() {
	    return this.getToken(Java8Parser.QUESTION, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	COLON() {
	    return this.getToken(Java8Parser.COLON, 0);
	};

	conditionalExpression() {
	    return this.getTypedRuleContext(ConditionalExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterConditionalExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitConditionalExpression(this);
		}
	}


}



class ConditionalOrExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_conditionalOrExpression;
    }

	conditionalAndExpression() {
	    return this.getTypedRuleContext(ConditionalAndExpressionContext,0);
	};

	conditionalOrExpression() {
	    return this.getTypedRuleContext(ConditionalOrExpressionContext,0);
	};

	OR() {
	    return this.getToken(Java8Parser.OR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterConditionalOrExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitConditionalOrExpression(this);
		}
	}


}



class ConditionalAndExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_conditionalAndExpression;
    }

	inclusiveOrExpression() {
	    return this.getTypedRuleContext(InclusiveOrExpressionContext,0);
	};

	conditionalAndExpression() {
	    return this.getTypedRuleContext(ConditionalAndExpressionContext,0);
	};

	AND() {
	    return this.getToken(Java8Parser.AND, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterConditionalAndExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitConditionalAndExpression(this);
		}
	}


}



class InclusiveOrExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_inclusiveOrExpression;
    }

	exclusiveOrExpression() {
	    return this.getTypedRuleContext(ExclusiveOrExpressionContext,0);
	};

	inclusiveOrExpression() {
	    return this.getTypedRuleContext(InclusiveOrExpressionContext,0);
	};

	BITOR() {
	    return this.getToken(Java8Parser.BITOR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterInclusiveOrExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitInclusiveOrExpression(this);
		}
	}


}



class ExclusiveOrExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_exclusiveOrExpression;
    }

	andExpression() {
	    return this.getTypedRuleContext(AndExpressionContext,0);
	};

	exclusiveOrExpression() {
	    return this.getTypedRuleContext(ExclusiveOrExpressionContext,0);
	};

	CARET() {
	    return this.getToken(Java8Parser.CARET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterExclusiveOrExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitExclusiveOrExpression(this);
		}
	}


}



class AndExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_andExpression;
    }

	equalityExpression() {
	    return this.getTypedRuleContext(EqualityExpressionContext,0);
	};

	andExpression() {
	    return this.getTypedRuleContext(AndExpressionContext,0);
	};

	BITAND() {
	    return this.getToken(Java8Parser.BITAND, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterAndExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitAndExpression(this);
		}
	}


}



class EqualityExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_equalityExpression;
    }

	relationalExpression() {
	    return this.getTypedRuleContext(RelationalExpressionContext,0);
	};

	equalityExpression() {
	    return this.getTypedRuleContext(EqualityExpressionContext,0);
	};

	EQUAL() {
	    return this.getToken(Java8Parser.EQUAL, 0);
	};

	NOTEQUAL() {
	    return this.getToken(Java8Parser.NOTEQUAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterEqualityExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitEqualityExpression(this);
		}
	}


}



class RelationalExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_relationalExpression;
    }

	shiftExpression() {
	    return this.getTypedRuleContext(ShiftExpressionContext,0);
	};

	relationalExpression() {
	    return this.getTypedRuleContext(RelationalExpressionContext,0);
	};

	LT() {
	    return this.getToken(Java8Parser.LT, 0);
	};

	GT() {
	    return this.getToken(Java8Parser.GT, 0);
	};

	LE() {
	    return this.getToken(Java8Parser.LE, 0);
	};

	GE() {
	    return this.getToken(Java8Parser.GE, 0);
	};

	INSTANCEOF() {
	    return this.getToken(Java8Parser.INSTANCEOF, 0);
	};

	referenceType() {
	    return this.getTypedRuleContext(ReferenceTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterRelationalExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitRelationalExpression(this);
		}
	}


}



class ShiftExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_shiftExpression;
    }

	additiveExpression() {
	    return this.getTypedRuleContext(AdditiveExpressionContext,0);
	};

	shiftExpression() {
	    return this.getTypedRuleContext(ShiftExpressionContext,0);
	};

	LT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Java8Parser.LT);
	    } else {
	        return this.getToken(Java8Parser.LT, i);
	    }
	};


	GT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Java8Parser.GT);
	    } else {
	        return this.getToken(Java8Parser.GT, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterShiftExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitShiftExpression(this);
		}
	}


}



class AdditiveExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_additiveExpression;
    }

	multiplicativeExpression() {
	    return this.getTypedRuleContext(MultiplicativeExpressionContext,0);
	};

	additiveExpression() {
	    return this.getTypedRuleContext(AdditiveExpressionContext,0);
	};

	ADD() {
	    return this.getToken(Java8Parser.ADD, 0);
	};

	SUB() {
	    return this.getToken(Java8Parser.SUB, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterAdditiveExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitAdditiveExpression(this);
		}
	}


}



class MultiplicativeExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_multiplicativeExpression;
    }

	unaryExpression() {
	    return this.getTypedRuleContext(UnaryExpressionContext,0);
	};

	multiplicativeExpression() {
	    return this.getTypedRuleContext(MultiplicativeExpressionContext,0);
	};

	MUL() {
	    return this.getToken(Java8Parser.MUL, 0);
	};

	DIV() {
	    return this.getToken(Java8Parser.DIV, 0);
	};

	MOD() {
	    return this.getToken(Java8Parser.MOD, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterMultiplicativeExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitMultiplicativeExpression(this);
		}
	}


}



class UnaryExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_unaryExpression;
    }

	preIncrementExpression() {
	    return this.getTypedRuleContext(PreIncrementExpressionContext,0);
	};

	preDecrementExpression() {
	    return this.getTypedRuleContext(PreDecrementExpressionContext,0);
	};

	ADD() {
	    return this.getToken(Java8Parser.ADD, 0);
	};

	unaryExpression() {
	    return this.getTypedRuleContext(UnaryExpressionContext,0);
	};

	SUB() {
	    return this.getToken(Java8Parser.SUB, 0);
	};

	unaryExpressionNotPlusMinus() {
	    return this.getTypedRuleContext(UnaryExpressionNotPlusMinusContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterUnaryExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitUnaryExpression(this);
		}
	}


}



class PreIncrementExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_preIncrementExpression;
    }

	INC() {
	    return this.getToken(Java8Parser.INC, 0);
	};

	unaryExpression() {
	    return this.getTypedRuleContext(UnaryExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterPreIncrementExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitPreIncrementExpression(this);
		}
	}


}



class PreDecrementExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_preDecrementExpression;
    }

	DEC() {
	    return this.getToken(Java8Parser.DEC, 0);
	};

	unaryExpression() {
	    return this.getTypedRuleContext(UnaryExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterPreDecrementExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitPreDecrementExpression(this);
		}
	}


}



class UnaryExpressionNotPlusMinusContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_unaryExpressionNotPlusMinus;
    }

	postfixExpression() {
	    return this.getTypedRuleContext(PostfixExpressionContext,0);
	};

	TILDE() {
	    return this.getToken(Java8Parser.TILDE, 0);
	};

	unaryExpression() {
	    return this.getTypedRuleContext(UnaryExpressionContext,0);
	};

	BANG() {
	    return this.getToken(Java8Parser.BANG, 0);
	};

	castExpression() {
	    return this.getTypedRuleContext(CastExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterUnaryExpressionNotPlusMinus(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitUnaryExpressionNotPlusMinus(this);
		}
	}


}



class PostfixExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_postfixExpression;
    }

	primary() {
	    return this.getTypedRuleContext(PrimaryContext,0);
	};

	expressionName() {
	    return this.getTypedRuleContext(ExpressionNameContext,0);
	};

	postIncrementExpression_lf_postfixExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PostIncrementExpression_lf_postfixExpressionContext);
	    } else {
	        return this.getTypedRuleContext(PostIncrementExpression_lf_postfixExpressionContext,i);
	    }
	};

	postDecrementExpression_lf_postfixExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PostDecrementExpression_lf_postfixExpressionContext);
	    } else {
	        return this.getTypedRuleContext(PostDecrementExpression_lf_postfixExpressionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterPostfixExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitPostfixExpression(this);
		}
	}


}



class PostIncrementExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_postIncrementExpression;
    }

	postfixExpression() {
	    return this.getTypedRuleContext(PostfixExpressionContext,0);
	};

	INC() {
	    return this.getToken(Java8Parser.INC, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterPostIncrementExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitPostIncrementExpression(this);
		}
	}


}



class PostIncrementExpression_lf_postfixExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_postIncrementExpression_lf_postfixExpression;
    }

	INC() {
	    return this.getToken(Java8Parser.INC, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterPostIncrementExpression_lf_postfixExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitPostIncrementExpression_lf_postfixExpression(this);
		}
	}


}



class PostDecrementExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_postDecrementExpression;
    }

	postfixExpression() {
	    return this.getTypedRuleContext(PostfixExpressionContext,0);
	};

	DEC() {
	    return this.getToken(Java8Parser.DEC, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterPostDecrementExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitPostDecrementExpression(this);
		}
	}


}



class PostDecrementExpression_lf_postfixExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_postDecrementExpression_lf_postfixExpression;
    }

	DEC() {
	    return this.getToken(Java8Parser.DEC, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterPostDecrementExpression_lf_postfixExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitPostDecrementExpression_lf_postfixExpression(this);
		}
	}


}



class CastExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_castExpression;
    }

	LPAREN() {
	    return this.getToken(Java8Parser.LPAREN, 0);
	};

	primitiveType() {
	    return this.getTypedRuleContext(PrimitiveTypeContext,0);
	};

	RPAREN() {
	    return this.getToken(Java8Parser.RPAREN, 0);
	};

	unaryExpression() {
	    return this.getTypedRuleContext(UnaryExpressionContext,0);
	};

	referenceType() {
	    return this.getTypedRuleContext(ReferenceTypeContext,0);
	};

	unaryExpressionNotPlusMinus() {
	    return this.getTypedRuleContext(UnaryExpressionNotPlusMinusContext,0);
	};

	additionalBound = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AdditionalBoundContext);
	    } else {
	        return this.getTypedRuleContext(AdditionalBoundContext,i);
	    }
	};

	lambdaExpression() {
	    return this.getTypedRuleContext(LambdaExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.enterCastExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8Listener ) {
	        listener.exitCastExpression(this);
		}
	}


}




Java8Parser.LiteralContext = LiteralContext; 
Java8Parser.TypeContext = TypeContext; 
Java8Parser.PrimitiveTypeContext = PrimitiveTypeContext; 
Java8Parser.NumericTypeContext = NumericTypeContext; 
Java8Parser.IntegralTypeContext = IntegralTypeContext; 
Java8Parser.FloatingPointTypeContext = FloatingPointTypeContext; 
Java8Parser.ReferenceTypeContext = ReferenceTypeContext; 
Java8Parser.ClassOrInterfaceTypeContext = ClassOrInterfaceTypeContext; 
Java8Parser.ClassTypeContext = ClassTypeContext; 
Java8Parser.ClassType_lf_classOrInterfaceTypeContext = ClassType_lf_classOrInterfaceTypeContext; 
Java8Parser.ClassType_lfno_classOrInterfaceTypeContext = ClassType_lfno_classOrInterfaceTypeContext; 
Java8Parser.InterfaceTypeContext = InterfaceTypeContext; 
Java8Parser.InterfaceType_lf_classOrInterfaceTypeContext = InterfaceType_lf_classOrInterfaceTypeContext; 
Java8Parser.InterfaceType_lfno_classOrInterfaceTypeContext = InterfaceType_lfno_classOrInterfaceTypeContext; 
Java8Parser.TypeVariableContext = TypeVariableContext; 
Java8Parser.ArrayTypeContext = ArrayTypeContext; 
Java8Parser.DimsContext = DimsContext; 
Java8Parser.TypeParameterContext = TypeParameterContext; 
Java8Parser.TypeParameterModifierContext = TypeParameterModifierContext; 
Java8Parser.TypeBoundContext = TypeBoundContext; 
Java8Parser.AdditionalBoundContext = AdditionalBoundContext; 
Java8Parser.TypeArgumentsContext = TypeArgumentsContext; 
Java8Parser.TypeArgumentListContext = TypeArgumentListContext; 
Java8Parser.TypeArgumentContext = TypeArgumentContext; 
Java8Parser.WildcardContext = WildcardContext; 
Java8Parser.WildcardBoundsContext = WildcardBoundsContext; 
Java8Parser.PackageNameContext = PackageNameContext; 
Java8Parser.TypeNameContext = TypeNameContext; 
Java8Parser.PackageOrTypeNameContext = PackageOrTypeNameContext; 
Java8Parser.ExpressionNameContext = ExpressionNameContext; 
Java8Parser.MethodNameContext = MethodNameContext; 
Java8Parser.AmbiguousNameContext = AmbiguousNameContext; 
Java8Parser.CompilationUnitContext = CompilationUnitContext; 
Java8Parser.PackageDeclarationContext = PackageDeclarationContext; 
Java8Parser.PackageModifierContext = PackageModifierContext; 
Java8Parser.ImportDeclarationContext = ImportDeclarationContext; 
Java8Parser.SingleTypeImportDeclarationContext = SingleTypeImportDeclarationContext; 
Java8Parser.TypeImportOnDemandDeclarationContext = TypeImportOnDemandDeclarationContext; 
Java8Parser.SingleStaticImportDeclarationContext = SingleStaticImportDeclarationContext; 
Java8Parser.StaticImportOnDemandDeclarationContext = StaticImportOnDemandDeclarationContext; 
Java8Parser.TypeDeclarationContext = TypeDeclarationContext; 
Java8Parser.ClassDeclarationContext = ClassDeclarationContext; 
Java8Parser.NormalClassDeclarationContext = NormalClassDeclarationContext; 
Java8Parser.ClassModifierContext = ClassModifierContext; 
Java8Parser.TypeParametersContext = TypeParametersContext; 
Java8Parser.TypeParameterListContext = TypeParameterListContext; 
Java8Parser.SuperclassContext = SuperclassContext; 
Java8Parser.SuperinterfacesContext = SuperinterfacesContext; 
Java8Parser.InterfaceTypeListContext = InterfaceTypeListContext; 
Java8Parser.ClassBodyContext = ClassBodyContext; 
Java8Parser.ClassBodyDeclarationContext = ClassBodyDeclarationContext; 
Java8Parser.ClassMemberDeclarationContext = ClassMemberDeclarationContext; 
Java8Parser.FieldDeclarationContext = FieldDeclarationContext; 
Java8Parser.FieldModifierContext = FieldModifierContext; 
Java8Parser.VariableDeclaratorListContext = VariableDeclaratorListContext; 
Java8Parser.VariableDeclaratorContext = VariableDeclaratorContext; 
Java8Parser.VariableDeclaratorIdContext = VariableDeclaratorIdContext; 
Java8Parser.VariableInitializerContext = VariableInitializerContext; 
Java8Parser.UnannTypeContext = UnannTypeContext; 
Java8Parser.UnannPrimitiveTypeContext = UnannPrimitiveTypeContext; 
Java8Parser.UnannReferenceTypeContext = UnannReferenceTypeContext; 
Java8Parser.UnannClassOrInterfaceTypeContext = UnannClassOrInterfaceTypeContext; 
Java8Parser.UnannClassTypeContext = UnannClassTypeContext; 
Java8Parser.UnannClassType_lf_unannClassOrInterfaceTypeContext = UnannClassType_lf_unannClassOrInterfaceTypeContext; 
Java8Parser.UnannClassType_lfno_unannClassOrInterfaceTypeContext = UnannClassType_lfno_unannClassOrInterfaceTypeContext; 
Java8Parser.UnannInterfaceTypeContext = UnannInterfaceTypeContext; 
Java8Parser.UnannInterfaceType_lf_unannClassOrInterfaceTypeContext = UnannInterfaceType_lf_unannClassOrInterfaceTypeContext; 
Java8Parser.UnannInterfaceType_lfno_unannClassOrInterfaceTypeContext = UnannInterfaceType_lfno_unannClassOrInterfaceTypeContext; 
Java8Parser.UnannTypeVariableContext = UnannTypeVariableContext; 
Java8Parser.UnannArrayTypeContext = UnannArrayTypeContext; 
Java8Parser.MethodDeclarationContext = MethodDeclarationContext; 
Java8Parser.MethodModifierContext = MethodModifierContext; 
Java8Parser.MethodHeaderContext = MethodHeaderContext; 
Java8Parser.ResultContext = ResultContext; 
Java8Parser.MethodDeclaratorContext = MethodDeclaratorContext; 
Java8Parser.FormalParameterListContext = FormalParameterListContext; 
Java8Parser.FormalParametersContext = FormalParametersContext; 
Java8Parser.FormalParameterContext = FormalParameterContext; 
Java8Parser.VariableModifierContext = VariableModifierContext; 
Java8Parser.LastFormalParameterContext = LastFormalParameterContext; 
Java8Parser.ReceiverParameterContext = ReceiverParameterContext; 
Java8Parser.Throws_Context = Throws_Context; 
Java8Parser.ExceptionTypeListContext = ExceptionTypeListContext; 
Java8Parser.ExceptionTypeContext = ExceptionTypeContext; 
Java8Parser.MethodBodyContext = MethodBodyContext; 
Java8Parser.InstanceInitializerContext = InstanceInitializerContext; 
Java8Parser.StaticInitializerContext = StaticInitializerContext; 
Java8Parser.ConstructorDeclarationContext = ConstructorDeclarationContext; 
Java8Parser.ConstructorModifierContext = ConstructorModifierContext; 
Java8Parser.ConstructorDeclaratorContext = ConstructorDeclaratorContext; 
Java8Parser.SimpleTypeNameContext = SimpleTypeNameContext; 
Java8Parser.ConstructorBodyContext = ConstructorBodyContext; 
Java8Parser.ExplicitConstructorInvocationContext = ExplicitConstructorInvocationContext; 
Java8Parser.EnumDeclarationContext = EnumDeclarationContext; 
Java8Parser.EnumBodyContext = EnumBodyContext; 
Java8Parser.EnumConstantListContext = EnumConstantListContext; 
Java8Parser.EnumConstantContext = EnumConstantContext; 
Java8Parser.EnumConstantModifierContext = EnumConstantModifierContext; 
Java8Parser.EnumBodyDeclarationsContext = EnumBodyDeclarationsContext; 
Java8Parser.InterfaceDeclarationContext = InterfaceDeclarationContext; 
Java8Parser.NormalInterfaceDeclarationContext = NormalInterfaceDeclarationContext; 
Java8Parser.InterfaceModifierContext = InterfaceModifierContext; 
Java8Parser.ExtendsInterfacesContext = ExtendsInterfacesContext; 
Java8Parser.InterfaceBodyContext = InterfaceBodyContext; 
Java8Parser.InterfaceMemberDeclarationContext = InterfaceMemberDeclarationContext; 
Java8Parser.ConstantDeclarationContext = ConstantDeclarationContext; 
Java8Parser.ConstantModifierContext = ConstantModifierContext; 
Java8Parser.InterfaceMethodDeclarationContext = InterfaceMethodDeclarationContext; 
Java8Parser.InterfaceMethodModifierContext = InterfaceMethodModifierContext; 
Java8Parser.AnnotationTypeDeclarationContext = AnnotationTypeDeclarationContext; 
Java8Parser.AnnotationTypeBodyContext = AnnotationTypeBodyContext; 
Java8Parser.AnnotationTypeMemberDeclarationContext = AnnotationTypeMemberDeclarationContext; 
Java8Parser.AnnotationTypeElementDeclarationContext = AnnotationTypeElementDeclarationContext; 
Java8Parser.AnnotationTypeElementModifierContext = AnnotationTypeElementModifierContext; 
Java8Parser.DefaultValueContext = DefaultValueContext; 
Java8Parser.AnnotationContext = AnnotationContext; 
Java8Parser.NormalAnnotationContext = NormalAnnotationContext; 
Java8Parser.ElementValuePairListContext = ElementValuePairListContext; 
Java8Parser.ElementValuePairContext = ElementValuePairContext; 
Java8Parser.ElementValueContext = ElementValueContext; 
Java8Parser.ElementValueArrayInitializerContext = ElementValueArrayInitializerContext; 
Java8Parser.ElementValueListContext = ElementValueListContext; 
Java8Parser.MarkerAnnotationContext = MarkerAnnotationContext; 
Java8Parser.SingleElementAnnotationContext = SingleElementAnnotationContext; 
Java8Parser.ArrayInitializerContext = ArrayInitializerContext; 
Java8Parser.VariableInitializerListContext = VariableInitializerListContext; 
Java8Parser.BlockContext = BlockContext; 
Java8Parser.BlockStatementsContext = BlockStatementsContext; 
Java8Parser.BlockStatementContext = BlockStatementContext; 
Java8Parser.LocalVariableDeclarationStatementContext = LocalVariableDeclarationStatementContext; 
Java8Parser.LocalVariableDeclarationContext = LocalVariableDeclarationContext; 
Java8Parser.StatementContext = StatementContext; 
Java8Parser.StatementNoShortIfContext = StatementNoShortIfContext; 
Java8Parser.StatementWithoutTrailingSubstatementContext = StatementWithoutTrailingSubstatementContext; 
Java8Parser.EmptyStatementContext = EmptyStatementContext; 
Java8Parser.LabeledStatementContext = LabeledStatementContext; 
Java8Parser.LabeledStatementNoShortIfContext = LabeledStatementNoShortIfContext; 
Java8Parser.ExpressionStatementContext = ExpressionStatementContext; 
Java8Parser.StatementExpressionContext = StatementExpressionContext; 
Java8Parser.IfThenStatementContext = IfThenStatementContext; 
Java8Parser.IfThenElseStatementContext = IfThenElseStatementContext; 
Java8Parser.IfThenElseStatementNoShortIfContext = IfThenElseStatementNoShortIfContext; 
Java8Parser.AssertStatementContext = AssertStatementContext; 
Java8Parser.SwitchStatementContext = SwitchStatementContext; 
Java8Parser.SwitchBlockContext = SwitchBlockContext; 
Java8Parser.SwitchBlockStatementGroupContext = SwitchBlockStatementGroupContext; 
Java8Parser.SwitchLabelsContext = SwitchLabelsContext; 
Java8Parser.SwitchLabelContext = SwitchLabelContext; 
Java8Parser.EnumConstantNameContext = EnumConstantNameContext; 
Java8Parser.WhileStatementContext = WhileStatementContext; 
Java8Parser.WhileStatementNoShortIfContext = WhileStatementNoShortIfContext; 
Java8Parser.DoStatementContext = DoStatementContext; 
Java8Parser.ForStatementContext = ForStatementContext; 
Java8Parser.ForStatementNoShortIfContext = ForStatementNoShortIfContext; 
Java8Parser.BasicForStatementContext = BasicForStatementContext; 
Java8Parser.BasicForStatementNoShortIfContext = BasicForStatementNoShortIfContext; 
Java8Parser.ForInitContext = ForInitContext; 
Java8Parser.ForUpdateContext = ForUpdateContext; 
Java8Parser.StatementExpressionListContext = StatementExpressionListContext; 
Java8Parser.EnhancedForStatementContext = EnhancedForStatementContext; 
Java8Parser.EnhancedForStatementNoShortIfContext = EnhancedForStatementNoShortIfContext; 
Java8Parser.BreakStatementContext = BreakStatementContext; 
Java8Parser.ContinueStatementContext = ContinueStatementContext; 
Java8Parser.ReturnStatementContext = ReturnStatementContext; 
Java8Parser.ThrowStatementContext = ThrowStatementContext; 
Java8Parser.SynchronizedStatementContext = SynchronizedStatementContext; 
Java8Parser.TryStatementContext = TryStatementContext; 
Java8Parser.CatchesContext = CatchesContext; 
Java8Parser.CatchClauseContext = CatchClauseContext; 
Java8Parser.CatchFormalParameterContext = CatchFormalParameterContext; 
Java8Parser.CatchTypeContext = CatchTypeContext; 
Java8Parser.Finally_Context = Finally_Context; 
Java8Parser.TryWithResourcesStatementContext = TryWithResourcesStatementContext; 
Java8Parser.ResourceSpecificationContext = ResourceSpecificationContext; 
Java8Parser.ResourceListContext = ResourceListContext; 
Java8Parser.ResourceContext = ResourceContext; 
Java8Parser.PrimaryContext = PrimaryContext; 
Java8Parser.PrimaryNoNewArrayContext = PrimaryNoNewArrayContext; 
Java8Parser.PrimaryNoNewArray_lf_arrayAccessContext = PrimaryNoNewArray_lf_arrayAccessContext; 
Java8Parser.PrimaryNoNewArray_lfno_arrayAccessContext = PrimaryNoNewArray_lfno_arrayAccessContext; 
Java8Parser.PrimaryNoNewArray_lf_primaryContext = PrimaryNoNewArray_lf_primaryContext; 
Java8Parser.PrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primaryContext = PrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primaryContext; 
Java8Parser.PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primaryContext = PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primaryContext; 
Java8Parser.PrimaryNoNewArray_lfno_primaryContext = PrimaryNoNewArray_lfno_primaryContext; 
Java8Parser.PrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primaryContext = PrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primaryContext; 
Java8Parser.PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext = PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext; 
Java8Parser.ClassInstanceCreationExpressionContext = ClassInstanceCreationExpressionContext; 
Java8Parser.ClassInstanceCreationExpression_lf_primaryContext = ClassInstanceCreationExpression_lf_primaryContext; 
Java8Parser.ClassInstanceCreationExpression_lfno_primaryContext = ClassInstanceCreationExpression_lfno_primaryContext; 
Java8Parser.TypeArgumentsOrDiamondContext = TypeArgumentsOrDiamondContext; 
Java8Parser.FieldAccessContext = FieldAccessContext; 
Java8Parser.FieldAccess_lf_primaryContext = FieldAccess_lf_primaryContext; 
Java8Parser.FieldAccess_lfno_primaryContext = FieldAccess_lfno_primaryContext; 
Java8Parser.ArrayAccessContext = ArrayAccessContext; 
Java8Parser.ArrayAccess_lf_primaryContext = ArrayAccess_lf_primaryContext; 
Java8Parser.ArrayAccess_lfno_primaryContext = ArrayAccess_lfno_primaryContext; 
Java8Parser.MethodInvocationContext = MethodInvocationContext; 
Java8Parser.MethodInvocation_lf_primaryContext = MethodInvocation_lf_primaryContext; 
Java8Parser.MethodInvocation_lfno_primaryContext = MethodInvocation_lfno_primaryContext; 
Java8Parser.ArgumentListContext = ArgumentListContext; 
Java8Parser.MethodReferenceContext = MethodReferenceContext; 
Java8Parser.MethodReference_lf_primaryContext = MethodReference_lf_primaryContext; 
Java8Parser.MethodReference_lfno_primaryContext = MethodReference_lfno_primaryContext; 
Java8Parser.ArrayCreationExpressionContext = ArrayCreationExpressionContext; 
Java8Parser.DimExprsContext = DimExprsContext; 
Java8Parser.DimExprContext = DimExprContext; 
Java8Parser.ConstantExpressionContext = ConstantExpressionContext; 
Java8Parser.ExpressionContext = ExpressionContext; 
Java8Parser.LambdaExpressionContext = LambdaExpressionContext; 
Java8Parser.LambdaParametersContext = LambdaParametersContext; 
Java8Parser.InferredFormalParameterListContext = InferredFormalParameterListContext; 
Java8Parser.LambdaBodyContext = LambdaBodyContext; 
Java8Parser.AssignmentExpressionContext = AssignmentExpressionContext; 
Java8Parser.AssignmentContext = AssignmentContext; 
Java8Parser.LeftHandSideContext = LeftHandSideContext; 
Java8Parser.AssignmentOperatorContext = AssignmentOperatorContext; 
Java8Parser.ConditionalExpressionContext = ConditionalExpressionContext; 
Java8Parser.ConditionalOrExpressionContext = ConditionalOrExpressionContext; 
Java8Parser.ConditionalAndExpressionContext = ConditionalAndExpressionContext; 
Java8Parser.InclusiveOrExpressionContext = InclusiveOrExpressionContext; 
Java8Parser.ExclusiveOrExpressionContext = ExclusiveOrExpressionContext; 
Java8Parser.AndExpressionContext = AndExpressionContext; 
Java8Parser.EqualityExpressionContext = EqualityExpressionContext; 
Java8Parser.RelationalExpressionContext = RelationalExpressionContext; 
Java8Parser.ShiftExpressionContext = ShiftExpressionContext; 
Java8Parser.AdditiveExpressionContext = AdditiveExpressionContext; 
Java8Parser.MultiplicativeExpressionContext = MultiplicativeExpressionContext; 
Java8Parser.UnaryExpressionContext = UnaryExpressionContext; 
Java8Parser.PreIncrementExpressionContext = PreIncrementExpressionContext; 
Java8Parser.PreDecrementExpressionContext = PreDecrementExpressionContext; 
Java8Parser.UnaryExpressionNotPlusMinusContext = UnaryExpressionNotPlusMinusContext; 
Java8Parser.PostfixExpressionContext = PostfixExpressionContext; 
Java8Parser.PostIncrementExpressionContext = PostIncrementExpressionContext; 
Java8Parser.PostIncrementExpression_lf_postfixExpressionContext = PostIncrementExpression_lf_postfixExpressionContext; 
Java8Parser.PostDecrementExpressionContext = PostDecrementExpressionContext; 
Java8Parser.PostDecrementExpression_lf_postfixExpressionContext = PostDecrementExpression_lf_postfixExpressionContext; 
Java8Parser.CastExpressionContext = CastExpressionContext; 

export { Java8Parser };